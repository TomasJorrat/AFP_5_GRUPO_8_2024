
API_BT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a48  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c20  08002c20  00003c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c38  08002c38  00004020  2**0
                  CONTENTS
  4 .ARM          00000008  08002c38  08002c38  00003c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c40  08002c40  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c40  08002c40  00003c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c44  08002c44  00003c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08002c48  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000020  08002c68  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002c68  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090f3  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001999  00000000  00000000  0000d143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059e  00000000  00000000  0000f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa0e  00000000  00000000  0000f7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a15f  00000000  00000000  0002f1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1fbd  00000000  00000000  0003934b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd8  00000000  00000000  000fb34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000fd024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002c08 	.word	0x08002c08

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08002c08 	.word	0x08002c08

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa7e 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f816 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f880 	bl	8000618 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 fa30 	bl	800097c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800051c:	2101      	movs	r1, #1
 800051e:	4806      	ldr	r0, [pc, #24]	@ (8000538 <main+0x30>)
 8000520:	f000 fe5b 	bl	80011da <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000524:	20c8      	movs	r0, #200	@ 0xc8
 8000526:	f000 fae3 	bl	8000af0 <HAL_Delay>
	  BT_TX(mensaje);
 800052a:	4b04      	ldr	r3, [pc, #16]	@ (800053c <main+0x34>)
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fa4e 	bl	80009d0 <BT_TX>
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000534:	bf00      	nop
 8000536:	e7f1      	b.n	800051c <main+0x14>
 8000538:	40020400 	.word	0x40020400
 800053c:	20000000 	.word	0x20000000

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2234      	movs	r2, #52	@ 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fb2e 	bl	8002bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <SystemClock_Config+0xd0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a28      	ldr	r2, [pc, #160]	@ (8000610 <SystemClock_Config+0xd0>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b26      	ldr	r3, [pc, #152]	@ (8000610 <SystemClock_Config+0xd0>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	4b23      	ldr	r3, [pc, #140]	@ (8000614 <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a22      	ldr	r2, [pc, #136]	@ (8000614 <SystemClock_Config+0xd4>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <SystemClock_Config+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80005b4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80005b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005be:	2308      	movs	r3, #8
 80005c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f864 	bl	8001698 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 f8d5 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2103      	movs	r1, #3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fe2e 	bl	8001258 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000602:	f000 f8bf 	bl	8000784 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	@ 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	@ 0x30
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
 8000632:	4b50      	ldr	r3, [pc, #320]	@ (8000774 <MX_GPIO_Init+0x15c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a4f      	ldr	r2, [pc, #316]	@ (8000774 <MX_GPIO_Init+0x15c>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b4d      	ldr	r3, [pc, #308]	@ (8000774 <MX_GPIO_Init+0x15c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	4b49      	ldr	r3, [pc, #292]	@ (8000774 <MX_GPIO_Init+0x15c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a48      	ldr	r2, [pc, #288]	@ (8000774 <MX_GPIO_Init+0x15c>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b46      	ldr	r3, [pc, #280]	@ (8000774 <MX_GPIO_Init+0x15c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b42      	ldr	r3, [pc, #264]	@ (8000774 <MX_GPIO_Init+0x15c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a41      	ldr	r2, [pc, #260]	@ (8000774 <MX_GPIO_Init+0x15c>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b3f      	ldr	r3, [pc, #252]	@ (8000774 <MX_GPIO_Init+0x15c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b3b      	ldr	r3, [pc, #236]	@ (8000774 <MX_GPIO_Init+0x15c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a3a      	ldr	r2, [pc, #232]	@ (8000774 <MX_GPIO_Init+0x15c>)
 800068c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b38      	ldr	r3, [pc, #224]	@ (8000774 <MX_GPIO_Init+0x15c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b34      	ldr	r3, [pc, #208]	@ (8000774 <MX_GPIO_Init+0x15c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a33      	ldr	r2, [pc, #204]	@ (8000774 <MX_GPIO_Init+0x15c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <MX_GPIO_Init+0x15c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <MX_GPIO_Init+0x15c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000774 <MX_GPIO_Init+0x15c>)
 80006c4:	f043 0308 	orr.w	r3, r3, #8
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <MX_GPIO_Init+0x15c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006dc:	4826      	ldr	r0, [pc, #152]	@ (8000778 <MX_GPIO_Init+0x160>)
 80006de:	f000 fd63 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	@ 0x40
 80006e6:	4825      	ldr	r0, [pc, #148]	@ (800077c <MX_GPIO_Init+0x164>)
 80006e8:	f000 fd5e 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	481f      	ldr	r0, [pc, #124]	@ (8000780 <MX_GPIO_Init+0x168>)
 8000704:	f000 fbbc 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000708:	f244 0381 	movw	r3, #16513	@ 0x4081
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4815      	ldr	r0, [pc, #84]	@ (8000778 <MX_GPIO_Init+0x160>)
 8000722:	f000 fbad 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000726:	2340      	movs	r3, #64	@ 0x40
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	480f      	ldr	r0, [pc, #60]	@ (800077c <MX_GPIO_Init+0x164>)
 800073e:	f000 fb9f 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000742:	2380      	movs	r3, #128	@ 0x80
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <MX_GPIO_Init+0x164>)
 8000756:	f000 fb93 	bl	8000e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2028      	movs	r0, #40	@ 0x28
 8000760:	f000 fac5 	bl	8000cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000764:	2028      	movs	r0, #40	@ 0x28
 8000766:	f000 fade 	bl	8000d26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076a:	bf00      	nop
 800076c:	3730      	adds	r7, #48	@ 0x30
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400
 800077c:	40021800 	.word	0x40021800
 8000780:	40020800 	.word	0x40020800

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <Error_Handler+0x8>

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079e:	4a0f      	ldr	r2, [pc, #60]	@ (80007dc <HAL_MspInit+0x4c>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <HAL_MspInit+0x4c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000874 <HAL_UART_MspInit+0x94>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d133      	bne.n	800086a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <HAL_UART_MspInit+0x98>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <HAL_UART_MspInit+0x98>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000810:	6413      	str	r3, [r2, #64]	@ 0x40
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <HAL_UART_MspInit+0x98>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <HAL_UART_MspInit+0x98>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <HAL_UART_MspInit+0x98>)
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <HAL_UART_MspInit+0x98>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800083a:	2360      	movs	r3, #96	@ 0x60
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084a:	2307      	movs	r3, #7
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4809      	ldr	r0, [pc, #36]	@ (800087c <HAL_UART_MspInit+0x9c>)
 8000856:	f000 fb13 	bl	8000e80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	2026      	movs	r0, #38	@ 0x26
 8000860:	f000 fa45 	bl	8000cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000864:	2026      	movs	r0, #38	@ 0x26
 8000866:	f000 fa5e 	bl	8000d26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	@ 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40004400 	.word	0x40004400
 8000878:	40023800 	.word	0x40023800
 800087c:	40020c00 	.word	0x40020c00

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <NMI_Handler+0x4>

08000888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <MemManage_Handler+0x4>

08000898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d6:	f000 f8eb 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <USART2_IRQHandler+0x10>)
 80008e6:	f001 fa37 	bl	8001d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000003c 	.word	0x2000003c

080008f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80008f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008fc:	f000 fc88 	bl	8001210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000960 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800092c:	f7ff ffea 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	@ (8000968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	@ (8000974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000956:	f002 f933 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fdd5 	bl	8000508 <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000960:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800096c:	08002c48 	.word	0x08002c48
  ldr r2, =_sbss
 8000970:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000974:	20000088 	.word	0x20000088

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <MX_USART2_UART_Init>:
 * @brief Inicializacion USART2 (Asincrona)
 * @param void
 * @retval void
*/
void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */
  huart2.Instance = USART2;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_USART2_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000988:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f001 f8f4 	bl	8001ba0 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f7ff fee1 	bl	8000784 <Error_Handler>
  }
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000003c 	.word	0x2000003c
 80009cc:	40004400 	.word	0x40004400

080009d0 <BT_TX>:
 * @param msj_t Mx_TX (cadena de caracteres)
 * @retval void

*/
void BT_TX(msj_t Mx_TX)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, Mx_TX, sizeof(Mx_TX), HAL_MAX_DELAY);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	2201      	movs	r2, #1
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <BT_TX+0x24>)
 80009e6:	f001 f92b 	bl	8001c40 <HAL_UART_Transmit>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000003c 	.word	0x2000003c

080009f8 <HAL_UART_TxCpltCallback>:
 * @brief Cuando se completa la transmision se puede realizar una tarea determinada
 * @param modulo UART
 * @retval void
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
		/*USER CODE BEGIN TxCpltCallback*/

		/*USER CODE END TxCpltCallback*/
	}
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <HAL_Init+0x40>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_Init+0x40>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	@ (8000a4c <HAL_Init+0x40>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f94f 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fea6 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023c00 	.word	0x40023c00

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f967 	bl	8000d42 <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f92f 	bl	8000cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	@ (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000014 	.word	0x20000014
 8000aa8:	2000001c 	.word	0x2000001c
 8000aac:	20000018 	.word	0x20000018

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	2000001c 	.word	0x2000001c
 8000ad4:	20000084 	.word	0x20000084

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000084 	.word	0x20000084

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000001c 	.word	0x2000001c

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	@ (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	@ (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	@ (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	@ 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	@ 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca4:	d301      	bcc.n	8000caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00f      	b.n	8000cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f7ff ff8e 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff29 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff3e 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff8e 	bl	8000c2c <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff31 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffa2 	bl	8000c94 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff feb6 	bl	8000ad8 <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d008      	beq.n	8000d8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2280      	movs	r2, #128	@ 0x80
 8000d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e052      	b.n	8000e32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0216 	bic.w	r2, r2, #22
 8000d9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	695a      	ldr	r2, [r3, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000daa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d103      	bne.n	8000dbc <HAL_DMA_Abort+0x62>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0208 	bic.w	r2, r2, #8
 8000dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0201 	bic.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ddc:	e013      	b.n	8000e06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dde:	f7ff fe7b 	bl	8000ad8 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d90c      	bls.n	8000e06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2220      	movs	r2, #32
 8000df0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e015      	b.n	8000e32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1e4      	bne.n	8000dde <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e18:	223f      	movs	r2, #63	@ 0x3f
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d004      	beq.n	8000e58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e00c      	b.n	8000e72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0201 	bic.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	e165      	b.n	8001168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	f040 8154 	bne.w	8001162 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d005      	beq.n	8000ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d130      	bne.n	8000f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 0201 	and.w	r2, r3, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d017      	beq.n	8000f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d123      	bne.n	8000fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	08da      	lsrs	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3208      	adds	r2, #8
 8000f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	220f      	movs	r2, #15
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	69b9      	ldr	r1, [r7, #24]
 8000fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0203 	and.w	r2, r3, #3
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80ae 	beq.w	8001162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b5d      	ldr	r3, [pc, #372]	@ (8001180 <HAL_GPIO_Init+0x300>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	4a5c      	ldr	r2, [pc, #368]	@ (8001180 <HAL_GPIO_Init+0x300>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001014:	6453      	str	r3, [r2, #68]	@ 0x44
 8001016:	4b5a      	ldr	r3, [pc, #360]	@ (8001180 <HAL_GPIO_Init+0x300>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001022:	4a58      	ldr	r2, [pc, #352]	@ (8001184 <HAL_GPIO_Init+0x304>)
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4f      	ldr	r2, [pc, #316]	@ (8001188 <HAL_GPIO_Init+0x308>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d025      	beq.n	800109a <HAL_GPIO_Init+0x21a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4e      	ldr	r2, [pc, #312]	@ (800118c <HAL_GPIO_Init+0x30c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d01f      	beq.n	8001096 <HAL_GPIO_Init+0x216>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4d      	ldr	r2, [pc, #308]	@ (8001190 <HAL_GPIO_Init+0x310>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d019      	beq.n	8001092 <HAL_GPIO_Init+0x212>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4c      	ldr	r2, [pc, #304]	@ (8001194 <HAL_GPIO_Init+0x314>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0x20e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4b      	ldr	r2, [pc, #300]	@ (8001198 <HAL_GPIO_Init+0x318>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <HAL_GPIO_Init+0x20a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4a      	ldr	r2, [pc, #296]	@ (800119c <HAL_GPIO_Init+0x31c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0x206>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a49      	ldr	r2, [pc, #292]	@ (80011a0 <HAL_GPIO_Init+0x320>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_GPIO_Init+0x202>
 800107e:	2306      	movs	r3, #6
 8001080:	e00c      	b.n	800109c <HAL_GPIO_Init+0x21c>
 8001082:	2307      	movs	r3, #7
 8001084:	e00a      	b.n	800109c <HAL_GPIO_Init+0x21c>
 8001086:	2305      	movs	r3, #5
 8001088:	e008      	b.n	800109c <HAL_GPIO_Init+0x21c>
 800108a:	2304      	movs	r3, #4
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x21c>
 800108e:	2303      	movs	r3, #3
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x21c>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x21c>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x21c>
 800109a:	2300      	movs	r3, #0
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	f002 0203 	and.w	r2, r2, #3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ac:	4935      	ldr	r1, [pc, #212]	@ (8001184 <HAL_GPIO_Init+0x304>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ba:	4b3a      	ldr	r3, [pc, #232]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010de:	4a31      	ldr	r2, [pc, #196]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e4:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001108:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110e:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001132:	4a1c      	ldr	r2, [pc, #112]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115c:	4a11      	ldr	r2, [pc, #68]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	f67f ae96 	bls.w	8000e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40021400 	.word	0x40021400
 80011a0:	40021800 	.word	0x40021800
 80011a4:	40013c00 	.word	0x40013c00

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011da:	b480      	push	{r7}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ec:	887a      	ldrh	r2, [r7, #2]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	041a      	lsls	r2, r3, #16
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	400b      	ands	r3, r1
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800121c:	695a      	ldr	r2, [r3, #20]
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	4013      	ands	r3, r2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f806 	bl	8001240 <HAL_GPIO_EXTI_Callback>
  }
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40013c00 	.word	0x40013c00

08001240 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0cc      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800126c:	4b68      	ldr	r3, [pc, #416]	@ (8001410 <HAL_RCC_ClockConfig+0x1b8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d90c      	bls.n	8001294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b65      	ldr	r3, [pc, #404]	@ (8001410 <HAL_RCC_ClockConfig+0x1b8>)
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b63      	ldr	r3, [pc, #396]	@ (8001410 <HAL_RCC_ClockConfig+0x1b8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0b8      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ac:	4b59      	ldr	r3, [pc, #356]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a58      	ldr	r2, [pc, #352]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c4:	4b53      	ldr	r3, [pc, #332]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a52      	ldr	r2, [pc, #328]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d0:	4b50      	ldr	r3, [pc, #320]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	494d      	ldr	r1, [pc, #308]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d044      	beq.n	8001378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b47      	ldr	r3, [pc, #284]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d119      	bne.n	8001336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e07f      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d003      	beq.n	8001316 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001312:	2b03      	cmp	r3, #3
 8001314:	d107      	bne.n	8001326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001316:	4b3f      	ldr	r3, [pc, #252]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d109      	bne.n	8001336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e06f      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001326:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e067      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001336:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f023 0203 	bic.w	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4934      	ldr	r1, [pc, #208]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	4313      	orrs	r3, r2
 8001346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001348:	f7ff fbc6 	bl	8000ad8 <HAL_GetTick>
 800134c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	e00a      	b.n	8001366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001350:	f7ff fbc2 	bl	8000ad8 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135e:	4293      	cmp	r3, r2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e04f      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 020c 	and.w	r2, r3, #12
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	429a      	cmp	r2, r3
 8001376:	d1eb      	bne.n	8001350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001378:	4b25      	ldr	r3, [pc, #148]	@ (8001410 <HAL_RCC_ClockConfig+0x1b8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d20c      	bcs.n	80013a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001386:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <HAL_RCC_ClockConfig+0x1b8>)
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <HAL_RCC_ClockConfig+0x1b8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e032      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ac:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4916      	ldr	r1, [pc, #88]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	490e      	ldr	r1, [pc, #56]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013de:	f000 f821 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	490a      	ldr	r1, [pc, #40]	@ (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	5ccb      	ldrb	r3, [r1, r3]
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	4a09      	ldr	r2, [pc, #36]	@ (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <HAL_RCC_ClockConfig+0x1c8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fb26 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00
 8001414:	40023800 	.word	0x40023800
 8001418:	08002c20 	.word	0x08002c20
 800141c:	20000014 	.word	0x20000014
 8001420:	20000018 	.word	0x20000018

08001424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001428:	b094      	sub	sp, #80	@ 0x50
 800142a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800143c:	4b79      	ldr	r3, [pc, #484]	@ (8001624 <HAL_RCC_GetSysClockFreq+0x200>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d00d      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x40>
 8001448:	2b08      	cmp	r3, #8
 800144a:	f200 80e1 	bhi.w	8001610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <HAL_RCC_GetSysClockFreq+0x34>
 8001452:	2b04      	cmp	r3, #4
 8001454:	d003      	beq.n	800145e <HAL_RCC_GetSysClockFreq+0x3a>
 8001456:	e0db      	b.n	8001610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4b73      	ldr	r3, [pc, #460]	@ (8001628 <HAL_RCC_GetSysClockFreq+0x204>)
 800145a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800145c:	e0db      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800145e:	4b73      	ldr	r3, [pc, #460]	@ (800162c <HAL_RCC_GetSysClockFreq+0x208>)
 8001460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001462:	e0d8      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001464:	4b6f      	ldr	r3, [pc, #444]	@ (8001624 <HAL_RCC_GetSysClockFreq+0x200>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800146c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800146e:	4b6d      	ldr	r3, [pc, #436]	@ (8001624 <HAL_RCC_GetSysClockFreq+0x200>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d063      	beq.n	8001542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147a:	4b6a      	ldr	r3, [pc, #424]	@ (8001624 <HAL_RCC_GetSysClockFreq+0x200>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	099b      	lsrs	r3, r3, #6
 8001480:	2200      	movs	r2, #0
 8001482:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001484:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800148c:	633b      	str	r3, [r7, #48]	@ 0x30
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	@ 0x34
 8001492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001496:	4622      	mov	r2, r4
 8001498:	462b      	mov	r3, r5
 800149a:	f04f 0000 	mov.w	r0, #0
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	0159      	lsls	r1, r3, #5
 80014a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014a8:	0150      	lsls	r0, r2, #5
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4621      	mov	r1, r4
 80014b0:	1a51      	subs	r1, r2, r1
 80014b2:	6139      	str	r1, [r7, #16]
 80014b4:	4629      	mov	r1, r5
 80014b6:	eb63 0301 	sbc.w	r3, r3, r1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80014c8:	4659      	mov	r1, fp
 80014ca:	018b      	lsls	r3, r1, #6
 80014cc:	4651      	mov	r1, sl
 80014ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014d2:	4651      	mov	r1, sl
 80014d4:	018a      	lsls	r2, r1, #6
 80014d6:	4651      	mov	r1, sl
 80014d8:	ebb2 0801 	subs.w	r8, r2, r1
 80014dc:	4659      	mov	r1, fp
 80014de:	eb63 0901 	sbc.w	r9, r3, r1
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014f6:	4690      	mov	r8, r2
 80014f8:	4699      	mov	r9, r3
 80014fa:	4623      	mov	r3, r4
 80014fc:	eb18 0303 	adds.w	r3, r8, r3
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	462b      	mov	r3, r5
 8001504:	eb49 0303 	adc.w	r3, r9, r3
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001516:	4629      	mov	r1, r5
 8001518:	024b      	lsls	r3, r1, #9
 800151a:	4621      	mov	r1, r4
 800151c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001520:	4621      	mov	r1, r4
 8001522:	024a      	lsls	r2, r1, #9
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800152a:	2200      	movs	r2, #0
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800152e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001534:	f7fe fe70 	bl	8000218 <__aeabi_uldivmod>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4613      	mov	r3, r2
 800153e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001540:	e058      	b.n	80015f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001542:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <HAL_RCC_GetSysClockFreq+0x200>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	099b      	lsrs	r3, r3, #6
 8001548:	2200      	movs	r2, #0
 800154a:	4618      	mov	r0, r3
 800154c:	4611      	mov	r1, r2
 800154e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001552:	623b      	str	r3, [r7, #32]
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
 8001558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800155c:	4642      	mov	r2, r8
 800155e:	464b      	mov	r3, r9
 8001560:	f04f 0000 	mov.w	r0, #0
 8001564:	f04f 0100 	mov.w	r1, #0
 8001568:	0159      	lsls	r1, r3, #5
 800156a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800156e:	0150      	lsls	r0, r2, #5
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4641      	mov	r1, r8
 8001576:	ebb2 0a01 	subs.w	sl, r2, r1
 800157a:	4649      	mov	r1, r9
 800157c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800158c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001594:	ebb2 040a 	subs.w	r4, r2, sl
 8001598:	eb63 050b 	sbc.w	r5, r3, fp
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	00eb      	lsls	r3, r5, #3
 80015a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015aa:	00e2      	lsls	r2, r4, #3
 80015ac:	4614      	mov	r4, r2
 80015ae:	461d      	mov	r5, r3
 80015b0:	4643      	mov	r3, r8
 80015b2:	18e3      	adds	r3, r4, r3
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	464b      	mov	r3, r9
 80015b8:	eb45 0303 	adc.w	r3, r5, r3
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015ca:	4629      	mov	r1, r5
 80015cc:	028b      	lsls	r3, r1, #10
 80015ce:	4621      	mov	r1, r4
 80015d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015d4:	4621      	mov	r1, r4
 80015d6:	028a      	lsls	r2, r1, #10
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015de:	2200      	movs	r2, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	61fa      	str	r2, [r7, #28]
 80015e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015e8:	f7fe fe16 	bl	8000218 <__aeabi_uldivmod>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4613      	mov	r3, r2
 80015f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <HAL_RCC_GetSysClockFreq+0x200>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	0c1b      	lsrs	r3, r3, #16
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	3301      	adds	r3, #1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
 800160c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800160e:	e002      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <HAL_RCC_GetSysClockFreq+0x204>)
 8001612:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001618:	4618      	mov	r0, r3
 800161a:	3750      	adds	r7, #80	@ 0x50
 800161c:	46bd      	mov	sp, r7
 800161e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	00f42400 	.word	0x00f42400
 800162c:	007a1200 	.word	0x007a1200

08001630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <HAL_RCC_GetHCLKFreq+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000014 	.word	0x20000014

08001648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800164c:	f7ff fff0 	bl	8001630 <HAL_RCC_GetHCLKFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	0a9b      	lsrs	r3, r3, #10
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	4903      	ldr	r1, [pc, #12]	@ (800166c <HAL_RCC_GetPCLK1Freq+0x24>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800
 800166c:	08002c30 	.word	0x08002c30

08001670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001674:	f7ff ffdc 	bl	8001630 <HAL_RCC_GetHCLKFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	0b5b      	lsrs	r3, r3, #13
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	4903      	ldr	r1, [pc, #12]	@ (8001694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001686:	5ccb      	ldrb	r3, [r1, r3]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	08002c30 	.word	0x08002c30

08001698 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e273      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d075      	beq.n	80017a2 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016b6:	4b88      	ldr	r3, [pc, #544]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d00c      	beq.n	80016dc <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c2:	4b85      	ldr	r3, [pc, #532]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d112      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ce:	4b82      	ldr	r3, [pc, #520]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016da:	d10b      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	4b7e      	ldr	r3, [pc, #504]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d05b      	beq.n	80017a0 <HAL_RCC_OscConfig+0x108>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d157      	bne.n	80017a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e24e      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fc:	d106      	bne.n	800170c <HAL_RCC_OscConfig+0x74>
 80016fe:	4b76      	ldr	r3, [pc, #472]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a75      	ldr	r2, [pc, #468]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x98>
 8001716:	4b70      	ldr	r3, [pc, #448]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6f      	ldr	r2, [pc, #444]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6d      	ldr	r3, [pc, #436]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6c      	ldr	r2, [pc, #432]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 8001730:	4b69      	ldr	r3, [pc, #420]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a68      	ldr	r2, [pc, #416]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b66      	ldr	r3, [pc, #408]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a65      	ldr	r2, [pc, #404]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff f9c2 	bl	8000ad8 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff f9be 	bl	8000ad8 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	@ 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e213      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b5b      	ldr	r3, [pc, #364]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xc0>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff f9ae 	bl	8000ad8 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff f9aa 	bl	8000ad8 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	@ 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1ff      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b51      	ldr	r3, [pc, #324]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0xe8>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017ae:	4b4a      	ldr	r3, [pc, #296]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b47      	ldr	r3, [pc, #284]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
        || \
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	4b44      	ldr	r3, [pc, #272]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x152>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1d3      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4937      	ldr	r1, [pc, #220]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <HAL_RCC_OscConfig+0x244>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff f963 	bl	8000ad8 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff f95f 	bl	8000ad8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1b4      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4925      	ldr	r1, [pc, #148]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <HAL_RCC_OscConfig+0x244>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f942 	bl	8000ad8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff f93e 	bl	8000ad8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e193      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d036      	beq.n	80018f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d016      	beq.n	80018b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <HAL_RCC_OscConfig+0x248>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff f922 	bl	8000ad8 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff f91e 	bl	8000ad8 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e173      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80018ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x200>
 80018b6:	e01b      	b.n	80018f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_RCC_OscConfig+0x248>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff f90b 	bl	8000ad8 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	e00e      	b.n	80018e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff f907 	bl	8000ad8 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d907      	bls.n	80018e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e15c      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
 80018d8:	40023800 	.word	0x40023800
 80018dc:	42470000 	.word	0x42470000
 80018e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e4:	4b8a      	ldr	r3, [pc, #552]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 80018e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ea      	bne.n	80018c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8097 	beq.w	8001a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001902:	4b83      	ldr	r3, [pc, #524]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b7f      	ldr	r3, [pc, #508]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4a7e      	ldr	r2, [pc, #504]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40
 800191e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b79      	ldr	r3, [pc, #484]	@ (8001b14 <HAL_RCC_OscConfig+0x47c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193a:	4b76      	ldr	r3, [pc, #472]	@ (8001b14 <HAL_RCC_OscConfig+0x47c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a75      	ldr	r2, [pc, #468]	@ (8001b14 <HAL_RCC_OscConfig+0x47c>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001946:	f7ff f8c7 	bl	8000ad8 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7ff f8c3 	bl	8000ad8 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e118      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b6c      	ldr	r3, [pc, #432]	@ (8001b14 <HAL_RCC_OscConfig+0x47c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x2ea>
 8001974:	4b66      	ldr	r3, [pc, #408]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001978:	4a65      	ldr	r2, [pc, #404]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001980:	e01c      	b.n	80019bc <HAL_RCC_OscConfig+0x324>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x30c>
 800198a:	4b61      	ldr	r3, [pc, #388]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	4a60      	ldr	r2, [pc, #384]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	@ 0x70
 8001996:	4b5e      	ldr	r3, [pc, #376]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199a:	4a5d      	ldr	r2, [pc, #372]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0x324>
 80019a4:	4b5a      	ldr	r3, [pc, #360]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a8:	4a59      	ldr	r2, [pc, #356]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80019b0:	4b57      	ldr	r3, [pc, #348]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b4:	4a56      	ldr	r2, [pc, #344]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 80019b6:	f023 0304 	bic.w	r3, r3, #4
 80019ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d015      	beq.n	80019f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f888 	bl	8000ad8 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff f884 	bl	8000ad8 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e0d7      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0ee      	beq.n	80019cc <HAL_RCC_OscConfig+0x334>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff f872 	bl	8000ad8 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff f86e 	bl	8000ad8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0c1      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	4b40      	ldr	r3, [pc, #256]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ee      	bne.n	80019f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b3b      	ldr	r3, [pc, #236]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	4a3a      	ldr	r2, [pc, #232]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80ad 	beq.w	8001b90 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a36:	4b36      	ldr	r3, [pc, #216]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d060      	beq.n	8001b04 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d145      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <HAL_RCC_OscConfig+0x480>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f842 	bl	8000ad8 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f83e 	bl	8000ad8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e093      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa0:	071b      	lsls	r3, r3, #28
 8001aa2:	491b      	ldr	r1, [pc, #108]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_RCC_OscConfig+0x480>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff f813 	bl	8000ad8 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff f80f 	bl	8000ad8 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e064      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x41e>
 8001ad4:	e05c      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <HAL_RCC_OscConfig+0x480>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7fe fffc 	bl	8000ad8 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7fe fff8 	bl	8000ad8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e04d      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x44c>
 8001b02:	e045      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e040      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000
 8001b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <HAL_RCC_OscConfig+0x504>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d030      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d129      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d122      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d119      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b62:	085b      	lsrs	r3, r3, #1
 8001b64:	3b01      	subs	r3, #1
 8001b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d10f      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e042      	b.n	8001c38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fe0a 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	@ 0x24
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fd5f 	bl	80026a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d175      	bne.n	8001d4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_UART_Transmit+0x2c>
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e06e      	b.n	8001d4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2221      	movs	r2, #33	@ 0x21
 8001c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c7e:	f7fe ff2b 	bl	8000ad8 <HAL_GetTick>
 8001c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	88fa      	ldrh	r2, [r7, #6]
 8001c88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c98:	d108      	bne.n	8001cac <HAL_UART_Transmit+0x6c>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d104      	bne.n	8001cac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	e003      	b.n	8001cb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cb4:	e02e      	b.n	8001d14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2180      	movs	r1, #128	@ 0x80
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fafb 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e03a      	b.n	8001d4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	e007      	b.n	8001d06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	3301      	adds	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1cb      	bne.n	8001cb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2200      	movs	r2, #0
 8001d26:	2140      	movs	r1, #64	@ 0x40
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fac7 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e006      	b.n	8001d4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e000      	b.n	8001d4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d4c:	2302      	movs	r3, #2
  }
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0ba      	sub	sp, #232	@ 0xe8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10f      	bne.n	8001dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_UART_IRQHandler+0x66>
 8001daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fbb8 	bl	800252c <UART_Receive_IT>
      return;
 8001dbc:	e25b      	b.n	8002276 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80de 	beq.w	8001f84 <HAL_UART_IRQHandler+0x22c>
 8001dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80d1 	beq.w	8001f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_UART_IRQHandler+0xae>
 8001dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_UART_IRQHandler+0xd2>
 8001e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f043 0202 	orr.w	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_UART_IRQHandler+0xf6>
 8001e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f043 0204 	orr.w	r2, r3, #4
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d011      	beq.n	8001e7e <HAL_UART_IRQHandler+0x126>
 8001e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	f043 0208 	orr.w	r2, r3, #8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 81f2 	beq.w	800226c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_UART_IRQHandler+0x14e>
 8001e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fb43 	bl	800252c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb0:	2b40      	cmp	r3, #64	@ 0x40
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_UART_IRQHandler+0x17a>
 8001eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d04f      	beq.n	8001f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fa4b 	bl	800236e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee2:	2b40      	cmp	r3, #64	@ 0x40
 8001ee4:	d141      	bne.n	8001f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3314      	adds	r3, #20
 8001eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ef4:	e853 3f00 	ldrex	r3, [r3]
 8001ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3314      	adds	r3, #20
 8001f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001f12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001f22:	e841 2300 	strex	r3, r2, [r1]
 8001f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1d9      	bne.n	8001ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d013      	beq.n	8001f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002138 <HAL_UART_IRQHandler+0x3e0>)
 8001f40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe ff77 	bl	8000e3a <HAL_DMA_Abort_IT>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d016      	beq.n	8001f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f60:	e00e      	b.n	8001f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f994 	bl	8002290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f68:	e00a      	b.n	8001f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f990 	bl	8002290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f70:	e006      	b.n	8001f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f98c 	bl	8002290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001f7e:	e175      	b.n	800226c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f80:	bf00      	nop
    return;
 8001f82:	e173      	b.n	800226c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	f040 814f 	bne.w	800222c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8148 	beq.w	800222c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8141 	beq.w	800222c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fca:	2b40      	cmp	r3, #64	@ 0x40
 8001fcc:	f040 80b6 	bne.w	800213c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8145 	beq.w	8002270 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	f080 813e 	bcs.w	8002270 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001ffa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002006:	f000 8088 	beq.w	800211a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	330c      	adds	r3, #12
 8002010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002014:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002018:	e853 3f00 	ldrex	r3, [r3]
 800201c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002020:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002028:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	330c      	adds	r3, #12
 8002032:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002036:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800203a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002042:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002046:	e841 2300 	strex	r3, r2, [r1]
 800204a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800204e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1d9      	bne.n	800200a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3314      	adds	r3, #20
 800205c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002060:	e853 3f00 	ldrex	r3, [r3]
 8002064:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3314      	adds	r3, #20
 8002076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800207a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800207e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002080:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002082:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002086:	e841 2300 	strex	r3, r2, [r1]
 800208a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800208c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1e1      	bne.n	8002056 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3314      	adds	r3, #20
 8002098:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800209c:	e853 3f00 	ldrex	r3, [r3]
 80020a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80020a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	3314      	adds	r3, #20
 80020b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80020b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80020bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80020be:	e841 2300 	strex	r3, r2, [r1]
 80020c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80020c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1e3      	bne.n	8002092 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	330c      	adds	r3, #12
 80020de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020e2:	e853 3f00 	ldrex	r3, [r3]
 80020e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80020e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020ea:	f023 0310 	bic.w	r3, r3, #16
 80020ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	330c      	adds	r3, #12
 80020f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80020fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80020fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002100:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002102:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002104:	e841 2300 	strex	r3, r2, [r1]
 8002108:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800210a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e3      	bne.n	80020d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fe20 	bl	8000d5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002128:	b29b      	uxth	r3, r3
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	b29b      	uxth	r3, r3
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8b7 	bl	80022a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002136:	e09b      	b.n	8002270 <HAL_UART_IRQHandler+0x518>
 8002138:	08002435 	.word	0x08002435
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002144:	b29b      	uxth	r3, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 808e 	beq.w	8002274 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8089 	beq.w	8002274 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	330c      	adds	r3, #12
 8002168:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800216c:	e853 3f00 	ldrex	r3, [r3]
 8002170:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002186:	647a      	str	r2, [r7, #68]	@ 0x44
 8002188:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800218c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800218e:	e841 2300 	strex	r3, r2, [r1]
 8002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1e3      	bne.n	8002162 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3314      	adds	r3, #20
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	e853 3f00 	ldrex	r3, [r3]
 80021a8:	623b      	str	r3, [r7, #32]
   return(result);
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3314      	adds	r3, #20
 80021ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80021be:	633a      	str	r2, [r7, #48]	@ 0x30
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021c6:	e841 2300 	strex	r3, r2, [r1]
 80021ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80021cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1e3      	bne.n	800219a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	330c      	adds	r3, #12
 80021e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	e853 3f00 	ldrex	r3, [r3]
 80021ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0310 	bic.w	r3, r3, #16
 80021f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	330c      	adds	r3, #12
 8002200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002204:	61fa      	str	r2, [r7, #28]
 8002206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002208:	69b9      	ldr	r1, [r7, #24]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	e841 2300 	strex	r3, r2, [r1]
 8002210:	617b      	str	r3, [r7, #20]
   return(result);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e3      	bne.n	80021e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800221e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f83d 	bl	80022a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800222a:	e023      	b.n	8002274 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800222c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002234:	2b00      	cmp	r3, #0
 8002236:	d009      	beq.n	800224c <HAL_UART_IRQHandler+0x4f4>
 8002238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800223c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f909 	bl	800245c <UART_Transmit_IT>
    return;
 800224a:	e014      	b.n	8002276 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800224c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <HAL_UART_IRQHandler+0x51e>
 8002258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800225c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f949 	bl	80024fc <UART_EndTransmit_IT>
    return;
 800226a:	e004      	b.n	8002276 <HAL_UART_IRQHandler+0x51e>
    return;
 800226c:	bf00      	nop
 800226e:	e002      	b.n	8002276 <HAL_UART_IRQHandler+0x51e>
      return;
 8002270:	bf00      	nop
 8002272:	e000      	b.n	8002276 <HAL_UART_IRQHandler+0x51e>
      return;
 8002274:	bf00      	nop
  }
}
 8002276:	37e8      	adds	r7, #232	@ 0xe8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022cc:	e03b      	b.n	8002346 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d037      	beq.n	8002346 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d6:	f7fe fbff 	bl	8000ad8 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	6a3a      	ldr	r2, [r7, #32]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <UART_WaitOnFlagUntilTimeout+0x30>
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e03a      	b.n	8002366 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d023      	beq.n	8002346 <UART_WaitOnFlagUntilTimeout+0x8a>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b80      	cmp	r3, #128	@ 0x80
 8002302:	d020      	beq.n	8002346 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b40      	cmp	r3, #64	@ 0x40
 8002308:	d01d      	beq.n	8002346 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b08      	cmp	r3, #8
 8002316:	d116      	bne.n	8002346 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f81d 	bl	800236e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2208      	movs	r2, #8
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4013      	ands	r3, r2
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	bf0c      	ite	eq
 8002356:	2301      	moveq	r3, #1
 8002358:	2300      	movne	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	429a      	cmp	r2, r3
 8002362:	d0b4      	beq.n	80022ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800236e:	b480      	push	{r7}
 8002370:	b095      	sub	sp, #84	@ 0x54
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	330c      	adds	r3, #12
 800237c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002380:	e853 3f00 	ldrex	r3, [r3]
 8002384:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800238c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	330c      	adds	r3, #12
 8002394:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002396:	643a      	str	r2, [r7, #64]	@ 0x40
 8002398:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800239c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800239e:	e841 2300 	strex	r3, r2, [r1]
 80023a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e5      	bne.n	8002376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3314      	adds	r3, #20
 80023b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	e853 3f00 	ldrex	r3, [r3]
 80023b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3314      	adds	r3, #20
 80023c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023d2:	e841 2300 	strex	r3, r2, [r1]
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e5      	bne.n	80023aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d119      	bne.n	800241a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	330c      	adds	r3, #12
 80023ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	e853 3f00 	ldrex	r3, [r3]
 80023f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f023 0310 	bic.w	r3, r3, #16
 80023fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002406:	61ba      	str	r2, [r7, #24]
 8002408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240a:	6979      	ldr	r1, [r7, #20]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	e841 2300 	strex	r3, r2, [r1]
 8002412:	613b      	str	r3, [r7, #16]
   return(result);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e5      	bne.n	80023e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002428:	bf00      	nop
 800242a:	3754      	adds	r7, #84	@ 0x54
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002440:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7ff ff1e 	bl	8002290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b21      	cmp	r3, #33	@ 0x21
 800246e:	d13e      	bne.n	80024ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002478:	d114      	bne.n	80024a4 <UART_Transmit_IT+0x48>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d110      	bne.n	80024a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002496:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	1c9a      	adds	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	621a      	str	r2, [r3, #32]
 80024a2:	e008      	b.n	80024b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	1c59      	adds	r1, r3, #1
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6211      	str	r1, [r2, #32]
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29b      	uxth	r3, r3
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4619      	mov	r1, r3
 80024c4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10f      	bne.n	80024ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002512:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7fe fa6b 	bl	80009f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	@ 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b22      	cmp	r3, #34	@ 0x22
 800253e:	f040 80ae 	bne.w	800269e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800254a:	d117      	bne.n	800257c <UART_Receive_IT+0x50>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d113      	bne.n	800257c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	b29b      	uxth	r3, r3
 8002566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256a:	b29a      	uxth	r2, r3
 800256c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	1c9a      	adds	r2, r3, #2
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	629a      	str	r2, [r3, #40]	@ 0x28
 800257a:	e026      	b.n	80025ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800258e:	d007      	beq.n	80025a0 <UART_Receive_IT+0x74>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <UART_Receive_IT+0x82>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e008      	b.n	80025c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4619      	mov	r1, r3
 80025d8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d15d      	bne.n	800269a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0220 	bic.w	r2, r2, #32
 80025ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	2b01      	cmp	r3, #1
 8002622:	d135      	bne.n	8002690 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	330c      	adds	r3, #12
 8002630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	613b      	str	r3, [r7, #16]
   return(result);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f023 0310 	bic.w	r3, r3, #16
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	330c      	adds	r3, #12
 8002648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800264a:	623a      	str	r2, [r7, #32]
 800264c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264e:	69f9      	ldr	r1, [r7, #28]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	e841 2300 	strex	r3, r2, [r1]
 8002656:	61bb      	str	r3, [r7, #24]
   return(result);
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1e5      	bne.n	800262a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b10      	cmp	r3, #16
 800266a:	d10a      	bne.n	8002682 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fe0b 	bl	80022a4 <HAL_UARTEx_RxEventCallback>
 800268e:	e002      	b.n	8002696 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fdf3 	bl	800227c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	e002      	b.n	80026a0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3730      	adds	r7, #48	@ 0x30
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ac:	b0c0      	sub	sp, #256	@ 0x100
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c4:	68d9      	ldr	r1, [r3, #12]
 80026c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	ea40 0301 	orr.w	r3, r0, r1
 80026d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	431a      	orrs	r2, r3
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002700:	f021 010c 	bic.w	r1, r1, #12
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800270e:	430b      	orrs	r3, r1
 8002710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002722:	6999      	ldr	r1, [r3, #24]
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	ea40 0301 	orr.w	r3, r0, r1
 800272e:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b95      	ldr	r3, [pc, #596]	@ (800298c <UART_SetConfig+0x2e4>)
 8002738:	429a      	cmp	r2, r3
 800273a:	d011      	beq.n	8002760 <UART_SetConfig+0xb8>
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b93      	ldr	r3, [pc, #588]	@ (8002990 <UART_SetConfig+0x2e8>)
 8002744:	429a      	cmp	r2, r3
 8002746:	d00b      	beq.n	8002760 <UART_SetConfig+0xb8>
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b91      	ldr	r3, [pc, #580]	@ (8002994 <UART_SetConfig+0x2ec>)
 8002750:	429a      	cmp	r2, r3
 8002752:	d005      	beq.n	8002760 <UART_SetConfig+0xb8>
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b8f      	ldr	r3, [pc, #572]	@ (8002998 <UART_SetConfig+0x2f0>)
 800275c:	429a      	cmp	r2, r3
 800275e:	d104      	bne.n	800276a <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002760:	f7fe ff86 	bl	8001670 <HAL_RCC_GetPCLK2Freq>
 8002764:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002768:	e003      	b.n	8002772 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800276a:	f7fe ff6d 	bl	8001648 <HAL_RCC_GetPCLK1Freq>
 800276e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800277c:	f040 8110 	bne.w	80029a0 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002784:	2200      	movs	r2, #0
 8002786:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800278a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800278e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002792:	4622      	mov	r2, r4
 8002794:	462b      	mov	r3, r5
 8002796:	1891      	adds	r1, r2, r2
 8002798:	65b9      	str	r1, [r7, #88]	@ 0x58
 800279a:	415b      	adcs	r3, r3
 800279c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800279e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027a2:	4621      	mov	r1, r4
 80027a4:	eb12 0801 	adds.w	r8, r2, r1
 80027a8:	4629      	mov	r1, r5
 80027aa:	eb43 0901 	adc.w	r9, r3, r1
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	eb18 0303 	adds.w	r3, r8, r3
 80027cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027d0:	462b      	mov	r3, r5
 80027d2:	eb49 0303 	adc.w	r3, r9, r3
 80027d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027ee:	460b      	mov	r3, r1
 80027f0:	18db      	adds	r3, r3, r3
 80027f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80027f4:	4613      	mov	r3, r2
 80027f6:	eb42 0303 	adc.w	r3, r2, r3
 80027fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80027fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002800:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002804:	f7fd fd08 	bl	8000218 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4b63      	ldr	r3, [pc, #396]	@ (800299c <UART_SetConfig+0x2f4>)
 800280e:	fba3 2302 	umull	r2, r3, r3, r2
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	011c      	lsls	r4, r3, #4
 8002816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800281a:	2200      	movs	r2, #0
 800281c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002820:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002824:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002828:	4642      	mov	r2, r8
 800282a:	464b      	mov	r3, r9
 800282c:	1891      	adds	r1, r2, r2
 800282e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002830:	415b      	adcs	r3, r3
 8002832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002834:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002838:	4641      	mov	r1, r8
 800283a:	eb12 0a01 	adds.w	sl, r2, r1
 800283e:	4649      	mov	r1, r9
 8002840:	eb43 0b01 	adc.w	fp, r3, r1
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002850:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002854:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002858:	4692      	mov	sl, r2
 800285a:	469b      	mov	fp, r3
 800285c:	4643      	mov	r3, r8
 800285e:	eb1a 0303 	adds.w	r3, sl, r3
 8002862:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002866:	464b      	mov	r3, r9
 8002868:	eb4b 0303 	adc.w	r3, fp, r3
 800286c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800287c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002880:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002884:	460b      	mov	r3, r1
 8002886:	18db      	adds	r3, r3, r3
 8002888:	643b      	str	r3, [r7, #64]	@ 0x40
 800288a:	4613      	mov	r3, r2
 800288c:	eb42 0303 	adc.w	r3, r2, r3
 8002890:	647b      	str	r3, [r7, #68]	@ 0x44
 8002892:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002896:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800289a:	f7fd fcbd 	bl	8000218 <__aeabi_uldivmod>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	4b3d      	ldr	r3, [pc, #244]	@ (800299c <UART_SetConfig+0x2f4>)
 80028a6:	fba3 2301 	umull	r2, r3, r3, r1
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2264      	movs	r2, #100	@ 0x64
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	1acb      	subs	r3, r1, r3
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028ba:	4b38      	ldr	r3, [pc, #224]	@ (800299c <UART_SetConfig+0x2f4>)
 80028bc:	fba3 2302 	umull	r2, r3, r3, r2
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028c8:	441c      	add	r4, r3
 80028ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028dc:	4642      	mov	r2, r8
 80028de:	464b      	mov	r3, r9
 80028e0:	1891      	adds	r1, r2, r2
 80028e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028e4:	415b      	adcs	r3, r3
 80028e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028ec:	4641      	mov	r1, r8
 80028ee:	1851      	adds	r1, r2, r1
 80028f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80028f2:	4649      	mov	r1, r9
 80028f4:	414b      	adcs	r3, r1
 80028f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002904:	4659      	mov	r1, fp
 8002906:	00cb      	lsls	r3, r1, #3
 8002908:	4651      	mov	r1, sl
 800290a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800290e:	4651      	mov	r1, sl
 8002910:	00ca      	lsls	r2, r1, #3
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	4603      	mov	r3, r0
 8002918:	4642      	mov	r2, r8
 800291a:	189b      	adds	r3, r3, r2
 800291c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002920:	464b      	mov	r3, r9
 8002922:	460a      	mov	r2, r1
 8002924:	eb42 0303 	adc.w	r3, r2, r3
 8002928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002938:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800293c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002940:	460b      	mov	r3, r1
 8002942:	18db      	adds	r3, r3, r3
 8002944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002946:	4613      	mov	r3, r2
 8002948:	eb42 0303 	adc.w	r3, r2, r3
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800294e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002952:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002956:	f7fd fc5f 	bl	8000218 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <UART_SetConfig+0x2f4>)
 8002960:	fba3 1302 	umull	r1, r3, r3, r2
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	2164      	movs	r1, #100	@ 0x64
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	3332      	adds	r3, #50	@ 0x32
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <UART_SetConfig+0x2f4>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	f003 0207 	and.w	r2, r3, #7
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4422      	add	r2, r4
 8002986:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002988:	e10a      	b.n	8002ba0 <UART_SetConfig+0x4f8>
 800298a:	bf00      	nop
 800298c:	40011000 	.word	0x40011000
 8002990:	40011400 	.word	0x40011400
 8002994:	40011800 	.word	0x40011800
 8002998:	40011c00 	.word	0x40011c00
 800299c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029b2:	4642      	mov	r2, r8
 80029b4:	464b      	mov	r3, r9
 80029b6:	1891      	adds	r1, r2, r2
 80029b8:	6239      	str	r1, [r7, #32]
 80029ba:	415b      	adcs	r3, r3
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029c2:	4641      	mov	r1, r8
 80029c4:	1854      	adds	r4, r2, r1
 80029c6:	4649      	mov	r1, r9
 80029c8:	eb43 0501 	adc.w	r5, r3, r1
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	00eb      	lsls	r3, r5, #3
 80029d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029da:	00e2      	lsls	r2, r4, #3
 80029dc:	4614      	mov	r4, r2
 80029de:	461d      	mov	r5, r3
 80029e0:	4643      	mov	r3, r8
 80029e2:	18e3      	adds	r3, r4, r3
 80029e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029e8:	464b      	mov	r3, r9
 80029ea:	eb45 0303 	adc.w	r3, r5, r3
 80029ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a0e:	4629      	mov	r1, r5
 8002a10:	008b      	lsls	r3, r1, #2
 8002a12:	4621      	mov	r1, r4
 8002a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a18:	4621      	mov	r1, r4
 8002a1a:	008a      	lsls	r2, r1, #2
 8002a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a20:	f7fd fbfa 	bl	8000218 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4b60      	ldr	r3, [pc, #384]	@ (8002bac <UART_SetConfig+0x504>)
 8002a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	011c      	lsls	r4, r3, #4
 8002a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a44:	4642      	mov	r2, r8
 8002a46:	464b      	mov	r3, r9
 8002a48:	1891      	adds	r1, r2, r2
 8002a4a:	61b9      	str	r1, [r7, #24]
 8002a4c:	415b      	adcs	r3, r3
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a54:	4641      	mov	r1, r8
 8002a56:	1851      	adds	r1, r2, r1
 8002a58:	6139      	str	r1, [r7, #16]
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	414b      	adcs	r3, r1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	00cb      	lsls	r3, r1, #3
 8002a70:	4651      	mov	r1, sl
 8002a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a76:	4651      	mov	r1, sl
 8002a78:	00ca      	lsls	r2, r1, #3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4642      	mov	r2, r8
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a88:	464b      	mov	r3, r9
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	eb42 0303 	adc.w	r3, r2, r3
 8002a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002aac:	4649      	mov	r1, r9
 8002aae:	008b      	lsls	r3, r1, #2
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	008a      	lsls	r2, r1, #2
 8002aba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002abe:	f7fd fbab 	bl	8000218 <__aeabi_uldivmod>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4b38      	ldr	r3, [pc, #224]	@ (8002bac <UART_SetConfig+0x504>)
 8002aca:	fba3 2301 	umull	r2, r3, r3, r1
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2264      	movs	r2, #100	@ 0x64
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	1acb      	subs	r3, r1, r3
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	3332      	adds	r3, #50	@ 0x32
 8002adc:	4a33      	ldr	r2, [pc, #204]	@ (8002bac <UART_SetConfig+0x504>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae8:	441c      	add	r4, r3
 8002aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aee:	2200      	movs	r2, #0
 8002af0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002af2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002af4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002af8:	4642      	mov	r2, r8
 8002afa:	464b      	mov	r3, r9
 8002afc:	1891      	adds	r1, r2, r2
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	415b      	adcs	r3, r3
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b08:	4641      	mov	r1, r8
 8002b0a:	1851      	adds	r1, r2, r1
 8002b0c:	6039      	str	r1, [r7, #0]
 8002b0e:	4649      	mov	r1, r9
 8002b10:	414b      	adcs	r3, r1
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b20:	4659      	mov	r1, fp
 8002b22:	00cb      	lsls	r3, r1, #3
 8002b24:	4651      	mov	r1, sl
 8002b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	00ca      	lsls	r2, r1, #3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	4642      	mov	r2, r8
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	460a      	mov	r2, r1
 8002b3e:	eb42 0303 	adc.w	r3, r2, r3
 8002b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	008b      	lsls	r3, r1, #2
 8002b60:	4641      	mov	r1, r8
 8002b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b66:	4641      	mov	r1, r8
 8002b68:	008a      	lsls	r2, r1, #2
 8002b6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b6e:	f7fd fb53 	bl	8000218 <__aeabi_uldivmod>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <UART_SetConfig+0x504>)
 8002b78:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	2164      	movs	r1, #100	@ 0x64
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	3332      	adds	r3, #50	@ 0x32
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <UART_SetConfig+0x504>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	f003 020f 	and.w	r2, r3, #15
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4422      	add	r2, r4
 8002b9e:	609a      	str	r2, [r3, #8]
}
 8002ba0:	bf00      	nop
 8002ba2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bac:	51eb851f 	.word	0x51eb851f

08002bb0 <memset>:
 8002bb0:	4402      	add	r2, r0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d100      	bne.n	8002bba <memset+0xa>
 8002bb8:	4770      	bx	lr
 8002bba:	f803 1b01 	strb.w	r1, [r3], #1
 8002bbe:	e7f9      	b.n	8002bb4 <memset+0x4>

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	4d0d      	ldr	r5, [pc, #52]	@ (8002bf8 <__libc_init_array+0x38>)
 8002bc4:	4c0d      	ldr	r4, [pc, #52]	@ (8002bfc <__libc_init_array+0x3c>)
 8002bc6:	1b64      	subs	r4, r4, r5
 8002bc8:	10a4      	asrs	r4, r4, #2
 8002bca:	2600      	movs	r6, #0
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	4d0b      	ldr	r5, [pc, #44]	@ (8002c00 <__libc_init_array+0x40>)
 8002bd2:	4c0c      	ldr	r4, [pc, #48]	@ (8002c04 <__libc_init_array+0x44>)
 8002bd4:	f000 f818 	bl	8002c08 <_init>
 8002bd8:	1b64      	subs	r4, r4, r5
 8002bda:	10a4      	asrs	r4, r4, #2
 8002bdc:	2600      	movs	r6, #0
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08002c40 	.word	0x08002c40
 8002bfc:	08002c40 	.word	0x08002c40
 8002c00:	08002c40 	.word	0x08002c40
 8002c04:	08002c44 	.word	0x08002c44

08002c08 <_init>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr

08002c14 <_fini>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr
