
AFP_5_GRUPO_8_Alarma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005114  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  080052f4  080052f4  000062f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b0  080055b0  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  080055b0  080055b0  000065b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055b8  080055b8  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b8  080055b8  000065b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055bc  080055bc  000065bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080055c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000084  08005644  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08005644  000072dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db6f  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002730  00000000  00000000  00014c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00017358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096d  00000000  00000000  00017f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021beb  00000000  00000000  000188fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b7a  00000000  00000000  0003a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8e65  00000000  00000000  0004c062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114ec7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003630  00000000  00000000  00114f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  0011853c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	080052dc 	.word	0x080052dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	080052dc 	.word	0x080052dc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f001 fbbf 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 ffe1 	bl	80015b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f001 f84b 	bl	8001688 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005f2:	f001 fa67 	bl	8001ac4 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 feb3 	bl	8001360 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  keypad_init();
 80005fa:	f001 fa91 	bl	8001b20 <keypad_init>
  BT_Test(); // Enviar mensaje de prueba al HC-05
 80005fe:	f000 fcc3 	bl	8000f88 <BT_Test>
  HAL_Delay(30);//
 8000602:	201e      	movs	r0, #30
 8000604:	f001 fc22 	bl	8001e4c <HAL_Delay>
  lcd_init();
 8000608:	f001 f988 	bl	800191c <lcd_init>
  DisplayMainMenu();
 800060c:	f000 f822 	bl	8000654 <DisplayMainMenu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char key = keypad_get_key();
 8000610:	f001 fba2 	bl	8001d58 <keypad_get_key>
 8000614:	4603      	mov	r3, r0
 8000616:	71fb      	strb	r3, [r7, #7]

	  if (key != '\0'){
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f8      	beq.n	8000610 <main+0x30>
		  switch (currentState){
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <main+0x70>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b04      	cmp	r3, #4
 8000624:	dcf4      	bgt.n	8000610 <main+0x30>
 8000626:	2b02      	cmp	r3, #2
 8000628:	da0e      	bge.n	8000648 <main+0x68>
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <main+0x54>
 800062e:	2b01      	cmp	r3, #1
 8000630:	d005      	beq.n	800063e <main+0x5e>
 8000632:	e00c      	b.n	800064e <main+0x6e>
			  case MAIN_MENU:
				  HandleMainMenuInput(key);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f82a 	bl	8000690 <HandleMainMenuInput>
				  break;
 800063c:	e007      	b.n	800064e <main+0x6e>
			  case ALARM_MENU:
				  HandleAlarmMenuInput(key);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f85f 	bl	8000704 <HandleAlarmMenuInput>
				  break;
 8000646:	e002      	b.n	800064e <main+0x6e>
			  case CHANGE_PASS_MENU:
			  case TEST_ALARM_MENU:
			  case ACTIVE_ALARM:
				  CheckSensors(); 				// Revisa los sensores mientras la alarma está activa
 8000648:	f000 fc42 	bl	8000ed0 <CheckSensors>
				  break;
 800064c:	bf00      	nop
  {
 800064e:	e7df      	b.n	8000610 <main+0x30>
 8000650:	200000a5 	.word	0x200000a5

08000654 <DisplayMainMenu>:
}


/* USER CODE BEGIN 4 */
// Función para mostrar el menú principal
void DisplayMainMenu() {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    lcd_clear();
 8000658:	f001 f98b 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 800065c:	2100      	movs	r1, #0
 800065e:	2000      	movs	r0, #0
 8000660:	f001 f991 	bl	8001986 <lcd_set_cursor>
    lcd_print("1.Activar *.Mas");
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <DisplayMainMenu+0x30>)
 8000666:	f001 f9a8 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 800066a:	2100      	movs	r1, #0
 800066c:	2001      	movs	r0, #1
 800066e:	f001 f98a 	bl	8001986 <lcd_set_cursor>
    lcd_print("2.Cambiar Pass");
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <DisplayMainMenu+0x34>)
 8000674:	f001 f9a1 	bl	80019ba <lcd_print>
    currentState = MAIN_MENU;
 8000678:	4b04      	ldr	r3, [pc, #16]	@ (800068c <DisplayMainMenu+0x38>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	080052f4 	.word	0x080052f4
 8000688:	08005304 	.word	0x08005304
 800068c:	200000a5 	.word	0x200000a5

08000690 <HandleMainMenuInput>:

// Manejo de la entrada del menú principal
void HandleMainMenuInput(char key) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b32      	cmp	r3, #50	@ 0x32
 800069e:	d008      	beq.n	80006b2 <HandleMainMenuInput+0x22>
 80006a0:	2b32      	cmp	r3, #50	@ 0x32
 80006a2:	dc0c      	bgt.n	80006be <HandleMainMenuInput+0x2e>
 80006a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80006a6:	d007      	beq.n	80006b8 <HandleMainMenuInput+0x28>
 80006a8:	2b31      	cmp	r3, #49	@ 0x31
 80006aa:	d108      	bne.n	80006be <HandleMainMenuInput+0x2e>
        case '1':
            DisplayAlarmMenu();
 80006ac:	f000 f80c 	bl	80006c8 <DisplayAlarmMenu>
            break;
 80006b0:	e005      	b.n	80006be <HandleMainMenuInput+0x2e>
        case '2':
            DisplayChangePassMenu();
 80006b2:	f000 fa87 	bl	8000bc4 <DisplayChangePassMenu>
            break;
 80006b6:	e002      	b.n	80006be <HandleMainMenuInput+0x2e>
        case '*':
            HandleSubMenu();
 80006b8:	f000 fbae 	bl	8000e18 <HandleSubMenu>
            break;
 80006bc:	bf00      	nop
    }
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <DisplayAlarmMenu>:

// Mostrar menú para activar alarma
void DisplayAlarmMenu() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    lcd_clear();
 80006cc:	f001 f951 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 80006d0:	2100      	movs	r1, #0
 80006d2:	2000      	movs	r0, #0
 80006d4:	f001 f957 	bl	8001986 <lcd_set_cursor>
    lcd_print("1.Sist Completo");
 80006d8:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <DisplayAlarmMenu+0x30>)
 80006da:	f001 f96e 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2001      	movs	r0, #1
 80006e2:	f001 f950 	bl	8001986 <lcd_set_cursor>
    lcd_print("2.Sin Sensor Mov");
 80006e6:	4805      	ldr	r0, [pc, #20]	@ (80006fc <DisplayAlarmMenu+0x34>)
 80006e8:	f001 f967 	bl	80019ba <lcd_print>
    currentState = ALARM_MENU;
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <DisplayAlarmMenu+0x38>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	08005314 	.word	0x08005314
 80006fc:	08005324 	.word	0x08005324
 8000700:	200000a5 	.word	0x200000a5

08000704 <HandleAlarmMenuInput>:

// Manejo de la entrada del menú de alarma
void HandleAlarmMenuInput(char key) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b32      	cmp	r3, #50	@ 0x32
 8000712:	d00d      	beq.n	8000730 <HandleAlarmMenuInput+0x2c>
 8000714:	2b32      	cmp	r3, #50	@ 0x32
 8000716:	dc2a      	bgt.n	800076e <HandleAlarmMenuInput+0x6a>
 8000718:	2b2a      	cmp	r3, #42	@ 0x2a
 800071a:	d011      	beq.n	8000740 <HandleAlarmMenuInput+0x3c>
 800071c:	2b31      	cmp	r3, #49	@ 0x31
 800071e:	d126      	bne.n	800076e <HandleAlarmMenuInput+0x6a>
        case '1':  // Modo "Sist Completo"
            includeMotionSensor = true;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <HandleAlarmMenuInput+0x74>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000726:	4915      	ldr	r1, [pc, #84]	@ (800077c <HandleAlarmMenuInput+0x78>)
 8000728:	4815      	ldr	r0, [pc, #84]	@ (8000780 <HandleAlarmMenuInput+0x7c>)
 800072a:	f000 f82f 	bl	800078c <RequestPassword>
            break;
 800072e:	e01e      	b.n	800076e <HandleAlarmMenuInput+0x6a>
        case '2':  // Modo "Sin Sensor Mov"
            includeMotionSensor = false;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <HandleAlarmMenuInput+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000736:	4911      	ldr	r1, [pc, #68]	@ (800077c <HandleAlarmMenuInput+0x78>)
 8000738:	4811      	ldr	r0, [pc, #68]	@ (8000780 <HandleAlarmMenuInput+0x7c>)
 800073a:	f000 f827 	bl	800078c <RequestPassword>
            break;
 800073e:	e016      	b.n	800076e <HandleAlarmMenuInput+0x6a>
        case '*':  // Si el usuario presiona "*", volver al menú principal
            lcd_clear();
 8000740:	f001 f917 	bl	8001972 <lcd_clear>
            lcd_set_cursor(0, 0);
 8000744:	2100      	movs	r1, #0
 8000746:	2000      	movs	r0, #0
 8000748:	f001 f91d 	bl	8001986 <lcd_set_cursor>
            lcd_print("Operacion");
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <HandleAlarmMenuInput+0x80>)
 800074e:	f001 f934 	bl	80019ba <lcd_print>
            lcd_set_cursor(1, 0);
 8000752:	2100      	movs	r1, #0
 8000754:	2001      	movs	r0, #1
 8000756:	f001 f916 	bl	8001986 <lcd_set_cursor>
            lcd_print("Cancelada");
 800075a:	480b      	ldr	r0, [pc, #44]	@ (8000788 <HandleAlarmMenuInput+0x84>)
 800075c:	f001 f92d 	bl	80019ba <lcd_print>
            HAL_Delay(2000);
 8000760:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000764:	f001 fb72 	bl	8001e4c <HAL_Delay>
            DisplayMainMenu();  // Volver al menú principal
 8000768:	f7ff ff74 	bl	8000654 <DisplayMainMenu>
            break;
 800076c:	bf00      	nop
    }
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000a6 	.word	0x200000a6
 800077c:	080006c9 	.word	0x080006c9
 8000780:	0800090d 	.word	0x0800090d
 8000784:	08005338 	.word	0x08005338
 8000788:	08005344 	.word	0x08005344

0800078c <RequestPassword>:

// Solicitud de contraseña
void RequestPassword(void (*onSuccess)(void), void (*onFailure)(void)) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
    while (1) { // Bucle para reintentar si la contraseña es incorrecta
        lcd_clear();
 8000796:	f001 f8ec 	bl	8001972 <lcd_clear>
        lcd_set_cursor(0, 0);
 800079a:	2100      	movs	r1, #0
 800079c:	2000      	movs	r0, #0
 800079e:	f001 f8f2 	bl	8001986 <lcd_set_cursor>
        lcd_print("Contrasena:____");
 80007a2:	484f      	ldr	r0, [pc, #316]	@ (80008e0 <RequestPassword+0x154>)
 80007a4:	f001 f909 	bl	80019ba <lcd_print>
        memset(inputBuffer, 0, sizeof(inputBuffer));
 80007a8:	2205      	movs	r2, #5
 80007aa:	2100      	movs	r1, #0
 80007ac:	484d      	ldr	r0, [pc, #308]	@ (80008e4 <RequestPassword+0x158>)
 80007ae:	f004 f90d 	bl	80049cc <memset>
        inputIndex = 0;
 80007b2:	4b4d      	ldr	r3, [pc, #308]	@ (80008e8 <RequestPassword+0x15c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]

        uint32_t startTime = HAL_GetTick();  // Guardar el tiempo de inicio
 80007b8:	f001 fb3c 	bl	8001e34 <HAL_GetTick>
 80007bc:	60f8      	str	r0, [r7, #12]

        while (1) {
            if (HAL_GetTick() - startTime > 20000) { // Si pasan más de 20 segundos sin entrada
 80007be:	f001 fb39 	bl	8001e34 <HAL_GetTick>
 80007c2:	4602      	mov	r2, r0
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d916      	bls.n	80007fe <RequestPassword+0x72>
                lcd_clear();
 80007d0:	f001 f8cf 	bl	8001972 <lcd_clear>
                lcd_set_cursor(0, 0);
 80007d4:	2100      	movs	r1, #0
 80007d6:	2000      	movs	r0, #0
 80007d8:	f001 f8d5 	bl	8001986 <lcd_set_cursor>
                lcd_print("Tiempo agotado");
 80007dc:	4843      	ldr	r0, [pc, #268]	@ (80008ec <RequestPassword+0x160>)
 80007de:	f001 f8ec 	bl	80019ba <lcd_print>
                lcd_set_cursor(1, 0);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2001      	movs	r0, #1
 80007e6:	f001 f8ce 	bl	8001986 <lcd_set_cursor>
                lcd_print("Volviendo...");
 80007ea:	4841      	ldr	r0, [pc, #260]	@ (80008f0 <RequestPassword+0x164>)
 80007ec:	f001 f8e5 	bl	80019ba <lcd_print>
                HAL_Delay(2000);
 80007f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f4:	f001 fb2a 	bl	8001e4c <HAL_Delay>
                DisplayMainMenu();  // Volver al menú principal
 80007f8:	f7ff ff2c 	bl	8000654 <DisplayMainMenu>
                return;
 80007fc:	e06d      	b.n	80008da <RequestPassword+0x14e>
            }

            char key = keypad_get_key();
 80007fe:	f001 faab 	bl	8001d58 <keypad_get_key>
 8000802:	4603      	mov	r3, r0
 8000804:	72fb      	strb	r3, [r7, #11]

            if (key != '\0') {
 8000806:	7afb      	ldrb	r3, [r7, #11]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0d8      	beq.n	80007be <RequestPassword+0x32>
                startTime = HAL_GetTick();  // Reiniciar el temporizador
 800080c:	f001 fb12 	bl	8001e34 <HAL_GetTick>
 8000810:	60f8      	str	r0, [r7, #12]

                if (key == '*') {  // Si presiona "*", vuelve al menú principal
 8000812:	7afb      	ldrb	r3, [r7, #11]
 8000814:	2b2a      	cmp	r3, #42	@ 0x2a
 8000816:	d116      	bne.n	8000846 <RequestPassword+0xba>
                    lcd_clear();
 8000818:	f001 f8ab 	bl	8001972 <lcd_clear>
                    lcd_set_cursor(0, 0);
 800081c:	2100      	movs	r1, #0
 800081e:	2000      	movs	r0, #0
 8000820:	f001 f8b1 	bl	8001986 <lcd_set_cursor>
                    lcd_print("Operacion");
 8000824:	4833      	ldr	r0, [pc, #204]	@ (80008f4 <RequestPassword+0x168>)
 8000826:	f001 f8c8 	bl	80019ba <lcd_print>
                    lcd_set_cursor(1, 0);
 800082a:	2100      	movs	r1, #0
 800082c:	2001      	movs	r0, #1
 800082e:	f001 f8aa 	bl	8001986 <lcd_set_cursor>
                    lcd_print("Cancelada");
 8000832:	4831      	ldr	r0, [pc, #196]	@ (80008f8 <RequestPassword+0x16c>)
 8000834:	f001 f8c1 	bl	80019ba <lcd_print>
                    HAL_Delay(2000);
 8000838:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800083c:	f001 fb06 	bl	8001e4c <HAL_Delay>
                    DisplayMainMenu();  // Volver al menú principal
 8000840:	f7ff ff08 	bl	8000654 <DisplayMainMenu>
                    return;
 8000844:	e049      	b.n	80008da <RequestPassword+0x14e>
                }

                if (key >= '0' && key <= '9' && inputIndex < 4) {
 8000846:	7afb      	ldrb	r3, [r7, #11]
 8000848:	2b2f      	cmp	r3, #47	@ 0x2f
 800084a:	d91c      	bls.n	8000886 <RequestPassword+0xfa>
 800084c:	7afb      	ldrb	r3, [r7, #11]
 800084e:	2b39      	cmp	r3, #57	@ 0x39
 8000850:	d819      	bhi.n	8000886 <RequestPassword+0xfa>
 8000852:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <RequestPassword+0x15c>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d815      	bhi.n	8000886 <RequestPassword+0xfa>
                    inputBuffer[inputIndex++] = key;
 800085a:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <RequestPassword+0x15c>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	b2d1      	uxtb	r1, r2
 8000862:	4a21      	ldr	r2, [pc, #132]	@ (80008e8 <RequestPassword+0x15c>)
 8000864:	7011      	strb	r1, [r2, #0]
 8000866:	4619      	mov	r1, r3
 8000868:	4a1e      	ldr	r2, [pc, #120]	@ (80008e4 <RequestPassword+0x158>)
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	5453      	strb	r3, [r2, r1]
                    lcd_set_cursor(1, 10 + inputIndex - 1);
 800086e:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <RequestPassword+0x15c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3309      	adds	r3, #9
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4619      	mov	r1, r3
 8000878:	2001      	movs	r0, #1
 800087a:	f001 f884 	bl	8001986 <lcd_set_cursor>
                    lcd_print("*");
 800087e:	481f      	ldr	r0, [pc, #124]	@ (80008fc <RequestPassword+0x170>)
 8000880:	f001 f89b 	bl	80019ba <lcd_print>
 8000884:	e027      	b.n	80008d6 <RequestPassword+0x14a>
                } else if (key == '#') { //  Cuando se presiona "#", verifica la clave
 8000886:	7afb      	ldrb	r3, [r7, #11]
 8000888:	2b23      	cmp	r3, #35	@ 0x23
 800088a:	d198      	bne.n	80007be <RequestPassword+0x32>
                    inputBuffer[inputIndex] = '\0';
 800088c:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <RequestPassword+0x15c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <RequestPassword+0x158>)
 8000894:	2100      	movs	r1, #0
 8000896:	5499      	strb	r1, [r3, r2]
                    if (strcmp(inputBuffer, currentPassword) == 0) {
 8000898:	4919      	ldr	r1, [pc, #100]	@ (8000900 <RequestPassword+0x174>)
 800089a:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <RequestPassword+0x158>)
 800089c:	f7ff fcc0 	bl	8000220 <strcmp>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d102      	bne.n	80008ac <RequestPassword+0x120>
                        onSuccess(); // Si la clave es correcta, sale de la función
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4798      	blx	r3
                        return;
 80008aa:	e016      	b.n	80008da <RequestPassword+0x14e>
                    } else {
                        //  Si la contraseña es incorrecta, mostrar mensaje y volver a pedirla
                        lcd_clear();
 80008ac:	f001 f861 	bl	8001972 <lcd_clear>
                        lcd_set_cursor(0, 0);
 80008b0:	2100      	movs	r1, #0
 80008b2:	2000      	movs	r0, #0
 80008b4:	f001 f867 	bl	8001986 <lcd_set_cursor>
                        lcd_print("Contrasena");
 80008b8:	4812      	ldr	r0, [pc, #72]	@ (8000904 <RequestPassword+0x178>)
 80008ba:	f001 f87e 	bl	80019ba <lcd_print>
                        lcd_set_cursor(1, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	2001      	movs	r0, #1
 80008c2:	f001 f860 	bl	8001986 <lcd_set_cursor>
                        lcd_print("Incorrecta");
 80008c6:	4810      	ldr	r0, [pc, #64]	@ (8000908 <RequestPassword+0x17c>)
 80008c8:	f001 f877 	bl	80019ba <lcd_print>
                        HAL_Delay(5000);
 80008cc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008d0:	f001 fabc 	bl	8001e4c <HAL_Delay>
                        break;  //  Sale de este while pero vuelve al inicio del while externo
 80008d4:	e000      	b.n	80008d8 <RequestPassword+0x14c>
        while (1) {
 80008d6:	e772      	b.n	80007be <RequestPassword+0x32>
    while (1) { // Bucle para reintentar si la contraseña es incorrecta
 80008d8:	e75d      	b.n	8000796 <RequestPassword+0xa>
                    }
                }
            }
        }
    }
}
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08005350 	.word	0x08005350
 80008e4:	200000a8 	.word	0x200000a8
 80008e8:	200000ad 	.word	0x200000ad
 80008ec:	08005360 	.word	0x08005360
 80008f0:	08005370 	.word	0x08005370
 80008f4:	08005338 	.word	0x08005338
 80008f8:	08005344 	.word	0x08005344
 80008fc:	08005380 	.word	0x08005380
 8000900:	20000000 	.word	0x20000000
 8000904:	08005384 	.word	0x08005384
 8000908:	08005390 	.word	0x08005390

0800090c <ActivateAlarm>:


// Activar la alarma
void ActivateAlarm() {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
    lcd_clear();
 8000912:	f001 f82e 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f001 f834 	bl	8001986 <lcd_set_cursor>
    lcd_print("Alarma Activada");
 800091e:	4833      	ldr	r0, [pc, #204]	@ (80009ec <ActivateAlarm+0xe0>)
 8000920:	f001 f84b 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	2001      	movs	r0, #1
 8000928:	f001 f82d 	bl	8001986 <lcd_set_cursor>
    lcd_print("Corran: 20 seg");
 800092c:	4830      	ldr	r0, [pc, #192]	@ (80009f0 <ActivateAlarm+0xe4>)
 800092e:	f001 f844 	bl	80019ba <lcd_print>

    BT_SendMessage("⚠️ Alarma activada. Corran 20s... \r\n");
 8000932:	4830      	ldr	r0, [pc, #192]	@ (80009f4 <ActivateAlarm+0xe8>)
 8000934:	f000 fb12 	bl	8000f5c <BT_SendMessage>

    uint32_t countdownStart = HAL_GetTick();
 8000938:	f001 fa7c 	bl	8001e34 <HAL_GetTick>
 800093c:	60f8      	str	r0, [r7, #12]
    uint32_t remainingTime = 20;
 800093e:	2314      	movs	r3, #20
 8000940:	60bb      	str	r3, [r7, #8]

    while (remainingTime > 0) {
 8000942:	e022      	b.n	800098a <ActivateAlarm+0x7e>
        if (HAL_GetTick() - countdownStart >= 1000) {
 8000944:	f001 fa76 	bl	8001e34 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000952:	d31a      	bcc.n	800098a <ActivateAlarm+0x7e>
            countdownStart = HAL_GetTick();
 8000954:	f001 fa6e 	bl	8001e34 <HAL_GetTick>
 8000958:	60f8      	str	r0, [r7, #12]
            remainingTime--;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	3b01      	subs	r3, #1
 800095e:	60bb      	str	r3, [r7, #8]

            lcd_set_cursor(1, 7);
 8000960:	2107      	movs	r1, #7
 8000962:	2001      	movs	r0, #1
 8000964:	f001 f80f 	bl	8001986 <lcd_set_cursor>
            lcd_print("   ");
 8000968:	4823      	ldr	r0, [pc, #140]	@ (80009f8 <ActivateAlarm+0xec>)
 800096a:	f001 f826 	bl	80019ba <lcd_print>
            lcd_set_cursor(1, 7);
 800096e:	2107      	movs	r1, #7
 8000970:	2001      	movs	r0, #1
 8000972:	f001 f808 	bl	8001986 <lcd_set_cursor>
            char buffer[3];
            sprintf(buffer, "%2lu", (unsigned long)remainingTime);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	4920      	ldr	r1, [pc, #128]	@ (80009fc <ActivateAlarm+0xf0>)
 800097c:	4618      	mov	r0, r3
 800097e:	f004 f805 	bl	800498c <siprintf>
            lcd_print(buffer);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f001 f818 	bl	80019ba <lcd_print>
    while (remainingTime > 0) {
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1d9      	bne.n	8000944 <ActivateAlarm+0x38>
        }
    }

    lcd_clear();
 8000990:	f000 ffef 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000994:	2100      	movs	r1, #0
 8000996:	2000      	movs	r0, #0
 8000998:	f000 fff5 	bl	8001986 <lcd_set_cursor>
    lcd_print("Alarma");
 800099c:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <ActivateAlarm+0xf4>)
 800099e:	f001 f80c 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	2001      	movs	r0, #1
 80009a6:	f000 ffee 	bl	8001986 <lcd_set_cursor>
    lcd_print("Activa!");
 80009aa:	4816      	ldr	r0, [pc, #88]	@ (8000a04 <ActivateAlarm+0xf8>)
 80009ac:	f001 f805 	bl	80019ba <lcd_print>

    BT_SendMessage("🚨 Alarma activada! \r\n");
 80009b0:	4815      	ldr	r0, [pc, #84]	@ (8000a08 <ActivateAlarm+0xfc>)
 80009b2:	f000 fad3 	bl	8000f5c <BT_SendMessage>

    alarmActivated = true;
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <ActivateAlarm+0x100>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
    currentState = ACTIVE_ALARM;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <ActivateAlarm+0x104>)
 80009be:	2204      	movs	r2, #4
 80009c0:	701a      	strb	r2, [r3, #0]

    while (alarmActivated) {
 80009c2:	e00a      	b.n	80009da <ActivateAlarm+0xce>
        char key = keypad_get_key();
 80009c4:	f001 f9c8 	bl	8001d58 <keypad_get_key>
 80009c8:	4603      	mov	r3, r0
 80009ca:	71fb      	strb	r3, [r7, #7]
        if (key != '\0') {
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <ActivateAlarm+0xce>
            CheckAlarmDeactivation(key);  // Nueva función para manejar la desactivación con temporizador
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 faf7 	bl	8000fc8 <CheckAlarmDeactivation>
    while (alarmActivated) {
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <ActivateAlarm+0x100>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1f0      	bne.n	80009c4 <ActivateAlarm+0xb8>
        }
    }
}
 80009e2:	bf00      	nop
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	0800539c 	.word	0x0800539c
 80009f0:	080053ac 	.word	0x080053ac
 80009f4:	080053bc 	.word	0x080053bc
 80009f8:	080053e8 	.word	0x080053e8
 80009fc:	080053ec 	.word	0x080053ec
 8000a00:	080053f4 	.word	0x080053f4
 8000a04:	080053fc 	.word	0x080053fc
 8000a08:	08005404 	.word	0x08005404
 8000a0c:	200000ae 	.word	0x200000ae
 8000a10:	200000a5 	.word	0x200000a5

08000a14 <DeactivateAlarm>:
           }
       }
}

// Desactivar la alarma si la contraseña es correcta
void DeactivateAlarm() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    lcd_clear();
 8000a18:	f000 ffab 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 ffb1 	bl	8001986 <lcd_set_cursor>
    lcd_print("Alarma");
 8000a24:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <DeactivateAlarm+0x4c>)
 8000a26:	f000 ffc8 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 ffaa 	bl	8001986 <lcd_set_cursor>
    lcd_print("Desactivada");
 8000a32:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <DeactivateAlarm+0x50>)
 8000a34:	f000 ffc1 	bl	80019ba <lcd_print>

    BT_SendMessage("✅ Alarma desactivada. Todo en orden. \r\n"); // Notificación de desactivación
 8000a38:	480b      	ldr	r0, [pc, #44]	@ (8000a68 <DeactivateAlarm+0x54>)
 8000a3a:	f000 fa8f 	bl	8000f5c <BT_SendMessage>

    alarmActivated = false;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <DeactivateAlarm+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]

    // Asegurar que el buzzer se apaga
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2120      	movs	r1, #32
 8000a48:	4809      	ldr	r0, [pc, #36]	@ (8000a70 <DeactivateAlarm+0x5c>)
 8000a4a:	f001 fd73 	bl	8002534 <HAL_GPIO_WritePin>

    HAL_Delay(2000);
 8000a4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a52:	f001 f9fb 	bl	8001e4c <HAL_Delay>
    DisplayMainMenu();
 8000a56:	f7ff fdfd 	bl	8000654 <DisplayMainMenu>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	080053f4 	.word	0x080053f4
 8000a64:	08005434 	.word	0x08005434
 8000a68:	08005440 	.word	0x08005440
 8000a6c:	200000ae 	.word	0x200000ae
 8000a70:	40020000 	.word	0x40020000

08000a74 <IncorrectPassword>:


// Contraseña incorrecta: mensaje y reinicio de intento
void IncorrectPassword() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    lcd_clear();
 8000a78:	f000 ff7b 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 ff81 	bl	8001986 <lcd_set_cursor>
    lcd_print("Contrasena");
 8000a84:	4817      	ldr	r0, [pc, #92]	@ (8000ae4 <IncorrectPassword+0x70>)
 8000a86:	f000 ff98 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f000 ff7a 	bl	8001986 <lcd_set_cursor>
    lcd_print("Incorrecta");
 8000a92:	4815      	ldr	r0, [pc, #84]	@ (8000ae8 <IncorrectPassword+0x74>)
 8000a94:	f000 ff91 	bl	80019ba <lcd_print>
    HAL_Delay(5000); // Mostrar mensaje durante 5 segundos
 8000a98:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a9c:	f001 f9d6 	bl	8001e4c <HAL_Delay>

    // Iniciar temporizador interno si aún no está activo
    if (!countdownStarted) {
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <IncorrectPassword+0x78>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	f083 0301 	eor.w	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d007      	beq.n	8000abe <IncorrectPassword+0x4a>
        countdownStarted = true;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <IncorrectPassword+0x78>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
        startTime = HAL_GetTick(); // Guardar tiempo actual
 8000ab4:	f001 f9be 	bl	8001e34 <HAL_GetTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <IncorrectPassword+0x7c>)
 8000abc:	6013      	str	r3, [r2, #0]
    }

    // Solicitar nuevamente la contraseña
    lcd_clear();
 8000abe:	f000 ff58 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 ff5e 	bl	8001986 <lcd_set_cursor>
    lcd_print("Ingrese");
 8000aca:	480a      	ldr	r0, [pc, #40]	@ (8000af4 <IncorrectPassword+0x80>)
 8000acc:	f000 ff75 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f000 ff57 	bl	8001986 <lcd_set_cursor>
    lcd_print("Contrasena:");
 8000ad8:	4807      	ldr	r0, [pc, #28]	@ (8000af8 <IncorrectPassword+0x84>)
 8000ada:	f000 ff6e 	bl	80019ba <lcd_print>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08005384 	.word	0x08005384
 8000ae8:	08005390 	.word	0x08005390
 8000aec:	200000af 	.word	0x200000af
 8000af0:	200000b0 	.word	0x200000b0
 8000af4:	08005420 	.word	0x08005420
 8000af8:	08005428 	.word	0x08005428

08000afc <AlarmTriggered>:

// Activar alarma sonora
void AlarmTriggered() {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
    lcd_clear();
 8000b02:	f000 ff36 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f000 ff3c 	bl	8001986 <lcd_set_cursor>
    lcd_print("ALERTA!!!");
 8000b0e:	4825      	ldr	r0, [pc, #148]	@ (8000ba4 <AlarmTriggered+0xa8>)
 8000b10:	f000 ff53 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 8000b14:	2100      	movs	r1, #0
 8000b16:	2001      	movs	r0, #1
 8000b18:	f000 ff35 	bl	8001986 <lcd_set_cursor>
    lcd_print("Ingrese clave");
 8000b1c:	4822      	ldr	r0, [pc, #136]	@ (8000ba8 <AlarmTriggered+0xac>)
 8000b1e:	f000 ff4c 	bl	80019ba <lcd_print>

    BT_SendMessage("⚠️ Alarma activada! \r\n"); // Enviar mensaje por Bluetooth
 8000b22:	4822      	ldr	r0, [pc, #136]	@ (8000bac <AlarmTriggered+0xb0>)
 8000b24:	f000 fa1a 	bl	8000f5c <BT_SendMessage>

    uint32_t lastToggleTime = HAL_GetTick();  // Tiempo de referencia para el buzzer
 8000b28:	f001 f984 	bl	8001e34 <HAL_GetTick>
 8000b2c:	6078      	str	r0, [r7, #4]

    while (alarmActivated) {
 8000b2e:	e02a      	b.n	8000b86 <AlarmTriggered+0x8a>
        // Alternar el buzzer cada 500 ms sin bloquear el sistema
        if (HAL_GetTick() - lastToggleTime >= 500) {
 8000b30:	f001 f980 	bl	8001e34 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b3e:	d307      	bcc.n	8000b50 <AlarmTriggered+0x54>
            lastToggleTime = HAL_GetTick();
 8000b40:	f001 f978 	bl	8001e34 <HAL_GetTick>
 8000b44:	6078      	str	r0, [r7, #4]
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 8000b46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4a:	4819      	ldr	r0, [pc, #100]	@ (8000bb0 <AlarmTriggered+0xb4>)
 8000b4c:	f001 fd0b 	bl	8002566 <HAL_GPIO_TogglePin>
        }

        // Permitir que el usuario intente apagar la alarma
        char key = keypad_get_key();
 8000b50:	f001 f902 	bl	8001d58 <keypad_get_key>
 8000b54:	4603      	mov	r3, r0
 8000b56:	70fb      	strb	r3, [r7, #3]
        if (key != '\0') {
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <AlarmTriggered+0x6a>
            RequestPassword(DeactivateAlarm, IncorrectPassword);
 8000b5e:	4915      	ldr	r1, [pc, #84]	@ (8000bb4 <AlarmTriggered+0xb8>)
 8000b60:	4815      	ldr	r0, [pc, #84]	@ (8000bb8 <AlarmTriggered+0xbc>)
 8000b62:	f7ff fe13 	bl	800078c <RequestPassword>
        }

        char btData;
                if (HAL_UART_Receive(&huart2, (uint8_t *)&btData, 1, 100) == HAL_OK) {
 8000b66:	1cb9      	adds	r1, r7, #2
 8000b68:	2364      	movs	r3, #100	@ 0x64
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4813      	ldr	r0, [pc, #76]	@ (8000bbc <AlarmTriggered+0xc0>)
 8000b6e:	f002 ff4a 	bl	8003a06 <HAL_UART_Receive>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d106      	bne.n	8000b86 <AlarmTriggered+0x8a>
                    if (btData == '#') {  // 🔹 Si recibe "#" por Bluetooth, intenta desactivar
 8000b78:	78bb      	ldrb	r3, [r7, #2]
 8000b7a:	2b23      	cmp	r3, #35	@ 0x23
 8000b7c:	d103      	bne.n	8000b86 <AlarmTriggered+0x8a>
                        RequestPassword(DeactivateAlarm, IncorrectPassword);
 8000b7e:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <AlarmTriggered+0xb8>)
 8000b80:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <AlarmTriggered+0xbc>)
 8000b82:	f7ff fe03 	bl	800078c <RequestPassword>
    while (alarmActivated) {
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <AlarmTriggered+0xc4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1d0      	bne.n	8000b30 <AlarmTriggered+0x34>
                    }
                }
    }

    // Apagar el buzzer cuando la alarma se desactiva
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b94:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <AlarmTriggered+0xb4>)
 8000b96:	f001 fccd 	bl	8002534 <HAL_GPIO_WritePin>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	0800546c 	.word	0x0800546c
 8000ba8:	08005478 	.word	0x08005478
 8000bac:	08005488 	.word	0x08005488
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	08000a75 	.word	0x08000a75
 8000bb8:	08000a15 	.word	0x08000a15
 8000bbc:	200000bc 	.word	0x200000bc
 8000bc0:	200000ae 	.word	0x200000ae

08000bc4 <DisplayChangePassMenu>:

// Cambiar contraseña
void DisplayChangePassMenu() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
    lcd_clear();
 8000bca:	f000 fed2 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 fed8 	bl	8001986 <lcd_set_cursor>
    lcd_print("Contrasena");
 8000bd6:	481a      	ldr	r0, [pc, #104]	@ (8000c40 <DisplayChangePassMenu+0x7c>)
 8000bd8:	f000 feef 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 fed1 	bl	8001986 <lcd_set_cursor>
    lcd_print("Actual:");
 8000be4:	4817      	ldr	r0, [pc, #92]	@ (8000c44 <DisplayChangePassMenu+0x80>)
 8000be6:	f000 fee8 	bl	80019ba <lcd_print>

    char key;
    while (1) {  // Bucle para capturar la tecla antes de solicitar la contraseña
        key = keypad_get_key();
 8000bea:	f001 f8b5 	bl	8001d58 <keypad_get_key>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
        if (key == '*') {  //  Si el usuario presiona "*", volver al menú principal
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bf6:	d116      	bne.n	8000c26 <DisplayChangePassMenu+0x62>
            lcd_clear();
 8000bf8:	f000 febb 	bl	8001972 <lcd_clear>
            lcd_set_cursor(0, 0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 fec1 	bl	8001986 <lcd_set_cursor>
            lcd_print("Operacion");
 8000c04:	4810      	ldr	r0, [pc, #64]	@ (8000c48 <DisplayChangePassMenu+0x84>)
 8000c06:	f000 fed8 	bl	80019ba <lcd_print>
            lcd_set_cursor(1, 0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 feba 	bl	8001986 <lcd_set_cursor>
            lcd_print("Cancelada");
 8000c12:	480e      	ldr	r0, [pc, #56]	@ (8000c4c <DisplayChangePassMenu+0x88>)
 8000c14:	f000 fed1 	bl	80019ba <lcd_print>
            HAL_Delay(2000);
 8000c18:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c1c:	f001 f916 	bl	8001e4c <HAL_Delay>
            DisplayMainMenu();  //  Volver al menú principal
 8000c20:	f7ff fd18 	bl	8000654 <DisplayMainMenu>
            return;
 8000c24:	e008      	b.n	8000c38 <DisplayChangePassMenu+0x74>
        }
        if (key != '\0') {  // Si presiona otra tecla, salir del bucle y continuar con la contraseña
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d100      	bne.n	8000c2e <DisplayChangePassMenu+0x6a>
        key = keypad_get_key();
 8000c2c:	e7dd      	b.n	8000bea <DisplayChangePassMenu+0x26>
            break;
 8000c2e:	bf00      	nop
        }
    }

    RequestPassword(ConfirmNewPassword, DisplayChangePassMenu);
 8000c30:	4907      	ldr	r1, [pc, #28]	@ (8000c50 <DisplayChangePassMenu+0x8c>)
 8000c32:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <DisplayChangePassMenu+0x90>)
 8000c34:	f7ff fdaa 	bl	800078c <RequestPassword>
}
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08005384 	.word	0x08005384
 8000c44:	080054a4 	.word	0x080054a4
 8000c48:	08005338 	.word	0x08005338
 8000c4c:	08005344 	.word	0x08005344
 8000c50:	08000bc5 	.word	0x08000bc5
 8000c54:	08000c59 	.word	0x08000c59

08000c58 <ConfirmNewPassword>:

void ConfirmNewPassword() {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
    lcd_clear();
 8000c5e:	f000 fe88 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000c62:	2100      	movs	r1, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fe8e 	bl	8001986 <lcd_set_cursor>
    lcd_print("Nueva Clave:");
 8000c6a:	485e      	ldr	r0, [pc, #376]	@ (8000de4 <ConfirmNewPassword+0x18c>)
 8000c6c:	f000 fea5 	bl	80019ba <lcd_print>

    memset(inputBuffer, 0, sizeof(inputBuffer));
 8000c70:	2205      	movs	r2, #5
 8000c72:	2100      	movs	r1, #0
 8000c74:	485c      	ldr	r0, [pc, #368]	@ (8000de8 <ConfirmNewPassword+0x190>)
 8000c76:	f003 fea9 	bl	80049cc <memset>
    inputIndex = 0;
 8000c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8000dec <ConfirmNewPassword+0x194>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
    uint32_t startTime = HAL_GetTick();  // Tiempo de inicio para evitar bucles infinitos
 8000c80:	f001 f8d8 	bl	8001e34 <HAL_GetTick>
 8000c84:	60f8      	str	r0, [r7, #12]

    while (HAL_GetTick() - startTime < 20000) {  // Tiempo límite de 20 segundos
 8000c86:	e08a      	b.n	8000d9e <ConfirmNewPassword+0x146>
        char key = keypad_get_key();
 8000c88:	f001 f866 	bl	8001d58 <keypad_get_key>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	72fb      	strb	r3, [r7, #11]

        if (key >= '0' && key <= '9' && inputIndex < 4) {
 8000c90:	7afb      	ldrb	r3, [r7, #11]
 8000c92:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c94:	d91c      	bls.n	8000cd0 <ConfirmNewPassword+0x78>
 8000c96:	7afb      	ldrb	r3, [r7, #11]
 8000c98:	2b39      	cmp	r3, #57	@ 0x39
 8000c9a:	d819      	bhi.n	8000cd0 <ConfirmNewPassword+0x78>
 8000c9c:	4b53      	ldr	r3, [pc, #332]	@ (8000dec <ConfirmNewPassword+0x194>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d815      	bhi.n	8000cd0 <ConfirmNewPassword+0x78>
            inputBuffer[inputIndex++] = key;
 8000ca4:	4b51      	ldr	r3, [pc, #324]	@ (8000dec <ConfirmNewPassword+0x194>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	b2d1      	uxtb	r1, r2
 8000cac:	4a4f      	ldr	r2, [pc, #316]	@ (8000dec <ConfirmNewPassword+0x194>)
 8000cae:	7011      	strb	r1, [r2, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4a4d      	ldr	r2, [pc, #308]	@ (8000de8 <ConfirmNewPassword+0x190>)
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	5453      	strb	r3, [r2, r1]
            lcd_set_cursor(1, inputIndex - 1);
 8000cb8:	4b4c      	ldr	r3, [pc, #304]	@ (8000dec <ConfirmNewPassword+0x194>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 fe5f 	bl	8001986 <lcd_set_cursor>
            lcd_print("*");
 8000cc8:	4849      	ldr	r0, [pc, #292]	@ (8000df0 <ConfirmNewPassword+0x198>)
 8000cca:	f000 fe76 	bl	80019ba <lcd_print>
 8000cce:	e066      	b.n	8000d9e <ConfirmNewPassword+0x146>
        } else if (key == '#') {
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	2b23      	cmp	r3, #35	@ 0x23
 8000cd4:	d163      	bne.n	8000d9e <ConfirmNewPassword+0x146>
            if (inputIndex == 4) {  // Validar que la clave tenga 4 dígitos
 8000cd6:	4b45      	ldr	r3, [pc, #276]	@ (8000dec <ConfirmNewPassword+0x194>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d148      	bne.n	8000d70 <ConfirmNewPassword+0x118>
                inputBuffer[inputIndex] = '\0';
 8000cde:	4b43      	ldr	r3, [pc, #268]	@ (8000dec <ConfirmNewPassword+0x194>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b40      	ldr	r3, [pc, #256]	@ (8000de8 <ConfirmNewPassword+0x190>)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	5499      	strb	r1, [r3, r2]
                strcpy(newPassword, inputBuffer);
 8000cea:	493f      	ldr	r1, [pc, #252]	@ (8000de8 <ConfirmNewPassword+0x190>)
 8000cec:	4841      	ldr	r0, [pc, #260]	@ (8000df4 <ConfirmNewPassword+0x19c>)
 8000cee:	f003 fea1 	bl	8004a34 <strcpy>

                lcd_clear();
 8000cf2:	f000 fe3e 	bl	8001972 <lcd_clear>
                lcd_set_cursor(0, 0);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 fe44 	bl	8001986 <lcd_set_cursor>
                lcd_print("Confirmar: ");
 8000cfe:	483e      	ldr	r0, [pc, #248]	@ (8000df8 <ConfirmNewPassword+0x1a0>)
 8000d00:	f000 fe5b 	bl	80019ba <lcd_print>
                lcd_set_cursor(1, 0);
 8000d04:	2100      	movs	r1, #0
 8000d06:	2001      	movs	r0, #1
 8000d08:	f000 fe3d 	bl	8001986 <lcd_set_cursor>
                lcd_print("*.Si   #.No");
 8000d0c:	483b      	ldr	r0, [pc, #236]	@ (8000dfc <ConfirmNewPassword+0x1a4>)
 8000d0e:	f000 fe54 	bl	80019ba <lcd_print>

                uint32_t confirmStart = HAL_GetTick();
 8000d12:	f001 f88f 	bl	8001e34 <HAL_GetTick>
 8000d16:	6078      	str	r0, [r7, #4]
                while (HAL_GetTick() - confirmStart < 10000) {  // Espera 10 segundos para confirmar
 8000d18:	e020      	b.n	8000d5c <ConfirmNewPassword+0x104>
                    char confirmKey = keypad_get_key();
 8000d1a:	f001 f81d 	bl	8001d58 <keypad_get_key>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	70fb      	strb	r3, [r7, #3]
                    if (confirmKey == '*') {
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d26:	d113      	bne.n	8000d50 <ConfirmNewPassword+0xf8>
                        strcpy(currentPassword, newPassword);
 8000d28:	4932      	ldr	r1, [pc, #200]	@ (8000df4 <ConfirmNewPassword+0x19c>)
 8000d2a:	4835      	ldr	r0, [pc, #212]	@ (8000e00 <ConfirmNewPassword+0x1a8>)
 8000d2c:	f003 fe82 	bl	8004a34 <strcpy>
                        lcd_clear();
 8000d30:	f000 fe1f 	bl	8001972 <lcd_clear>
                        lcd_set_cursor(0, 0);
 8000d34:	2100      	movs	r1, #0
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 fe25 	bl	8001986 <lcd_set_cursor>
                        lcd_print("Clave Actualizada");
 8000d3c:	4831      	ldr	r0, [pc, #196]	@ (8000e04 <ConfirmNewPassword+0x1ac>)
 8000d3e:	f000 fe3c 	bl	80019ba <lcd_print>
                        HAL_Delay(2000);
 8000d42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d46:	f001 f881 	bl	8001e4c <HAL_Delay>
                        DisplayMainMenu();
 8000d4a:	f7ff fc83 	bl	8000654 <DisplayMainMenu>
                        return;
 8000d4e:	e046      	b.n	8000dde <ConfirmNewPassword+0x186>
                    } else if (confirmKey == '#') {
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	2b23      	cmp	r3, #35	@ 0x23
 8000d54:	d102      	bne.n	8000d5c <ConfirmNewPassword+0x104>
                        ConfirmNewPassword();  // Volver a solicitar la clave
 8000d56:	f7ff ff7f 	bl	8000c58 <ConfirmNewPassword>
                        return;
 8000d5a:	e040      	b.n	8000dde <ConfirmNewPassword+0x186>
                while (HAL_GetTick() - confirmStart < 10000) {  // Espera 10 segundos para confirmar
 8000d5c:	f001 f86a 	bl	8001e34 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d9d5      	bls.n	8000d1a <ConfirmNewPassword+0xc2>
 8000d6e:	e016      	b.n	8000d9e <ConfirmNewPassword+0x146>
                    }
                }
            } else {
                lcd_clear();
 8000d70:	f000 fdff 	bl	8001972 <lcd_clear>
                lcd_set_cursor(0, 0);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 fe05 	bl	8001986 <lcd_set_cursor>
                lcd_print("Debe ser 4 ");
 8000d7c:	4822      	ldr	r0, [pc, #136]	@ (8000e08 <ConfirmNewPassword+0x1b0>)
 8000d7e:	f000 fe1c 	bl	80019ba <lcd_print>
                lcd_set_cursor(1, 0);
 8000d82:	2100      	movs	r1, #0
 8000d84:	2001      	movs	r0, #1
 8000d86:	f000 fdfe 	bl	8001986 <lcd_set_cursor>
                lcd_print("digitos ");
 8000d8a:	4820      	ldr	r0, [pc, #128]	@ (8000e0c <ConfirmNewPassword+0x1b4>)
 8000d8c:	f000 fe15 	bl	80019ba <lcd_print>
                HAL_Delay(2000);
 8000d90:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d94:	f001 f85a 	bl	8001e4c <HAL_Delay>
                ConfirmNewPassword();  // Reiniciar el proceso
 8000d98:	f7ff ff5e 	bl	8000c58 <ConfirmNewPassword>
                return;
 8000d9c:	e01f      	b.n	8000dde <ConfirmNewPassword+0x186>
    while (HAL_GetTick() - startTime < 20000) {  // Tiempo límite de 20 segundos
 8000d9e:	f001 f849 	bl	8001e34 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000dac:	4293      	cmp	r3, r2
 8000dae:	f67f af6b 	bls.w	8000c88 <ConfirmNewPassword+0x30>
            }
        }
    }

    // Si el usuario no ingresa nada en 20 segundos, volver al menú principal
    lcd_clear();
 8000db2:	f000 fdde 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000db6:	2100      	movs	r1, #0
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 fde4 	bl	8001986 <lcd_set_cursor>
    lcd_print("Tiempo ");
 8000dbe:	4814      	ldr	r0, [pc, #80]	@ (8000e10 <ConfirmNewPassword+0x1b8>)
 8000dc0:	f000 fdfb 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 fddd 	bl	8001986 <lcd_set_cursor>
    lcd_print("Excedido ");
 8000dcc:	4811      	ldr	r0, [pc, #68]	@ (8000e14 <ConfirmNewPassword+0x1bc>)
 8000dce:	f000 fdf4 	bl	80019ba <lcd_print>
    HAL_Delay(2000);
 8000dd2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dd6:	f001 f839 	bl	8001e4c <HAL_Delay>
    DisplayMainMenu();
 8000dda:	f7ff fc3b 	bl	8000654 <DisplayMainMenu>
}
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	080054ac 	.word	0x080054ac
 8000de8:	200000a8 	.word	0x200000a8
 8000dec:	200000ad 	.word	0x200000ad
 8000df0:	08005380 	.word	0x08005380
 8000df4:	200000a0 	.word	0x200000a0
 8000df8:	080054bc 	.word	0x080054bc
 8000dfc:	080054c8 	.word	0x080054c8
 8000e00:	20000000 	.word	0x20000000
 8000e04:	080054d4 	.word	0x080054d4
 8000e08:	080054e8 	.word	0x080054e8
 8000e0c:	080054f4 	.word	0x080054f4
 8000e10:	08005500 	.word	0x08005500
 8000e14:	08005508 	.word	0x08005508

08000e18 <HandleSubMenu>:

// Submenú "Más"
void HandleSubMenu() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
    lcd_clear();
 8000e1e:	f000 fda8 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000e22:	2100      	movs	r1, #0
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 fdae 	bl	8001986 <lcd_set_cursor>
    lcd_print("#.Volver ");
 8000e2a:	480f      	ldr	r0, [pc, #60]	@ (8000e68 <HandleSubMenu+0x50>)
 8000e2c:	f000 fdc5 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 fda7 	bl	8001986 <lcd_set_cursor>
    lcd_print("3.Prueba");
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <HandleSubMenu+0x54>)
 8000e3a:	f000 fdbe 	bl	80019ba <lcd_print>

    while (1) {
        char key = keypad_get_key();
 8000e3e:	f000 ff8b 	bl	8001d58 <keypad_get_key>
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]

        if (key != '\0') {
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f8      	beq.n	8000e3e <HandleSubMenu+0x26>
            if (key == '#') {
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b23      	cmp	r3, #35	@ 0x23
 8000e50:	d102      	bne.n	8000e58 <HandleSubMenu+0x40>
                DisplayMainMenu();
 8000e52:	f7ff fbff 	bl	8000654 <DisplayMainMenu>
                return;
 8000e56:	e004      	b.n	8000e62 <HandleSubMenu+0x4a>
            } else if (key == '3') {
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b33      	cmp	r3, #51	@ 0x33
 8000e5c:	d1ef      	bne.n	8000e3e <HandleSubMenu+0x26>
                TestAlarm();
 8000e5e:	f000 f807 	bl	8000e70 <TestAlarm>
                return;
            }
        }
    }
}
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	08005514 	.word	0x08005514
 8000e6c:	08005520 	.word	0x08005520

08000e70 <TestAlarm>:

// Prueba de alarma
void TestAlarm() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    lcd_clear();
 8000e74:	f000 fd7d 	bl	8001972 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 fd83 	bl	8001986 <lcd_set_cursor>
    lcd_print("Prueba de");
 8000e80:	4810      	ldr	r0, [pc, #64]	@ (8000ec4 <TestAlarm+0x54>)
 8000e82:	f000 fd9a 	bl	80019ba <lcd_print>
    lcd_set_cursor(1, 0);
 8000e86:	2100      	movs	r1, #0
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 fd7c 	bl	8001986 <lcd_set_cursor>
    lcd_print("Alarma...");
 8000e8e:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <TestAlarm+0x58>)
 8000e90:	f000 fd93 	bl	80019ba <lcd_print>

    // Activar el buzzer en PA13
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e9a:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <TestAlarm+0x5c>)
 8000e9c:	f001 fb4a 	bl	8002534 <HAL_GPIO_WritePin>
    HAL_Delay(5000);  // Mantener el buzzer encendido 5 segundos
 8000ea0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ea4:	f000 ffd2 	bl	8001e4c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);  // Apagar buzzer
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eae:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <TestAlarm+0x5c>)
 8000eb0:	f001 fb40 	bl	8002534 <HAL_GPIO_WritePin>

    HAL_Delay(1000);  // Pequeña pausa antes de volver al menú
 8000eb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eb8:	f000 ffc8 	bl	8001e4c <HAL_Delay>
    DisplayMainMenu();
 8000ebc:	f7ff fbca 	bl	8000654 <DisplayMainMenu>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	0800552c 	.word	0x0800552c
 8000ec8:	08005538 	.word	0x08005538
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <CheckSensors>:


void CheckSensors() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
    if (alarmActivated) {
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <CheckSensors+0x80>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d033      	beq.n	8000f46 <CheckSensors+0x76>
        // Verificar si se abre una puerta o ventana (sensor magnético)
        bool doorOpened = (HAL_GPIO_ReadPin(GPIOA, Sensor_Magnetico_1_Pin) == GPIO_PIN_RESET);
 8000ede:	2180      	movs	r1, #128	@ 0x80
 8000ee0:	481c      	ldr	r0, [pc, #112]	@ (8000f54 <CheckSensors+0x84>)
 8000ee2:	f001 fb0f 	bl	8002504 <HAL_GPIO_ReadPin>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf0c      	ite	eq
 8000eec:	2301      	moveq	r3, #1
 8000eee:	2300      	movne	r3, #0
 8000ef0:	71bb      	strb	r3, [r7, #6]
        bool motionDetected = false;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	71fb      	strb	r3, [r7, #7]

        // Solo verificar el sensor PIR si está activado en "Sist Completo"
        if (includeMotionSensor) {
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <CheckSensors+0x88>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d017      	beq.n	8000f2e <CheckSensors+0x5e>
            motionDetected = HAL_GPIO_ReadPin(GPIOA, Sensor_PIR_Pin);
 8000efe:	2140      	movs	r1, #64	@ 0x40
 8000f00:	4814      	ldr	r0, [pc, #80]	@ (8000f54 <CheckSensors+0x84>)
 8000f02:	f001 faff 	bl	8002504 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf14      	ite	ne
 8000f0c:	2301      	movne	r3, #1
 8000f0e:	2300      	moveq	r3, #0
 8000f10:	71fb      	strb	r3, [r7, #7]

            // Filtro por software para evitar falsas detecciones
            HAL_Delay(50);
 8000f12:	2032      	movs	r0, #50	@ 0x32
 8000f14:	f000 ff9a 	bl	8001e4c <HAL_Delay>
            if (HAL_GPIO_ReadPin(GPIOA, Sensor_PIR_Pin) != motionDetected) {
 8000f18:	2140      	movs	r1, #64	@ 0x40
 8000f1a:	480e      	ldr	r0, [pc, #56]	@ (8000f54 <CheckSensors+0x84>)
 8000f1c:	f001 faf2 	bl	8002504 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d001      	beq.n	8000f2e <CheckSensors+0x5e>
                motionDetected = false; // Ignorar si el estado cambió muy rápido
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	71fb      	strb	r3, [r7, #7]
            }
        }

        // Evaluar si se debe activar la alarma
        if (doorOpened || (includeMotionSensor && motionDetected)) {
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d106      	bne.n	8000f42 <CheckSensors+0x72>
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <CheckSensors+0x88>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <CheckSensors+0x76>
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <CheckSensors+0x76>
            AlarmTriggered();
 8000f42:	f7ff fddb 	bl	8000afc <AlarmTriggered>
        }
    }
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200000ae 	.word	0x200000ae
 8000f54:	40020000 	.word	0x40020000
 8000f58:	200000a6 	.word	0x200000a6

08000f5c <BT_SendMessage>:

//Enviar datos al HC-05
void BT_SendMessage(char *message) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff f965 	bl	8000234 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <BT_SendMessage+0x28>)
 8000f76:	f002 fcbb 	bl	80038f0 <HAL_UART_Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000bc 	.word	0x200000bc

08000f88 <BT_Test>:
    HAL_UART_Receive(&huart2, (uint8_t *)&receivedChar, 1, HAL_MAX_DELAY);
    return receivedChar;
}

//Para probar si el STM32 está enviando datos correctamente al módulo Bluetooth HC-05
void BT_Test() {
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
    char message[] = "✅ HC-05 conectado con STM32\r\n";
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <BT_Test+0x38>)
 8000f90:	463c      	mov	r4, r7
 8000f92:	461d      	mov	r5, r3
 8000f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff f946 	bl	8000234 <strlen>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4639      	mov	r1, r7
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <BT_Test+0x3c>)
 8000fb4:	f002 fc9c 	bl	80038f0 <HAL_UART_Transmit>
}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc0:	08005544 	.word	0x08005544
 8000fc4:	200000bc 	.word	0x200000bc

08000fc8 <CheckAlarmDeactivation>:


void CheckAlarmDeactivation(char key) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
    static bool countdownStarted = false;  // Variable local para evitar reiniciar el temporizador

    if (!countdownStarted) {
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <CheckAlarmDeactivation+0x50>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	f083 0301 	eor.w	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d007      	beq.n	8000ff0 <CheckAlarmDeactivation+0x28>
        countdownStarted = true;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <CheckAlarmDeactivation+0x50>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
        startTime = HAL_GetTick();  //  Iniciar temporizador solo cuando se intenta desactivar la alarma
 8000fe6:	f000 ff25 	bl	8001e34 <HAL_GetTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <CheckAlarmDeactivation+0x54>)
 8000fee:	6013      	str	r3, [r2, #0]
    }

    RequestPassword(DeactivateAlarm, IncorrectPassword);
 8000ff0:	490b      	ldr	r1, [pc, #44]	@ (8001020 <CheckAlarmDeactivation+0x58>)
 8000ff2:	480c      	ldr	r0, [pc, #48]	@ (8001024 <CheckAlarmDeactivation+0x5c>)
 8000ff4:	f7ff fbca 	bl	800078c <RequestPassword>

    // Si pasan 31 segundos sin ingresar la clave correcta, activar la alarma
    if (HAL_GetTick() - startTime >= 31000) {
 8000ff8:	f000 ff1c 	bl	8001e34 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <CheckAlarmDeactivation+0x54>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	f647 1217 	movw	r2, #30999	@ 0x7917
 8001008:	4293      	cmp	r3, r2
 800100a:	d901      	bls.n	8001010 <CheckAlarmDeactivation+0x48>
        AlarmTriggered();
 800100c:	f7ff fd76 	bl	8000afc <AlarmTriggered>
    }
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000b4 	.word	0x200000b4
 800101c:	200000b0 	.word	0x200000b0
 8001020:	08000a75 	.word	0x08000a75
 8001024:	08000a15 	.word	0x08000a15

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <Error_Handler+0x8>

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	4a0f      	ldr	r2, [pc, #60]	@ (8001080 <HAL_MspInit+0x4c>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001048:	6453      	str	r3, [r2, #68]	@ 0x44
 800104a:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <HAL_MspInit+0x4c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	@ 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a19      	ldr	r2, [pc, #100]	@ (8001108 <HAL_I2C_MspInit+0x84>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12b      	bne.n	80010fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_I2C_MspInit+0x88>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a17      	ldr	r2, [pc, #92]	@ (800110c <HAL_I2C_MspInit+0x88>)
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_I2C_MspInit+0x88>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010c2:	2303      	movs	r3, #3
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c6:	2312      	movs	r3, #18
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010d2:	2304      	movs	r3, #4
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <HAL_I2C_MspInit+0x8c>)
 80010de:	f001 f87d 	bl	80021dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <HAL_I2C_MspInit+0x88>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	4a08      	ldr	r2, [pc, #32]	@ (800110c <HAL_I2C_MspInit+0x88>)
 80010ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_I2C_MspInit+0x88>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40005800 	.word	0x40005800
 800110c:	40023800 	.word	0x40023800
 8001110:	40021400 	.word	0x40021400

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a1d      	ldr	r2, [pc, #116]	@ (80011a8 <HAL_UART_MspInit+0x94>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d133      	bne.n	800119e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <HAL_UART_MspInit+0x98>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a1b      	ldr	r2, [pc, #108]	@ (80011ac <HAL_UART_MspInit+0x98>)
 8001140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <HAL_UART_MspInit+0x98>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_UART_MspInit+0x98>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <HAL_UART_MspInit+0x98>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_UART_MspInit+0x98>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800116e:	2360      	movs	r3, #96	@ 0x60
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117e:	2307      	movs	r3, #7
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4809      	ldr	r0, [pc, #36]	@ (80011b0 <HAL_UART_MspInit+0x9c>)
 800118a:	f001 f827 	bl	80021dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2026      	movs	r0, #38	@ 0x26
 8001194:	f000 ff59 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001198:	2026      	movs	r0, #38	@ 0x26
 800119a:	f000 ff72 	bl	8002082 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	@ 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40004400 	.word	0x40004400
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <NMI_Handler+0x4>

080011bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <MemManage_Handler+0x4>

080011cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <UsageFault_Handler+0x4>

080011dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120a:	f000 fdff 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}

08001212 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 8001216:	2004      	movs	r0, #4
 8001218:	f001 f9c0 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C2_Pin);
 8001224:	2010      	movs	r0, #16
 8001226:	f001 f9b9 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}

0800122e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C3_Pin);
 8001232:	2020      	movs	r0, #32
 8001234:	f001 f9b2 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_PIR_Pin);
 8001238:	2040      	movs	r0, #64	@ 0x40
 800123a:	f001 f9af 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_1_Pin);
 800123e:	2080      	movs	r0, #128	@ 0x80
 8001240:	f001 f9ac 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800124c:	4802      	ldr	r0, [pc, #8]	@ (8001258 <USART2_IRQHandler+0x10>)
 800124e:	f002 fc71 	bl	8003b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200000bc 	.word	0x200000bc

0800125c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001260:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001264:	f001 f99a 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_2_Pin);
 8001268:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800126c:	f001 f996 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_3_Pin);
 8001270:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001274:	f001 f992 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	@ (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ac:	f003 fb96 	bl	80049dc <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	220c      	movs	r2, #12
 80012b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20050000 	.word	0x20050000
 80012dc:	00000400 	.word	0x00000400
 80012e0:	200000b8 	.word	0x200000b8
 80012e4:	200002e0 	.word	0x200002e0

080012e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	@ (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001344 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001310:	f7ff ffea 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001316:	490d      	ldr	r1, [pc, #52]	@ (800134c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800132c:	4c0a      	ldr	r4, [pc, #40]	@ (8001358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800133a:	f003 fb55 	bl	80049e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff f94f 	bl	80005e0 <main>
  bx  lr    
 8001342:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001344:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001350:	080055c0 	.word	0x080055c0
  ldr r2, =_sbss
 8001354:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001358:	200002dc 	.word	0x200002dc

0800135c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC_IRQHandler>
	...

08001360 <MX_USART2_UART_Init>:
 * @brief Inicializacion USART2 (Asincrona)
 * @param void
 * @retval void
*/
void MX_USART2_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */
  huart2.Instance = USART2;
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <MX_USART2_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 800136c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001398:	f002 fa5a 	bl	8003850 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f7ff fe41 	bl	8001028 <Error_Handler>
  }
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000bc 	.word	0x200000bc
 80013b0:	40004400 	.word	0x40004400

080013b4 <HAL_UART_TxCpltCallback>:
 * @brief Cuando se completa la transmision se puede realizar una tarea determinada
 * @param modulo UART
 * @retval void
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
		/*USER CODE BEGIN TxCpltCallback*/

		/*USER CODE END TxCpltCallback*/
	}
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <readKey>:
bool_t buttonRead;
delay_t debounceDelay;
//bool buttonRead = true;

/*Define functions -----------------------------------------------------------*/
bool_t readKey(void){																// Devuelve true si la tecla fue presionada
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
	bool_t keyPress = false;
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]
	flanco_descendente = false;														// Re- inicializacion de la variable
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <readKey+0x30>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
	if(keyPressed){
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <readKey+0x34>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <readKey+0x22>
		keyPress = true;
 80013e0:	2301      	movs	r3, #1
 80013e2:	71fb      	strb	r3, [r7, #7]
		keyPressed = false; 														// Limpio estado de la variable para evitar lecturas repetidas
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <readKey+0x34>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
	}
	return keyPress;																// Retorna True solo una vez por evento de flanco
 80013ea:	79fb      	ldrb	r3, [r7, #7]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	20000106 	.word	0x20000106
 80013fc:	20000105 	.word	0x20000105

08001400 <debounceFSM_init>:

void debounceFSM_init(void)															// debe cargar el estado inicial
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	actualState = BUTTON_UP;
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <debounceFSM_init+0x24>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceDelay, DEBOUNCE_DELAY);
 800140a:	2128      	movs	r1, #40	@ 0x28
 800140c:	4806      	ldr	r0, [pc, #24]	@ (8001428 <debounceFSM_init+0x28>)
 800140e:	f000 f87f 	bl	8001510 <delayInit>

	//Actualizar salida del estado inicial Leds off
	writeLedOff_GPIO(LD1_Pin|LD3_Pin|LD2_Pin);										// Inicializacion de todos los leds apagados
 8001412:	f244 0081 	movw	r0, #16513	@ 0x4081
 8001416:	f000 f8b9 	bl	800158c <writeLedOff_GPIO>
	buttonRead = true; 																// Boton de usuario no activado
 800141a:	4b04      	ldr	r3, [pc, #16]	@ (800142c <debounceFSM_init+0x2c>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000104 	.word	0x20000104
 8001428:	20000108 	.word	0x20000108
 800142c:	20000107 	.word	0x20000107

08001430 <debounceFSM_update>:

void debounceFSM_update(bool buttonRead){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	switch (actualState){
 800143a:	4b31      	ldr	r3, [pc, #196]	@ (8001500 <debounceFSM_update+0xd0>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d84f      	bhi.n	80014e2 <debounceFSM_update+0xb2>
 8001442:	a201      	add	r2, pc, #4	@ (adr r2, 8001448 <debounceFSM_update+0x18>)
 8001444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001448:	08001459 	.word	0x08001459
 800144c:	0800146d 	.word	0x0800146d
 8001450:	0800149b 	.word	0x0800149b
 8001454:	080014b5 	.word	0x080014b5
	case BUTTON_UP: 																// Estado inicial 0 | Actualizar salida del estado LEDs off
		if(buttonRead == true){ 													// Chequear condicion de transición | se presionó el boton?
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d044      	beq.n	80014e8 <debounceFSM_update+0xb8>
			actualState = BUTTON_FALLING; 											// Pasa al estado siguiente
 800145e:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <debounceFSM_update+0xd0>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
			delayRead(&debounceDelay);   											// Arranca cuenta de DEBOUNCE_DELAY
 8001464:	4827      	ldr	r0, [pc, #156]	@ (8001504 <debounceFSM_update+0xd4>)
 8001466:	f000 f867 	bl	8001538 <delayRead>
		}
	break;
 800146a:	e03d      	b.n	80014e8 <debounceFSM_update+0xb8>

	case BUTTON_FALLING:
		//Chequea si paso el tiempo de 40 ms
		if(delayRead(&debounceDelay)){
 800146c:	4825      	ldr	r0, [pc, #148]	@ (8001504 <debounceFSM_update+0xd4>)
 800146e:	f000 f863 	bl	8001538 <delayRead>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d039      	beq.n	80014ec <debounceFSM_update+0xbc>
			//Chequear condicion de transición
			if(buttonRead == true){													// Se presionó boton de usuario
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <debounceFSM_update+0x62>
				keyPressed = true; 													// Indica tecla presionada luego de 2 lecturas en 40 ms
 800147e:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <debounceFSM_update+0xd8>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
				flanco_descendente = true; 												// Asume que en este estado hubo un flanco decendente
 8001484:	4b21      	ldr	r3, [pc, #132]	@ (800150c <debounceFSM_update+0xdc>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
				actualState = BUTTON_DOWN; 											// Pasa al estado siguiente
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <debounceFSM_update+0xd0>)
 800148c:	2202      	movs	r2, #2
 800148e:	701a      	strb	r2, [r3, #0]
			}
			else{
				actualState = BUTTON_UP; 											// Regresa al estado anterior
			}
		}
	break;
 8001490:	e02c      	b.n	80014ec <debounceFSM_update+0xbc>
				actualState = BUTTON_UP; 											// Regresa al estado anterior
 8001492:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <debounceFSM_update+0xd0>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
	break;
 8001498:	e028      	b.n	80014ec <debounceFSM_update+0xbc>

	case BUTTON_DOWN:
		//Chequear condicion de transición
		if(buttonRead == false){ 													// Se presionó el boton?
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f083 0301 	eor.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d024      	beq.n	80014f0 <debounceFSM_update+0xc0>
			actualState = BUTTON_RISING; 											// Pasa al estado siguiente Deteccion de flanco ascendente
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <debounceFSM_update+0xd0>)
 80014a8:	2203      	movs	r2, #3
 80014aa:	701a      	strb	r2, [r3, #0]
			delayRead(&debounceDelay);   											// Arranca cuenta de DEBOUNCE_DELAY = 40ms
 80014ac:	4815      	ldr	r0, [pc, #84]	@ (8001504 <debounceFSM_update+0xd4>)
 80014ae:	f000 f843 	bl	8001538 <delayRead>
		}
	break;
 80014b2:	e01d      	b.n	80014f0 <debounceFSM_update+0xc0>

	case BUTTON_RISING:
		//Chequea si paso el tiempo de 40 ms
		if(delayRead(&debounceDelay)){
 80014b4:	4813      	ldr	r0, [pc, #76]	@ (8001504 <debounceFSM_update+0xd4>)
 80014b6:	f000 f83f 	bl	8001538 <delayRead>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d019      	beq.n	80014f4 <debounceFSM_update+0xc4>
			//Chequear condicion de transición
			if(buttonRead == false){												// El boton de usuario regresó a estado inactivo
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f083 0301 	eor.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <debounceFSM_update+0xaa>
				keyPressed = false; 												// Indica tecla presionada luego de 2 lecturas en 40 ms
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <debounceFSM_update+0xd8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
				actualState = BUTTON_UP; 											// Pasa al estado siguiente, el inicial
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <debounceFSM_update+0xd0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
			}
			else{
				actualState = BUTTON_DOWN; 											// Regresa al estado anterior
			}
		}
	break;
 80014d8:	e00c      	b.n	80014f4 <debounceFSM_update+0xc4>
				actualState = BUTTON_DOWN; 											// Regresa al estado anterior
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <debounceFSM_update+0xd0>)
 80014dc:	2202      	movs	r2, #2
 80014de:	701a      	strb	r2, [r3, #0]
	break;
 80014e0:	e008      	b.n	80014f4 <debounceFSM_update+0xc4>

	default:
		Error_Handler();
 80014e2:	f7ff fda1 	bl	8001028 <Error_Handler>
	break;
 80014e6:	e006      	b.n	80014f6 <debounceFSM_update+0xc6>
	break;
 80014e8:	bf00      	nop
 80014ea:	e004      	b.n	80014f6 <debounceFSM_update+0xc6>
	break;
 80014ec:	bf00      	nop
 80014ee:	e002      	b.n	80014f6 <debounceFSM_update+0xc6>
	break;
 80014f0:	bf00      	nop
 80014f2:	e000      	b.n	80014f6 <debounceFSM_update+0xc6>
	break;
 80014f4:	bf00      	nop
	}
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000104 	.word	0x20000104
 8001504:	20000108 	.word	0x20000108
 8001508:	20000105 	.word	0x20000105
 800150c:	20000106 	.word	0x20000106

08001510 <delayInit>:
 */

#include "main.h"
#include "API_Delay.h"

void delayInit(delay_t *delay, tick_t duration){
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	delay->startTime=HAL_GetTick();
 800151a:	f000 fc8b 	bl	8001e34 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	601a      	str	r2, [r3, #0]
	delay->duration=duration;				//valor que tomara al definir el tiempo de espera
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	605a      	str	r2, [r3, #4]
	delay->running=false;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	721a      	strb	r2, [r3, #8]
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <delayRead>:
bool_t delayRead(delay_t *delay){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	if(delay->running==false){
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7a1b      	ldrb	r3, [r3, #8]
 8001544:	f083 0301 	eor.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d009      	beq.n	8001562 <delayRead+0x2a>
		delay->startTime=HAL_GetTick();
 800154e:	f000 fc71 	bl	8001e34 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]
		delay->running=true;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	721a      	strb	r2, [r3, #8]
		return false;
 800155e:	2300      	movs	r3, #0
 8001560:	e00f      	b.n	8001582 <delayRead+0x4a>
	}
	if((HAL_GetTick()-delay->startTime)>=delay->duration){
 8001562:	f000 fc67 	bl	8001e34 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	1ad2      	subs	r2, r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d304      	bcc.n	8001580 <delayRead+0x48>
		delay->running=false;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	721a      	strb	r2, [r3, #8]
		return true;
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <delayRead+0x4a>
	}
	return false;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <writeLedOff_GPIO>:
 * @brief Apagar LED GPIO
 * @param led_t LDx
 * @retval ninguno
 */

void writeLedOff_GPIO(led_t LDx){
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_RESET);
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	4803      	ldr	r0, [pc, #12]	@ (80015ac <writeLedOff_GPIO+0x20>)
 800159e:	f000 ffc9 	bl	8002534 <HAL_GPIO_WritePin>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40020400 	.word	0x40020400

080015b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b094      	sub	sp, #80	@ 0x50
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	2234      	movs	r2, #52	@ 0x34
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fa04 	bl	80049cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	4b29      	ldr	r3, [pc, #164]	@ (8001680 <SystemClock_Config+0xd0>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	4a28      	ldr	r2, [pc, #160]	@ (8001680 <SystemClock_Config+0xd0>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e4:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <SystemClock_Config+0xd0>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	2300      	movs	r3, #0
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <SystemClock_Config+0xd4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a22      	ldr	r2, [pc, #136]	@ (8001684 <SystemClock_Config+0xd4>)
 80015fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <SystemClock_Config+0xd4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800160c:	2301      	movs	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001610:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001614:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001616:	2302      	movs	r3, #2
 8001618:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800161e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001620:	2308      	movs	r3, #8
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001624:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001628:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800162a:	2304      	movs	r3, #4
 800162c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800162e:	2308      	movs	r3, #8
 8001630:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001632:	2302      	movs	r3, #2
 8001634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fe84 	bl	8003348 <HAL_RCC_OscConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001646:	f7ff fcef 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164a:	230f      	movs	r3, #15
 800164c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164e:	2302      	movs	r3, #2
 8001650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	2103      	movs	r1, #3
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fc4e 	bl	8002f08 <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001672:	f7ff fcd9 	bl	8001028 <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	3750      	adds	r7, #80	@ 0x50
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	@ 0x38
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	4b96      	ldr	r3, [pc, #600]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a95      	ldr	r2, [pc, #596]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b93      	ldr	r3, [pc, #588]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	4b8f      	ldr	r3, [pc, #572]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a8e      	ldr	r2, [pc, #568]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b8c      	ldr	r3, [pc, #560]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	4b88      	ldr	r3, [pc, #544]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a87      	ldr	r2, [pc, #540]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016e0:	f043 0320 	orr.w	r3, r3, #32
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b85      	ldr	r3, [pc, #532]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0320 	and.w	r3, r3, #32
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	4b81      	ldr	r3, [pc, #516]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a80      	ldr	r2, [pc, #512]	@ (80018fc <MX_GPIO_Init+0x274>)
 80016fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b7e      	ldr	r3, [pc, #504]	@ (80018fc <MX_GPIO_Init+0x274>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b7a      	ldr	r3, [pc, #488]	@ (80018fc <MX_GPIO_Init+0x274>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a79      	ldr	r2, [pc, #484]	@ (80018fc <MX_GPIO_Init+0x274>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b77      	ldr	r3, [pc, #476]	@ (80018fc <MX_GPIO_Init+0x274>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b73      	ldr	r3, [pc, #460]	@ (80018fc <MX_GPIO_Init+0x274>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a72      	ldr	r2, [pc, #456]	@ (80018fc <MX_GPIO_Init+0x274>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b70      	ldr	r3, [pc, #448]	@ (80018fc <MX_GPIO_Init+0x274>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b6c      	ldr	r3, [pc, #432]	@ (80018fc <MX_GPIO_Init+0x274>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a6b      	ldr	r2, [pc, #428]	@ (80018fc <MX_GPIO_Init+0x274>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b69      	ldr	r3, [pc, #420]	@ (80018fc <MX_GPIO_Init+0x274>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b65      	ldr	r3, [pc, #404]	@ (80018fc <MX_GPIO_Init+0x274>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a64      	ldr	r2, [pc, #400]	@ (80018fc <MX_GPIO_Init+0x274>)
 800176c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b62      	ldr	r3, [pc, #392]	@ (80018fc <MX_GPIO_Init+0x274>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, R2_Pin|R1_Pin, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2148      	movs	r1, #72	@ 0x48
 8001782:	485f      	ldr	r0, [pc, #380]	@ (8001900 <MX_GPIO_Init+0x278>)
 8001784:	f000 fed6 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, R4_Pin|R3_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800178e:	485d      	ldr	r0, [pc, #372]	@ (8001904 <MX_GPIO_Init+0x27c>)
 8001790:	f000 fed0 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	2120      	movs	r1, #32
 8001798:	485b      	ldr	r0, [pc, #364]	@ (8001908 <MX_GPIO_Init+0x280>)
 800179a:	f000 fecb 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80017a4:	4859      	ldr	r0, [pc, #356]	@ (800190c <MX_GPIO_Init+0x284>)
 80017a6:	f000 fec5 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Encendido_GPIO_Port, Led_Encendido_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017b0:	4854      	ldr	r0, [pc, #336]	@ (8001904 <MX_GPIO_Init+0x27c>)
 80017b2:	f000 febf 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Alerta_Pin|Led_Estado_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 80017bc:	4850      	ldr	r0, [pc, #320]	@ (8001900 <MX_GPIO_Init+0x278>)
 80017be:	f000 feb9 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2140      	movs	r1, #64	@ 0x40
 80017c6:	4852      	ldr	r0, [pc, #328]	@ (8001910 <MX_GPIO_Init+0x288>)
 80017c8:	f000 feb4 	bl	8002534 <HAL_GPIO_WritePin>



  /*Configure GPIO pins : R2_Pin R1_Pin Led_Alerta_Pin Led_Estado_Pin */
  GPIO_InitStruct.Pin = Led_Alerta_Pin|Led_Estado_Pin;
 80017cc:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4846      	ldr	r0, [pc, #280]	@ (8001900 <MX_GPIO_Init+0x278>)
 80017e6:	f000 fcf9 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	4844      	ldr	r0, [pc, #272]	@ (8001914 <MX_GPIO_Init+0x28c>)
 8001802:	f000 fceb 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin Led_Encendido_Pin */
  GPIO_InitStruct.Pin = Led_Encendido_Pin;
 8001806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	4839      	ldr	r0, [pc, #228]	@ (8001904 <MX_GPIO_Init+0x27c>)
 8001820:	f000 fcdc 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Sirena_Pin */
  GPIO_InitStruct.Pin = Sirena_Pin;
 8001824:	2320      	movs	r3, #32
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800182c:	2302      	movs	r3, #2
 800182e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Sirena_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001838:	4619      	mov	r1, r3
 800183a:	4833      	ldr	r0, [pc, #204]	@ (8001908 <MX_GPIO_Init+0x280>)
 800183c:	f000 fcce 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_PIR_Pin Sensor_Magnetico_1_Pin */
  GPIO_InitStruct.Pin = Sensor_PIR_Pin|Sensor_Magnetico_1_Pin;
 8001840:	23c0      	movs	r3, #192	@ 0xc0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001844:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184a:	2301      	movs	r3, #1
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	482c      	ldr	r0, [pc, #176]	@ (8001908 <MX_GPIO_Init+0x280>)
 8001856:	f000 fcc1 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800185a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4826      	ldr	r0, [pc, #152]	@ (800190c <MX_GPIO_Init+0x284>)
 8001874:	f000 fcb2 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Magnetico_2_Pin */
  GPIO_InitStruct.Pin = Sensor_Magnetico_2_Pin;
 8001878:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001884:	2301      	movs	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Sensor_Magnetico_2_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188c:	4619      	mov	r1, r3
 800188e:	4822      	ldr	r0, [pc, #136]	@ (8001918 <MX_GPIO_Init+0x290>)
 8001890:	f000 fca4 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Magnetico_3_Pin */
  GPIO_InitStruct.Pin = Sensor_Magnetico_3_Pin;
 8001894:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800189a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Sensor_Magnetico_3_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a8:	4619      	mov	r1, r3
 80018aa:	481b      	ldr	r0, [pc, #108]	@ (8001918 <MX_GPIO_Init+0x290>)
 80018ac:	f000 fc96 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018b0:	2340      	movs	r3, #64	@ 0x40
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4812      	ldr	r0, [pc, #72]	@ (8001910 <MX_GPIO_Init+0x288>)
 80018c8:	f000 fc88 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018dc:	4619      	mov	r1, r3
 80018de:	480c      	ldr	r0, [pc, #48]	@ (8001910 <MX_GPIO_Init+0x288>)
 80018e0:	f000 fc7c 	bl	80021dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2028      	movs	r0, #40	@ 0x28
 80018ea:	f000 fbae 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018ee:	2028      	movs	r0, #40	@ 0x28
 80018f0:	f000 fbc7 	bl	8002082 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f4:	bf00      	nop
 80018f6:	3738      	adds	r7, #56	@ 0x38
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40021000 	.word	0x40021000
 8001904:	40021400 	.word	0x40021400
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400
 8001910:	40021800 	.word	0x40021800
 8001914:	40020800 	.word	0x40020800
 8001918:	40020c00 	.word	0x40020c00

0800191c <lcd_init>:
static void lcd_send_command(uint8_t cmd);
static void lcd_send_data(uint8_t data);
static void lcd_send(uint8_t value, uint8_t mode);
static void lcd_write_nibble(uint8_t nibble);

void lcd_init() {
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Tiempo de inicio según especificación HD44780
 8001920:	2032      	movs	r0, #50	@ 0x32
 8001922:	f000 fa93 	bl	8001e4c <HAL_Delay>
    lcd_send_command(0x30);
 8001926:	2030      	movs	r0, #48	@ 0x30
 8001928:	f000 f85c 	bl	80019e4 <lcd_send_command>
    HAL_Delay(5);
 800192c:	2005      	movs	r0, #5
 800192e:	f000 fa8d 	bl	8001e4c <HAL_Delay>
    lcd_send_command(0x30);
 8001932:	2030      	movs	r0, #48	@ 0x30
 8001934:	f000 f856 	bl	80019e4 <lcd_send_command>
    HAL_Delay(1);
 8001938:	2001      	movs	r0, #1
 800193a:	f000 fa87 	bl	8001e4c <HAL_Delay>
    lcd_send_command(0x30);
 800193e:	2030      	movs	r0, #48	@ 0x30
 8001940:	f000 f850 	bl	80019e4 <lcd_send_command>
    lcd_send_command(0x20); // Cambiar a modo 4 bits
 8001944:	2020      	movs	r0, #32
 8001946:	f000 f84d 	bl	80019e4 <lcd_send_command>

    lcd_send_command(0x28); // Configuración: LCD 2 líneas, matriz 5x8
 800194a:	2028      	movs	r0, #40	@ 0x28
 800194c:	f000 f84a 	bl	80019e4 <lcd_send_command>
    lcd_send_command(0x08); // Apagar display
 8001950:	2008      	movs	r0, #8
 8001952:	f000 f847 	bl	80019e4 <lcd_send_command>
    lcd_send_command(0x01); // Limpiar pantalla
 8001956:	2001      	movs	r0, #1
 8001958:	f000 f844 	bl	80019e4 <lcd_send_command>
    HAL_Delay(2);
 800195c:	2002      	movs	r0, #2
 800195e:	f000 fa75 	bl	8001e4c <HAL_Delay>
    lcd_send_command(0x06); // Configurar modo de entrada
 8001962:	2006      	movs	r0, #6
 8001964:	f000 f83e 	bl	80019e4 <lcd_send_command>
    lcd_send_command(0x0C); // Encender display, cursor apagado
 8001968:	200c      	movs	r0, #12
 800196a:	f000 f83b 	bl	80019e4 <lcd_send_command>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}

08001972 <lcd_clear>:

void lcd_clear() {
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
    lcd_send_command(0x01); // Limpiar pantalla
 8001976:	2001      	movs	r0, #1
 8001978:	f000 f834 	bl	80019e4 <lcd_send_command>
    HAL_Delay(2);
 800197c:	2002      	movs	r0, #2
 800197e:	f000 fa65 	bl	8001e4c <HAL_Delay>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}

08001986 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col) {
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	460a      	mov	r2, r1
 8001990:	71fb      	strb	r3, [r7, #7]
 8001992:	4613      	mov	r3, r2
 8001994:	71bb      	strb	r3, [r7, #6]
    uint8_t addresses[] = {0x80, 0xC0}; // Dirección DDRAM para la primera y segunda línea
 8001996:	f24c 0380 	movw	r3, #49280	@ 0xc080
 800199a:	81bb      	strh	r3, [r7, #12]
    lcd_send_command(addresses[row] + col);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	3310      	adds	r3, #16
 80019a0:	443b      	add	r3, r7
 80019a2:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80019a6:	79bb      	ldrb	r3, [r7, #6]
 80019a8:	4413      	add	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f819 	bl	80019e4 <lcd_send_command>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <lcd_print>:

void lcd_print(const char *str) {
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
    while (*str) {
 80019c2:	e006      	b.n	80019d2 <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 f817 	bl	8001a00 <lcd_send_data>
    while (*str) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f4      	bne.n	80019c4 <lcd_print+0xa>
    }
}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <lcd_send_command>:
void lcd_print_num(int num) {
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "%d", num);
    lcd_print(buffer);
}
static void lcd_send_command(uint8_t cmd) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
    lcd_send(cmd, 0x00);
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f812 	bl	8001a1c <lcd_send>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <lcd_send_data>:

static void lcd_send_data(uint8_t data) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
    lcd_send(data, 0x01);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f804 	bl	8001a1c <lcd_send>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <lcd_send>:

static void lcd_send(uint8_t value, uint8_t mode) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	460a      	mov	r2, r1
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	71bb      	strb	r3, [r7, #6]
    lcd_control = lcd_backlight | mode;
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <lcd_send+0x40>)
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <lcd_send+0x44>)
 8001a38:	701a      	strb	r2, [r3, #0]
    lcd_write_nibble(value & 0xF0);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f023 030f 	bic.w	r3, r3, #15
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f80e 	bl	8001a64 <lcd_write_nibble>
    lcd_write_nibble((value << 4) & 0xF0);
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f808 	bl	8001a64 <lcd_write_nibble>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000000c 	.word	0x2000000c
 8001a60:	20000168 	.word	0x20000168

08001a64 <lcd_write_nibble>:

static void lcd_write_nibble(uint8_t nibble) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    uint8_t data = nibble | lcd_control | 0x04; // Habilitar bit Enable
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <lcd_write_nibble+0x58>)
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001a80:	f107 020f 	add.w	r2, r7, #15
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	214e      	movs	r1, #78	@ 0x4e
 8001a8e:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <lcd_write_nibble+0x5c>)
 8001a90:	f000 fee0 	bl	8002854 <HAL_I2C_Master_Transmit>
    data &= ~0x04; // Deshabilitar bit Enable
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	f023 0304 	bic.w	r3, r3, #4
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001a9e:	f107 020f 	add.w	r2, r7, #15
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	214e      	movs	r1, #78	@ 0x4e
 8001aac:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <lcd_write_nibble+0x5c>)
 8001aae:	f000 fed1 	bl	8002854 <HAL_I2C_Master_Transmit>
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000168 	.word	0x20000168
 8001ac0:	20000114 	.word	0x20000114

08001ac4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <MX_I2C2_Init+0x50>)
 8001aca:	4a13      	ldr	r2, [pc, #76]	@ (8001b18 <MX_I2C2_Init+0x54>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_I2C2_Init+0x50>)
 8001ad0:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <MX_I2C2_Init+0x58>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <MX_I2C2_Init+0x50>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <MX_I2C2_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <MX_I2C2_Init+0x50>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <MX_I2C2_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <MX_I2C2_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <MX_I2C2_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <MX_I2C2_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <MX_I2C2_Init+0x50>)
 8001b02:	f000 fd63 	bl	80025cc <HAL_I2C_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b0c:	f7ff fa8c 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000114 	.word	0x20000114
 8001b18:	40005800 	.word	0x40005800
 8001b1c:	000186a0 	.word	0x000186a0

08001b20 <keypad_init>:

// Delay para debounce
static delay_t debounce_delay;

// Inicialización del teclado matricial
void keypad_init(void) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]

    // Configuración de los pines de columna como entradas con interrupciones en flanco descendente
    GPIO_InitStruct.Pin = C1_PIN | C2_PIN | C3_PIN;
 8001b34:	2334      	movs	r3, #52	@ 0x34
 8001b36:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b38:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b3c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(C_PORT, &GPIO_InitStruct);
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	481c      	ldr	r0, [pc, #112]	@ (8001bb8 <keypad_init+0x98>)
 8001b48:	f000 fb48 	bl	80021dc <HAL_GPIO_Init>

    // Configuración de los pines de fila como salidas push-pull
    GPIO_InitStruct.Pin = R1_PIN | R2_PIN | R3_PIN | R4_PIN;
 8001b4c:	f44f 73e4 	mov.w	r3, #456	@ 0x1c8
 8001b50:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(R_PORT, &GPIO_InitStruct);
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4816      	ldr	r0, [pc, #88]	@ (8001bbc <keypad_init+0x9c>)
 8001b64:	f000 fb3a 	bl	80021dc <HAL_GPIO_Init>

    // Inicialmente, todas las filas en estado ALTO
    HAL_GPIO_WritePin(R_PORT, R1_PIN | R2_PIN | R3_PIN | R4_PIN, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8001b6e:	4813      	ldr	r0, [pc, #76]	@ (8001bbc <keypad_init+0x9c>)
 8001b70:	f000 fce0 	bl	8002534 <HAL_GPIO_WritePin>

    // Habilitar interrupciones para las columnas
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	2008      	movs	r0, #8
 8001b7a:	f000 fa66 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b7e:	2008      	movs	r0, #8
 8001b80:	f000 fa7f 	bl	8002082 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	200a      	movs	r0, #10
 8001b8a:	f000 fa5e 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b8e:	200a      	movs	r0, #10
 8001b90:	f000 fa77 	bl	8002082 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	2017      	movs	r0, #23
 8001b9a:	f000 fa56 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b9e:	2017      	movs	r0, #23
 8001ba0:	f000 fa6f 	bl	8002082 <HAL_NVIC_EnableIRQ>

    // Inicialización del debounce y delay
    debounceFSM_init();
 8001ba4:	f7ff fc2c 	bl	8001400 <debounceFSM_init>
    delayInit(&debounce_delay, 40);
 8001ba8:	2128      	movs	r1, #40	@ 0x28
 8001baa:	4805      	ldr	r0, [pc, #20]	@ (8001bc0 <keypad_init+0xa0>)
 8001bac:	f7ff fcb0 	bl	8001510 <delayInit>
}
 8001bb0:	bf00      	nop
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	20000184 	.word	0x20000184

08001bc4 <buffer_add>:

// Agrega una tecla al buffer circular
static void buffer_add(char key) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
    key_buffer[buffer_head] = key;
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <buffer_add+0x5c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4914      	ldr	r1, [pc, #80]	@ (8001c24 <buffer_add+0x60>)
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	54ca      	strb	r2, [r1, r3]
    buffer_head = (buffer_head + 1) % BUFFER_SIZE;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <buffer_add+0x5c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	425a      	negs	r2, r3
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	f002 020f 	and.w	r2, r2, #15
 8001be8:	bf58      	it	pl
 8001bea:	4253      	negpl	r3, r2
 8001bec:	4a0c      	ldr	r2, [pc, #48]	@ (8001c20 <buffer_add+0x5c>)
 8001bee:	6013      	str	r3, [r2, #0]
    if (buffer_head == buffer_tail) {
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <buffer_add+0x5c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <buffer_add+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d10b      	bne.n	8001c14 <buffer_add+0x50>
        buffer_tail = (buffer_tail + 1) % BUFFER_SIZE; // Sobrescribe la tecla más antigua si el buffer está lleno
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <buffer_add+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	425a      	negs	r2, r3
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	f002 020f 	and.w	r2, r2, #15
 8001c0c:	bf58      	it	pl
 8001c0e:	4253      	negpl	r3, r2
 8001c10:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <buffer_add+0x64>)
 8001c12:	6013      	str	r3, [r2, #0]
    }
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	2000017c 	.word	0x2000017c
 8001c24:	2000016c 	.word	0x2000016c
 8001c28:	20000180 	.word	0x20000180

08001c2c <buffer_get>:

// Obtiene una tecla del buffer circular
char buffer_get(void) {
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
    if (buffer_head == buffer_tail) return 0; // Si el buffer está vacío
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <buffer_get+0x48>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <buffer_get+0x4c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d101      	bne.n	8001c42 <buffer_get+0x16>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e011      	b.n	8001c66 <buffer_get+0x3a>
    char key = key_buffer[buffer_tail];
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <buffer_get+0x4c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <buffer_get+0x50>)
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	71fb      	strb	r3, [r7, #7]
    buffer_tail = (buffer_tail + 1) % BUFFER_SIZE;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <buffer_get+0x4c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	425a      	negs	r2, r3
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	f002 020f 	and.w	r2, r2, #15
 8001c5c:	bf58      	it	pl
 8001c5e:	4253      	negpl	r3, r2
 8001c60:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <buffer_get+0x4c>)
 8001c62:	6013      	str	r3, [r2, #0]
    return key;
 8001c64:	79fb      	ldrb	r3, [r7, #7]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	2000017c 	.word	0x2000017c
 8001c78:	20000180 	.word	0x20000180
 8001c7c:	2000016c 	.word	0x2000016c

08001c80 <scan_keypad>:
    }
    return false;
}

// Escanea el teclado y agrega teclas al buffer usando la FSM de debounce
static void scan_keypad(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
    for (int row = 0; row < ROWS; row++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	e03f      	b.n	8001d0c <scan_keypad+0x8c>
        HAL_GPIO_WritePin(R_PORT, row_pins[row], GPIO_PIN_RESET);
 8001c8c:	4a23      	ldr	r2, [pc, #140]	@ (8001d1c <scan_keypad+0x9c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c94:	2200      	movs	r2, #0
 8001c96:	4619      	mov	r1, r3
 8001c98:	4821      	ldr	r0, [pc, #132]	@ (8001d20 <scan_keypad+0xa0>)
 8001c9a:	f000 fc4b 	bl	8002534 <HAL_GPIO_WritePin>
        for (int col = 0; col < COLS; col++) {
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	e024      	b.n	8001cee <scan_keypad+0x6e>
            debounceFSM_update(HAL_GPIO_ReadPin(C_PORT, col_pins[col]));
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d24 <scan_keypad+0xa4>)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cac:	4619      	mov	r1, r3
 8001cae:	481e      	ldr	r0, [pc, #120]	@ (8001d28 <scan_keypad+0xa8>)
 8001cb0:	f000 fc28 	bl	8002504 <HAL_GPIO_ReadPin>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf14      	ite	ne
 8001cba:	2301      	movne	r3, #1
 8001cbc:	2300      	moveq	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fbb5 	bl	8001430 <debounceFSM_update>
            if (readKey()) { // Se detectó una pulsación estable
 8001cc6:	f7ff fb7f 	bl	80013c8 <readKey>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00b      	beq.n	8001ce8 <scan_keypad+0x68>
                buffer_add(keymap[row][col]);
 8001cd0:	4916      	ldr	r1, [pc, #88]	@ (8001d2c <scan_keypad+0xac>)
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	18ca      	adds	r2, r1, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff6e 	bl	8001bc4 <buffer_add>
        for (int col = 0; col < COLS; col++) {
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	ddd7      	ble.n	8001ca4 <scan_keypad+0x24>
            }
        }
        HAL_GPIO_WritePin(R_PORT, row_pins[row], GPIO_PIN_SET);
 8001cf4:	4a09      	ldr	r2, [pc, #36]	@ (8001d1c <scan_keypad+0x9c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4807      	ldr	r0, [pc, #28]	@ (8001d20 <scan_keypad+0xa0>)
 8001d02:	f000 fc17 	bl	8002534 <HAL_GPIO_WritePin>
    for (int row = 0; row < ROWS; row++) {
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	ddbc      	ble.n	8001c8c <scan_keypad+0xc>
    }
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	2000001c 	.word	0x2000001c
 8001d20:	40021400 	.word	0x40021400
 8001d24:	20000024 	.word	0x20000024
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	20000010 	.word	0x20000010

08001d30 <HAL_GPIO_EXTI_Callback>:

// Manejo de interrupciones del teclado
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
    if (delayRead(&debounce_delay)) { // Verifica el debounce antes de escanear
 8001d3a:	4806      	ldr	r0, [pc, #24]	@ (8001d54 <HAL_GPIO_EXTI_Callback+0x24>)
 8001d3c:	f7ff fbfc 	bl	8001538 <delayRead>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_GPIO_EXTI_Callback+0x1a>
        scan_keypad();
 8001d46:	f7ff ff9b 	bl	8001c80 <scan_keypad>
    }
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000184 	.word	0x20000184

08001d58 <keypad_get_key>:

// Obtiene una tecla del buffer
char keypad_get_key(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
    return buffer_get();
 8001d5c:	f7ff ff66 	bl	8001c2c <buffer_get>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <HAL_Init+0x40>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <HAL_Init+0x40>)
 8001d7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	@ (8001da8 <HAL_Init+0x40>)
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f94f 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f808 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9c:	f7ff f94a 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db4:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_InitTick+0x54>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_InitTick+0x58>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f967 	bl	800209e <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00e      	b.n	8001df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d80a      	bhi.n	8001df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f000 f92f 	bl	800204a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dec:	4a06      	ldr	r2, [pc, #24]	@ (8001e08 <HAL_InitTick+0x5c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000030 	.word	0x20000030
 8001e08:	2000002c 	.word	0x2000002c

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000030 	.word	0x20000030
 8001e30:	20000190 	.word	0x20000190

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	@ (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000190 	.word	0x20000190

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff ffee 	bl	8001e34 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <HAL_Delay+0x44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e72:	bf00      	nop
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000030 	.word	0x20000030

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	@ (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	@ (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	@ (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	@ 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff8e 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff29 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff3e 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff8e 	bl	8001f88 <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5d 	bl	8001f34 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff31 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa2 	bl	8001ff0 <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020c4:	f7ff feb6 	bl	8001e34 <HAL_GetTick>
 80020c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d008      	beq.n	80020e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2280      	movs	r2, #128	@ 0x80
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e052      	b.n	800218e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0216 	bic.w	r2, r2, #22
 80020f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002106:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	2b00      	cmp	r3, #0
 800210e:	d103      	bne.n	8002118 <HAL_DMA_Abort+0x62>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0208 	bic.w	r2, r2, #8
 8002126:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002138:	e013      	b.n	8002162 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800213a:	f7ff fe7b 	bl	8001e34 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b05      	cmp	r3, #5
 8002146:	d90c      	bls.n	8002162 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2203      	movs	r2, #3
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e015      	b.n	800218e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e4      	bne.n	800213a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	223f      	movs	r2, #63	@ 0x3f
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d004      	beq.n	80021b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2280      	movs	r2, #128	@ 0x80
 80021ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e00c      	b.n	80021ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2205      	movs	r2, #5
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	@ 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e165      	b.n	80024c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 8154 	bne.w	80024be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	2b02      	cmp	r3, #2
 800222c:	d130      	bne.n	8002290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0201 	and.w	r2, r3, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b03      	cmp	r3, #3
 800229a:	d017      	beq.n	80022cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80ae 	beq.w	80024be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b5d      	ldr	r3, [pc, #372]	@ (80024dc <HAL_GPIO_Init+0x300>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	4a5c      	ldr	r2, [pc, #368]	@ (80024dc <HAL_GPIO_Init+0x300>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002370:	6453      	str	r3, [r2, #68]	@ 0x44
 8002372:	4b5a      	ldr	r3, [pc, #360]	@ (80024dc <HAL_GPIO_Init+0x300>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237e:	4a58      	ldr	r2, [pc, #352]	@ (80024e0 <HAL_GPIO_Init+0x304>)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4f      	ldr	r2, [pc, #316]	@ (80024e4 <HAL_GPIO_Init+0x308>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d025      	beq.n	80023f6 <HAL_GPIO_Init+0x21a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4e      	ldr	r2, [pc, #312]	@ (80024e8 <HAL_GPIO_Init+0x30c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01f      	beq.n	80023f2 <HAL_GPIO_Init+0x216>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4d      	ldr	r2, [pc, #308]	@ (80024ec <HAL_GPIO_Init+0x310>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d019      	beq.n	80023ee <HAL_GPIO_Init+0x212>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4c      	ldr	r2, [pc, #304]	@ (80024f0 <HAL_GPIO_Init+0x314>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0x20e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4b      	ldr	r2, [pc, #300]	@ (80024f4 <HAL_GPIO_Init+0x318>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00d      	beq.n	80023e6 <HAL_GPIO_Init+0x20a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4a      	ldr	r2, [pc, #296]	@ (80024f8 <HAL_GPIO_Init+0x31c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <HAL_GPIO_Init+0x206>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a49      	ldr	r2, [pc, #292]	@ (80024fc <HAL_GPIO_Init+0x320>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_GPIO_Init+0x202>
 80023da:	2306      	movs	r3, #6
 80023dc:	e00c      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023de:	2307      	movs	r3, #7
 80023e0:	e00a      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023e2:	2305      	movs	r3, #5
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023e6:	2304      	movs	r3, #4
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023f6:	2300      	movs	r3, #0
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f002 0203 	and.w	r2, r2, #3
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4093      	lsls	r3, r2
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002408:	4935      	ldr	r1, [pc, #212]	@ (80024e0 <HAL_GPIO_Init+0x304>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002416:	4b3a      	ldr	r3, [pc, #232]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243a:	4a31      	ldr	r2, [pc, #196]	@ (8002500 <HAL_GPIO_Init+0x324>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002440:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002464:	4a26      	ldr	r2, [pc, #152]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246a:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <HAL_GPIO_Init+0x324>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248e:	4a1c      	ldr	r2, [pc, #112]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002494:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b8:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <HAL_GPIO_Init+0x324>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3301      	adds	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	f67f ae96 	bls.w	80021f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3724      	adds	r7, #36	@ 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40021400 	.word	0x40021400
 80024fc:	40021800 	.word	0x40021800
 8002500:	40013c00 	.word	0x40013c00

08002504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	e001      	b.n	8002526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	041a      	lsls	r2, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43d9      	mvns	r1, r3
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	400b      	ands	r3, r1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025b2:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fbb8 	bl	8001d30 <HAL_GPIO_EXTI_Callback>
  }
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40013c00 	.word	0x40013c00

080025cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e12b      	b.n	8002836 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fd46 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2224      	movs	r2, #36	@ 0x24
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800261e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800262e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002630:	f000 fe62 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8002634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a81      	ldr	r2, [pc, #516]	@ (8002840 <HAL_I2C_Init+0x274>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d807      	bhi.n	8002650 <HAL_I2C_Init+0x84>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a80      	ldr	r2, [pc, #512]	@ (8002844 <HAL_I2C_Init+0x278>)
 8002644:	4293      	cmp	r3, r2
 8002646:	bf94      	ite	ls
 8002648:	2301      	movls	r3, #1
 800264a:	2300      	movhi	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e006      	b.n	800265e <HAL_I2C_Init+0x92>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a7d      	ldr	r2, [pc, #500]	@ (8002848 <HAL_I2C_Init+0x27c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	bf94      	ite	ls
 8002658:	2301      	movls	r3, #1
 800265a:	2300      	movhi	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0e7      	b.n	8002836 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a78      	ldr	r2, [pc, #480]	@ (800284c <HAL_I2C_Init+0x280>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9b      	lsrs	r3, r3, #18
 8002670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a6a      	ldr	r2, [pc, #424]	@ (8002840 <HAL_I2C_Init+0x274>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d802      	bhi.n	80026a0 <HAL_I2C_Init+0xd4>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3301      	adds	r3, #1
 800269e:	e009      	b.n	80026b4 <HAL_I2C_Init+0xe8>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	4a69      	ldr	r2, [pc, #420]	@ (8002850 <HAL_I2C_Init+0x284>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	3301      	adds	r3, #1
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	495c      	ldr	r1, [pc, #368]	@ (8002840 <HAL_I2C_Init+0x274>)
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d819      	bhi.n	8002708 <HAL_I2C_Init+0x13c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e59      	subs	r1, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026e8:	400b      	ands	r3, r1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_I2C_Init+0x138>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1e59      	subs	r1, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	e051      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002704:	2304      	movs	r3, #4
 8002706:	e04f      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d111      	bne.n	8002734 <HAL_I2C_Init+0x168>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	440b      	add	r3, r1
 800271e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e012      	b.n	800275a <HAL_I2C_Init+0x18e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	0099      	lsls	r1, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Init+0x196>
 800275e:	2301      	movs	r3, #1
 8002760:	e022      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10e      	bne.n	8002788 <HAL_I2C_Init+0x1bc>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1e58      	subs	r0, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	440b      	add	r3, r1
 8002778:	fbb0 f3f3 	udiv	r3, r0, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002786:	e00f      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1e58      	subs	r0, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	0099      	lsls	r1, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	fbb0 f3f3 	udiv	r3, r0, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	6809      	ldr	r1, [r1, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6911      	ldr	r1, [r2, #16]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	4311      	orrs	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	000186a0 	.word	0x000186a0
 8002844:	001e847f 	.word	0x001e847f
 8002848:	003d08ff 	.word	0x003d08ff
 800284c:	431bde83 	.word	0x431bde83
 8002850:	10624dd3 	.word	0x10624dd3

08002854 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	461a      	mov	r2, r3
 8002860:	460b      	mov	r3, r1
 8002862:	817b      	strh	r3, [r7, #10]
 8002864:	4613      	mov	r3, r2
 8002866:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff fae4 	bl	8001e34 <HAL_GetTick>
 800286c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b20      	cmp	r3, #32
 8002878:	f040 80e0 	bne.w	8002a3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	2319      	movs	r3, #25
 8002882:	2201      	movs	r2, #1
 8002884:	4970      	ldr	r1, [pc, #448]	@ (8002a48 <HAL_I2C_Master_Transmit+0x1f4>)
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f964 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
 8002894:	e0d3      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_I2C_Master_Transmit+0x50>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0cc      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d007      	beq.n	80028ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2221      	movs	r2, #33	@ 0x21
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2210      	movs	r2, #16
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	893a      	ldrh	r2, [r7, #8]
 80028fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a50      	ldr	r2, [pc, #320]	@ (8002a4c <HAL_I2C_Master_Transmit+0x1f8>)
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f89c 	bl	8002a50 <I2C_MasterRequestWrite>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e08d      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002938:	e066      	b.n	8002a08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fa22 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	2b04      	cmp	r3, #4
 8002950:	d107      	bne.n	8002962 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002960:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e06b      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	781a      	ldrb	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d11b      	bne.n	80029dc <HAL_I2C_Master_Transmit+0x188>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d017      	beq.n	80029dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	6a39      	ldr	r1, [r7, #32]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fa19 	bl	8002e18 <I2C_WaitOnBTFFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d107      	bne.n	8002a04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e01a      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d194      	bne.n	800293a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	00100002 	.word	0x00100002
 8002a4c:	ffff0000 	.word	0xffff0000

08002a50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d006      	beq.n	8002a7a <I2C_MasterRequestWrite+0x2a>
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d003      	beq.n	8002a7a <I2C_MasterRequestWrite+0x2a>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a78:	d108      	bne.n	8002a8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e00b      	b.n	8002aa4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	2b12      	cmp	r3, #18
 8002a92:	d107      	bne.n	8002aa4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f84f 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aca:	d103      	bne.n	8002ad4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ad2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e035      	b.n	8002b44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ae0:	d108      	bne.n	8002af4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002af0:	611a      	str	r2, [r3, #16]
 8002af2:	e01b      	b.n	8002b2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002af4:	897b      	ldrh	r3, [r7, #10]
 8002af6:	11db      	asrs	r3, r3, #7
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 0306 	and.w	r3, r3, #6
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f063 030f 	orn	r3, r3, #15
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	490e      	ldr	r1, [pc, #56]	@ (8002b4c <I2C_MasterRequestWrite+0xfc>)
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f898 	bl	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e010      	b.n	8002b44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4907      	ldr	r1, [pc, #28]	@ (8002b50 <I2C_MasterRequestWrite+0x100>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f888 	bl	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	00010008 	.word	0x00010008
 8002b50:	00010002 	.word	0x00010002

08002b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b64:	e048      	b.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d044      	beq.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7ff f961 	bl	8001e34 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d139      	bne.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	0c1b      	lsrs	r3, r3, #16
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d10d      	bne.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	43da      	mvns	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	e00c      	b.n	8002bc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d116      	bne.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e023      	b.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10d      	bne.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	e00c      	b.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d093      	beq.n	8002b66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c56:	e071      	b.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c66:	d123      	bne.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e067      	b.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d041      	beq.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb8:	f7ff f8bc 	bl	8001e34 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d302      	bcc.n	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d136      	bne.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10c      	bne.n	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf14      	ite	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	2300      	moveq	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	e00b      	b.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e021      	b.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10c      	bne.n	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e00b      	b.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf14      	ite	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	2300      	moveq	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f47f af6d 	bne.w	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d94:	e034      	b.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f886 	bl	8002ea8 <I2C_IsAcknowledgeFailed>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e034      	b.n	8002e10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d028      	beq.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7ff f841 	bl	8001e34 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d11d      	bne.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dce:	2b80      	cmp	r3, #128	@ 0x80
 8002dd0:	d016      	beq.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e007      	b.n	8002e10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0a:	2b80      	cmp	r3, #128	@ 0x80
 8002e0c:	d1c3      	bne.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e24:	e034      	b.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f83e 	bl	8002ea8 <I2C_IsAcknowledgeFailed>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e034      	b.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d028      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3e:	f7fe fff9 	bl	8001e34 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d302      	bcc.n	8002e54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11d      	bne.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d016      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e007      	b.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d1c3      	bne.n	8002e26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ebe:	d11b      	bne.n	8002ef8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ec8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	f043 0204 	orr.w	r2, r3, #4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0cc      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b68      	ldr	r3, [pc, #416]	@ (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d90c      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b65      	ldr	r3, [pc, #404]	@ (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b63      	ldr	r3, [pc, #396]	@ (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0b8      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d020      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f5c:	4b59      	ldr	r3, [pc, #356]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a58      	ldr	r2, [pc, #352]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f74:	4b53      	ldr	r3, [pc, #332]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a52      	ldr	r2, [pc, #328]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b50      	ldr	r3, [pc, #320]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	494d      	ldr	r1, [pc, #308]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d044      	beq.n	8003028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	4b47      	ldr	r3, [pc, #284]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d119      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e07f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e06f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e067      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe6:	4b37      	ldr	r3, [pc, #220]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4934      	ldr	r1, [pc, #208]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe ff1c 	bl	8001e34 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fe ff18 	bl	8001e34 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e04f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	4b2b      	ldr	r3, [pc, #172]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 020c 	and.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	429a      	cmp	r2, r3
 8003026:	d1eb      	bne.n	8003000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d20c      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b22      	ldr	r3, [pc, #136]	@ (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b20      	ldr	r3, [pc, #128]	@ (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e032      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305c:	4b19      	ldr	r3, [pc, #100]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4916      	ldr	r1, [pc, #88]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307a:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	490e      	ldr	r1, [pc, #56]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800308e:	f000 f821 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8003092:	4602      	mov	r2, r0
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	490a      	ldr	r1, [pc, #40]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	5ccb      	ldrb	r3, [r1, r3]
 80030a2:	fa22 f303 	lsr.w	r3, r2, r3
 80030a6:	4a09      	ldr	r2, [pc, #36]	@ (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030aa:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe fe7c 	bl	8001dac <HAL_InitTick>

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023c00 	.word	0x40023c00
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08005564 	.word	0x08005564
 80030cc:	20000008 	.word	0x20000008
 80030d0:	2000002c 	.word	0x2000002c

080030d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d8:	b094      	sub	sp, #80	@ 0x50
 80030da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ec:	4b79      	ldr	r3, [pc, #484]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d00d      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x40>
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	f200 80e1 	bhi.w	80032c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x34>
 8003102:	2b04      	cmp	r3, #4
 8003104:	d003      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x3a>
 8003106:	e0db      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b73      	ldr	r3, [pc, #460]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800310a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800310c:	e0db      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800310e:	4b73      	ldr	r3, [pc, #460]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003110:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003112:	e0d8      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003114:	4b6f      	ldr	r3, [pc, #444]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800311c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311e:	4b6d      	ldr	r3, [pc, #436]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d063      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312a:	4b6a      	ldr	r3, [pc, #424]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	099b      	lsrs	r3, r3, #6
 8003130:	2200      	movs	r2, #0
 8003132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003134:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313c:	633b      	str	r3, [r7, #48]	@ 0x30
 800313e:	2300      	movs	r3, #0
 8003140:	637b      	str	r3, [r7, #52]	@ 0x34
 8003142:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003146:	4622      	mov	r2, r4
 8003148:	462b      	mov	r3, r5
 800314a:	f04f 0000 	mov.w	r0, #0
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	0159      	lsls	r1, r3, #5
 8003154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003158:	0150      	lsls	r0, r2, #5
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4621      	mov	r1, r4
 8003160:	1a51      	subs	r1, r2, r1
 8003162:	6139      	str	r1, [r7, #16]
 8003164:	4629      	mov	r1, r5
 8003166:	eb63 0301 	sbc.w	r3, r3, r1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003178:	4659      	mov	r1, fp
 800317a:	018b      	lsls	r3, r1, #6
 800317c:	4651      	mov	r1, sl
 800317e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003182:	4651      	mov	r1, sl
 8003184:	018a      	lsls	r2, r1, #6
 8003186:	4651      	mov	r1, sl
 8003188:	ebb2 0801 	subs.w	r8, r2, r1
 800318c:	4659      	mov	r1, fp
 800318e:	eb63 0901 	sbc.w	r9, r3, r1
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800319e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031a6:	4690      	mov	r8, r2
 80031a8:	4699      	mov	r9, r3
 80031aa:	4623      	mov	r3, r4
 80031ac:	eb18 0303 	adds.w	r3, r8, r3
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	462b      	mov	r3, r5
 80031b4:	eb49 0303 	adc.w	r3, r9, r3
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031c6:	4629      	mov	r1, r5
 80031c8:	024b      	lsls	r3, r1, #9
 80031ca:	4621      	mov	r1, r4
 80031cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031d0:	4621      	mov	r1, r4
 80031d2:	024a      	lsls	r2, r1, #9
 80031d4:	4610      	mov	r0, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031da:	2200      	movs	r2, #0
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031e4:	f7fd f884 	bl	80002f0 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4613      	mov	r3, r2
 80031ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031f0:	e058      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f2:	4b38      	ldr	r3, [pc, #224]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	099b      	lsrs	r3, r3, #6
 80031f8:	2200      	movs	r2, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	4611      	mov	r1, r2
 80031fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
 8003208:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800320c:	4642      	mov	r2, r8
 800320e:	464b      	mov	r3, r9
 8003210:	f04f 0000 	mov.w	r0, #0
 8003214:	f04f 0100 	mov.w	r1, #0
 8003218:	0159      	lsls	r1, r3, #5
 800321a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800321e:	0150      	lsls	r0, r2, #5
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4641      	mov	r1, r8
 8003226:	ebb2 0a01 	subs.w	sl, r2, r1
 800322a:	4649      	mov	r1, r9
 800322c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800323c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003240:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003244:	ebb2 040a 	subs.w	r4, r2, sl
 8003248:	eb63 050b 	sbc.w	r5, r3, fp
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	00eb      	lsls	r3, r5, #3
 8003256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800325a:	00e2      	lsls	r2, r4, #3
 800325c:	4614      	mov	r4, r2
 800325e:	461d      	mov	r5, r3
 8003260:	4643      	mov	r3, r8
 8003262:	18e3      	adds	r3, r4, r3
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	464b      	mov	r3, r9
 8003268:	eb45 0303 	adc.w	r3, r5, r3
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	e9d7 4500 	ldrd	r4, r5, [r7]
 800327a:	4629      	mov	r1, r5
 800327c:	028b      	lsls	r3, r1, #10
 800327e:	4621      	mov	r1, r4
 8003280:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003284:	4621      	mov	r1, r4
 8003286:	028a      	lsls	r2, r1, #10
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800328e:	2200      	movs	r2, #0
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	61fa      	str	r2, [r7, #28]
 8003294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003298:	f7fd f82a 	bl	80002f0 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4613      	mov	r3, r2
 80032a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	3301      	adds	r3, #1
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032be:	e002      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b05      	ldr	r3, [pc, #20]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3750      	adds	r7, #80	@ 0x50
 80032cc:	46bd      	mov	sp, r7
 80032ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	00f42400 	.word	0x00f42400
 80032dc:	007a1200 	.word	0x007a1200

080032e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e4:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000008 	.word	0x20000008

080032f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032fc:	f7ff fff0 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	0a9b      	lsrs	r3, r3, #10
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4903      	ldr	r1, [pc, #12]	@ (800331c <HAL_RCC_GetPCLK1Freq+0x24>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800
 800331c:	08005574 	.word	0x08005574

08003320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003324:	f7ff ffdc 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	0b5b      	lsrs	r3, r3, #13
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4903      	ldr	r1, [pc, #12]	@ (8003344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40023800 	.word	0x40023800
 8003344:	08005574 	.word	0x08005574

08003348 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e273      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d075      	beq.n	8003452 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003366:	4b88      	ldr	r3, [pc, #544]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d00c      	beq.n	800338c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003372:	4b85      	ldr	r3, [pc, #532]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
        || \
 800337a:	2b08      	cmp	r3, #8
 800337c:	d112      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b82      	ldr	r3, [pc, #520]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	4b7e      	ldr	r3, [pc, #504]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05b      	beq.n	8003450 <HAL_RCC_OscConfig+0x108>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d157      	bne.n	8003450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e24e      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x74>
 80033ae:	4b76      	ldr	r3, [pc, #472]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e01d      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x98>
 80033c6:	4b70      	ldr	r3, [pc, #448]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033e0:	4b69      	ldr	r3, [pc, #420]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a68      	ldr	r2, [pc, #416]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b66      	ldr	r3, [pc, #408]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a65      	ldr	r2, [pc, #404]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fd18 	bl	8001e34 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fd14 	bl	8001e34 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	@ 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e213      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b5b      	ldr	r3, [pc, #364]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0xc0>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fd04 	bl	8001e34 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fd00 	bl	8001e34 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1ff      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	4b51      	ldr	r3, [pc, #324]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0xe8>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d063      	beq.n	8003526 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800345e:	4b4a      	ldr	r3, [pc, #296]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346a:	4b47      	ldr	r3, [pc, #284]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003472:	2b08      	cmp	r3, #8
 8003474:	d11c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b44      	ldr	r3, [pc, #272]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d116      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	4b41      	ldr	r3, [pc, #260]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e1d3      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349a:	4b3b      	ldr	r3, [pc, #236]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4937      	ldr	r1, [pc, #220]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	e03a      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d020      	beq.n	80034fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b8:	4b34      	ldr	r3, [pc, #208]	@ (800358c <HAL_RCC_OscConfig+0x244>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe fcb9 	bl	8001e34 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fe fcb5 	bl	8001e34 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1b4      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b28      	ldr	r3, [pc, #160]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4925      	ldr	r1, [pc, #148]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	600b      	str	r3, [r1, #0]
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fa:	4b24      	ldr	r3, [pc, #144]	@ (800358c <HAL_RCC_OscConfig+0x244>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe fc98 	bl	8001e34 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe fc94 	bl	8001e34 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e193      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d036      	beq.n	80035a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <HAL_RCC_OscConfig+0x248>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fe fc78 	bl	8001e34 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003548:	f7fe fc74 	bl	8001e34 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e173      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x200>
 8003566:	e01b      	b.n	80035a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003568:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <HAL_RCC_OscConfig+0x248>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe fc61 	bl	8001e34 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	e00e      	b.n	8003594 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003576:	f7fe fc5d 	bl	8001e34 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d907      	bls.n	8003594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e15c      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
 8003588:	40023800 	.word	0x40023800
 800358c:	42470000 	.word	0x42470000
 8003590:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	4b8a      	ldr	r3, [pc, #552]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ea      	bne.n	8003576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8097 	beq.w	80036dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b83      	ldr	r3, [pc, #524]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	4b7f      	ldr	r3, [pc, #508]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	4a7e      	ldr	r2, [pc, #504]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ce:	4b7c      	ldr	r3, [pc, #496]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b79      	ldr	r3, [pc, #484]	@ (80037c4 <HAL_RCC_OscConfig+0x47c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ea:	4b76      	ldr	r3, [pc, #472]	@ (80037c4 <HAL_RCC_OscConfig+0x47c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a75      	ldr	r2, [pc, #468]	@ (80037c4 <HAL_RCC_OscConfig+0x47c>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f6:	f7fe fc1d 	bl	8001e34 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fe fc19 	bl	8001e34 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e118      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b6c      	ldr	r3, [pc, #432]	@ (80037c4 <HAL_RCC_OscConfig+0x47c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x2ea>
 8003624:	4b66      	ldr	r3, [pc, #408]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003628:	4a65      	ldr	r2, [pc, #404]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003630:	e01c      	b.n	800366c <HAL_RCC_OscConfig+0x324>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b05      	cmp	r3, #5
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x30c>
 800363a:	4b61      	ldr	r3, [pc, #388]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363e:	4a60      	ldr	r2, [pc, #384]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	6713      	str	r3, [r2, #112]	@ 0x70
 8003646:	4b5e      	ldr	r3, [pc, #376]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	4a5d      	ldr	r2, [pc, #372]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6713      	str	r3, [r2, #112]	@ 0x70
 8003652:	e00b      	b.n	800366c <HAL_RCC_OscConfig+0x324>
 8003654:	4b5a      	ldr	r3, [pc, #360]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003658:	4a59      	ldr	r2, [pc, #356]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003660:	4b57      	ldr	r3, [pc, #348]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003664:	4a56      	ldr	r2, [pc, #344]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003666:	f023 0304 	bic.w	r3, r3, #4
 800366a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d015      	beq.n	80036a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7fe fbde 	bl	8001e34 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367a:	e00a      	b.n	8003692 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7fe fbda 	bl	8001e34 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e0d7      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	4b4b      	ldr	r3, [pc, #300]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0ee      	beq.n	800367c <HAL_RCC_OscConfig+0x334>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe fbc8 	bl	8001e34 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe fbc4 	bl	8001e34 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0c1      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036be:	4b40      	ldr	r3, [pc, #256]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ee      	bne.n	80036a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d105      	bne.n	80036dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d0:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	4a3a      	ldr	r2, [pc, #232]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80036d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80ad 	beq.w	8003840 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e6:	4b36      	ldr	r3, [pc, #216]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d060      	beq.n	80037b4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d145      	bne.n	8003786 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b33      	ldr	r3, [pc, #204]	@ (80037c8 <HAL_RCC_OscConfig+0x480>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fb98 	bl	8001e34 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe fb94 	bl	8001e34 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e093      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b29      	ldr	r3, [pc, #164]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	019b      	lsls	r3, r3, #6
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	491b      	ldr	r1, [pc, #108]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <HAL_RCC_OscConfig+0x480>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fe fb69 	bl	8001e34 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe fb65 	bl	8001e34 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e064      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x41e>
 8003784:	e05c      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b10      	ldr	r3, [pc, #64]	@ (80037c8 <HAL_RCC_OscConfig+0x480>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe fb52 	bl	8001e34 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe fb4e 	bl	8001e34 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e04d      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x44c>
 80037b2:	e045      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e040      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40007000 	.word	0x40007000
 80037c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037cc:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <HAL_RCC_OscConfig+0x504>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d030      	beq.n	800383c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d129      	bne.n	800383c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d122      	bne.n	800383c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003804:	4293      	cmp	r3, r2
 8003806:	d119      	bne.n	800383c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	3b01      	subs	r3, #1
 8003816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d10f      	bne.n	800383c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d107      	bne.n	800383c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800

08003850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e042      	b.n	80038e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd fc4c 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	@ 0x24
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fdf5 	bl	8004484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	@ 0x28
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b20      	cmp	r3, #32
 800390e:	d175      	bne.n	80039fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Transmit+0x2c>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e06e      	b.n	80039fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2221      	movs	r2, #33	@ 0x21
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392e:	f7fe fa81 	bl	8001e34 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003948:	d108      	bne.n	800395c <HAL_UART_Transmit+0x6c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e003      	b.n	8003964 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003964:	e02e      	b.n	80039c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	@ 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fb91 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e03a      	b.n	80039fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800399c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3302      	adds	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	e007      	b.n	80039b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3301      	adds	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1cb      	bne.n	8003966 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2140      	movs	r1, #64	@ 0x40
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fb5d 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e006      	b.n	80039fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b08a      	sub	sp, #40	@ 0x28
 8003a0a:	af02      	add	r7, sp, #8
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	f040 8081 	bne.w	8003b2a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_UART_Receive+0x2e>
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e079      	b.n	8003b2c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2222      	movs	r2, #34	@ 0x22
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4c:	f7fe f9f2 	bl	8001e34 <HAL_GetTick>
 8003a50:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a66:	d108      	bne.n	8003a7a <HAL_UART_Receive+0x74>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e003      	b.n	8003a82 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a82:	e047      	b.n	8003b14 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2120      	movs	r1, #32
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fb02 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e042      	b.n	8003b2c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10c      	bne.n	8003ac6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	e01f      	b.n	8003b06 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ace:	d007      	beq.n	8003ae0 <HAL_UART_Receive+0xda>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <HAL_UART_Receive+0xe8>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e008      	b.n	8003b00 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3301      	adds	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1b2      	bne.n	8003a84 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3720      	adds	r7, #32
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b0ba      	sub	sp, #232	@ 0xe8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10f      	bne.n	8003b9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_UART_IRQHandler+0x66>
 8003b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fbb8 	bl	8004308 <UART_Receive_IT>
      return;
 8003b98:	e25b      	b.n	8004052 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80de 	beq.w	8003d60 <HAL_UART_IRQHandler+0x22c>
 8003ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80d1 	beq.w	8003d60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <HAL_UART_IRQHandler+0xae>
 8003bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_UART_IRQHandler+0xd2>
 8003bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfe:	f043 0202 	orr.w	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00b      	beq.n	8003c2a <HAL_UART_IRQHandler+0xf6>
 8003c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c22:	f043 0204 	orr.w	r2, r3, #4
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d011      	beq.n	8003c5a <HAL_UART_IRQHandler+0x126>
 8003c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f043 0208 	orr.w	r2, r3, #8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 81f2 	beq.w	8004048 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_UART_IRQHandler+0x14e>
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fb43 	bl	8004308 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8c:	2b40      	cmp	r3, #64	@ 0x40
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_UART_IRQHandler+0x17a>
 8003ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04f      	beq.n	8003d4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa4b 	bl	800414a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbe:	2b40      	cmp	r3, #64	@ 0x40
 8003cc0:	d141      	bne.n	8003d46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3314      	adds	r3, #20
 8003cc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3314      	adds	r3, #20
 8003cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1d9      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f14 <HAL_UART_IRQHandler+0x3e0>)
 8003d1c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe fa37 	bl	8002196 <HAL_DMA_Abort_IT>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	e00e      	b.n	8003d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f994 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	e00a      	b.n	8003d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f990 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	e006      	b.n	8003d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f98c 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d5a:	e175      	b.n	8004048 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	bf00      	nop
    return;
 8003d5e:	e173      	b.n	8004048 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	f040 814f 	bne.w	8004008 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8148 	beq.w	8004008 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8141 	beq.w	8004008 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da6:	2b40      	cmp	r3, #64	@ 0x40
 8003da8:	f040 80b6 	bne.w	8003f18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003db8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8145 	beq.w	800404c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	f080 813e 	bcs.w	800404c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de2:	f000 8088 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1d9      	bne.n	8003de6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3314      	adds	r3, #20
 8003e38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3314      	adds	r3, #20
 8003e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e1      	bne.n	8003e32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3314      	adds	r3, #20
 8003e74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3314      	adds	r3, #20
 8003e8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e3      	bne.n	8003e6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ec6:	f023 0310 	bic.w	r3, r3, #16
 8003eca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	330c      	adds	r3, #12
 8003ed4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ed8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003eda:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ede:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e3      	bne.n	8003eb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe f8e0 	bl	80020b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f8b7 	bl	8004080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f12:	e09b      	b.n	800404c <HAL_UART_IRQHandler+0x518>
 8003f14:	08004211 	.word	0x08004211
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 808e 	beq.w	8004050 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8089 	beq.w	8004050 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f62:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e3      	bne.n	8003f3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	623b      	str	r3, [r7, #32]
   return(result);
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3314      	adds	r3, #20
 8003f96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e3      	bne.n	8003f76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0310 	bic.w	r3, r3, #16
 8003fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003fe0:	61fa      	str	r2, [r7, #28]
 8003fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	69b9      	ldr	r1, [r7, #24]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	617b      	str	r3, [r7, #20]
   return(result);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e3      	bne.n	8003fbc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ffa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ffe:	4619      	mov	r1, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f83d 	bl	8004080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004006:	e023      	b.n	8004050 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004010:	2b00      	cmp	r3, #0
 8004012:	d009      	beq.n	8004028 <HAL_UART_IRQHandler+0x4f4>
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f909 	bl	8004238 <UART_Transmit_IT>
    return;
 8004026:	e014      	b.n	8004052 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00e      	beq.n	8004052 <HAL_UART_IRQHandler+0x51e>
 8004034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f949 	bl	80042d8 <UART_EndTransmit_IT>
    return;
 8004046:	e004      	b.n	8004052 <HAL_UART_IRQHandler+0x51e>
    return;
 8004048:	bf00      	nop
 800404a:	e002      	b.n	8004052 <HAL_UART_IRQHandler+0x51e>
      return;
 800404c:	bf00      	nop
 800404e:	e000      	b.n	8004052 <HAL_UART_IRQHandler+0x51e>
      return;
 8004050:	bf00      	nop
  }
}
 8004052:	37e8      	adds	r7, #232	@ 0xe8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	e03b      	b.n	8004122 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d037      	beq.n	8004122 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7fd febf 	bl	8001e34 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e03a      	b.n	8004142 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d023      	beq.n	8004122 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b80      	cmp	r3, #128	@ 0x80
 80040de:	d020      	beq.n	8004122 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b40      	cmp	r3, #64	@ 0x40
 80040e4:	d01d      	beq.n	8004122 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d116      	bne.n	8004122 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f81d 	bl	800414a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2208      	movs	r2, #8
 8004114:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e00f      	b.n	8004142 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4013      	ands	r3, r2
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	429a      	cmp	r2, r3
 8004130:	bf0c      	ite	eq
 8004132:	2301      	moveq	r3, #1
 8004134:	2300      	movne	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	429a      	cmp	r2, r3
 800413e:	d0b4      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800414a:	b480      	push	{r7}
 800414c:	b095      	sub	sp, #84	@ 0x54
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004168:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	330c      	adds	r3, #12
 8004170:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004172:	643a      	str	r2, [r7, #64]	@ 0x40
 8004174:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004178:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e5      	bne.n	8004152 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	61fb      	str	r3, [r7, #28]
   return(result);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3314      	adds	r3, #20
 80041a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d119      	bne.n	80041f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f023 0310 	bic.w	r3, r3, #16
 80041d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041e2:	61ba      	str	r2, [r7, #24]
 80041e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	6979      	ldr	r1, [r7, #20]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	613b      	str	r3, [r7, #16]
   return(result);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e5      	bne.n	80041c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004204:	bf00      	nop
 8004206:	3754      	adds	r7, #84	@ 0x54
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff ff1e 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b21      	cmp	r3, #33	@ 0x21
 800424a:	d13e      	bne.n	80042ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004254:	d114      	bne.n	8004280 <UART_Transmit_IT+0x48>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d110      	bne.n	8004280 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004272:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	1c9a      	adds	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	621a      	str	r2, [r3, #32]
 800427e:	e008      	b.n	8004292 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	1c59      	adds	r1, r3, #1
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6211      	str	r1, [r2, #32]
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29b      	uxth	r3, r3
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4619      	mov	r1, r3
 80042a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10f      	bne.n	80042c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e000      	b.n	80042cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ca:	2302      	movs	r3, #2
  }
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fd f85b 	bl	80013b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08c      	sub	sp, #48	@ 0x30
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b22      	cmp	r3, #34	@ 0x22
 800431a:	f040 80ae 	bne.w	800447a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004326:	d117      	bne.n	8004358 <UART_Receive_IT+0x50>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d113      	bne.n	8004358 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004346:	b29a      	uxth	r2, r3
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004350:	1c9a      	adds	r2, r3, #2
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	629a      	str	r2, [r3, #40]	@ 0x28
 8004356:	e026      	b.n	80043a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436a:	d007      	beq.n	800437c <UART_Receive_IT+0x74>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <UART_Receive_IT+0x82>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e008      	b.n	800439c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004396:	b2da      	uxtb	r2, r3
 8004398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4619      	mov	r1, r3
 80043b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d15d      	bne.n	8004476 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0220 	bic.w	r2, r2, #32
 80043c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d135      	bne.n	800446c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	613b      	str	r3, [r7, #16]
   return(result);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f023 0310 	bic.w	r3, r3, #16
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004426:	623a      	str	r2, [r7, #32]
 8004428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	69f9      	ldr	r1, [r7, #28]
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	61bb      	str	r3, [r7, #24]
   return(result);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b10      	cmp	r3, #16
 8004446:	d10a      	bne.n	800445e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff fe0b 	bl	8004080 <HAL_UARTEx_RxEventCallback>
 800446a:	e002      	b.n	8004472 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fdf3 	bl	8004058 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e002      	b.n	800447c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e000      	b.n	800447c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3730      	adds	r7, #48	@ 0x30
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004488:	b0c0      	sub	sp, #256	@ 0x100
 800448a:	af00      	add	r7, sp, #0
 800448c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a0:	68d9      	ldr	r1, [r3, #12]
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	ea40 0301 	orr.w	r3, r0, r1
 80044ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044dc:	f021 010c 	bic.w	r1, r1, #12
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044ea:	430b      	orrs	r3, r1
 80044ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fe:	6999      	ldr	r1, [r3, #24]
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	ea40 0301 	orr.w	r3, r0, r1
 800450a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b95      	ldr	r3, [pc, #596]	@ (8004768 <UART_SetConfig+0x2e4>)
 8004514:	429a      	cmp	r2, r3
 8004516:	d011      	beq.n	800453c <UART_SetConfig+0xb8>
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b93      	ldr	r3, [pc, #588]	@ (800476c <UART_SetConfig+0x2e8>)
 8004520:	429a      	cmp	r2, r3
 8004522:	d00b      	beq.n	800453c <UART_SetConfig+0xb8>
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4b91      	ldr	r3, [pc, #580]	@ (8004770 <UART_SetConfig+0x2ec>)
 800452c:	429a      	cmp	r2, r3
 800452e:	d005      	beq.n	800453c <UART_SetConfig+0xb8>
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4b8f      	ldr	r3, [pc, #572]	@ (8004774 <UART_SetConfig+0x2f0>)
 8004538:	429a      	cmp	r2, r3
 800453a:	d104      	bne.n	8004546 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800453c:	f7fe fef0 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8004540:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004544:	e003      	b.n	800454e <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004546:	f7fe fed7 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 800454a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004558:	f040 8110 	bne.w	800477c <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800455c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004560:	2200      	movs	r2, #0
 8004562:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004566:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800456a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800456e:	4622      	mov	r2, r4
 8004570:	462b      	mov	r3, r5
 8004572:	1891      	adds	r1, r2, r2
 8004574:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004576:	415b      	adcs	r3, r3
 8004578:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800457a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800457e:	4621      	mov	r1, r4
 8004580:	eb12 0801 	adds.w	r8, r2, r1
 8004584:	4629      	mov	r1, r5
 8004586:	eb43 0901 	adc.w	r9, r3, r1
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800459a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800459e:	4690      	mov	r8, r2
 80045a0:	4699      	mov	r9, r3
 80045a2:	4623      	mov	r3, r4
 80045a4:	eb18 0303 	adds.w	r3, r8, r3
 80045a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045ac:	462b      	mov	r3, r5
 80045ae:	eb49 0303 	adc.w	r3, r9, r3
 80045b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045ca:	460b      	mov	r3, r1
 80045cc:	18db      	adds	r3, r3, r3
 80045ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80045d0:	4613      	mov	r3, r2
 80045d2:	eb42 0303 	adc.w	r3, r2, r3
 80045d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80045d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045e0:	f7fb fe86 	bl	80002f0 <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4b63      	ldr	r3, [pc, #396]	@ (8004778 <UART_SetConfig+0x2f4>)
 80045ea:	fba3 2302 	umull	r2, r3, r3, r2
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	011c      	lsls	r4, r3, #4
 80045f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004600:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004604:	4642      	mov	r2, r8
 8004606:	464b      	mov	r3, r9
 8004608:	1891      	adds	r1, r2, r2
 800460a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800460c:	415b      	adcs	r3, r3
 800460e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004610:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004614:	4641      	mov	r1, r8
 8004616:	eb12 0a01 	adds.w	sl, r2, r1
 800461a:	4649      	mov	r1, r9
 800461c:	eb43 0b01 	adc.w	fp, r3, r1
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800462c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004634:	4692      	mov	sl, r2
 8004636:	469b      	mov	fp, r3
 8004638:	4643      	mov	r3, r8
 800463a:	eb1a 0303 	adds.w	r3, sl, r3
 800463e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004642:	464b      	mov	r3, r9
 8004644:	eb4b 0303 	adc.w	r3, fp, r3
 8004648:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004658:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800465c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004660:	460b      	mov	r3, r1
 8004662:	18db      	adds	r3, r3, r3
 8004664:	643b      	str	r3, [r7, #64]	@ 0x40
 8004666:	4613      	mov	r3, r2
 8004668:	eb42 0303 	adc.w	r3, r2, r3
 800466c:	647b      	str	r3, [r7, #68]	@ 0x44
 800466e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004672:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004676:	f7fb fe3b 	bl	80002f0 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4611      	mov	r1, r2
 8004680:	4b3d      	ldr	r3, [pc, #244]	@ (8004778 <UART_SetConfig+0x2f4>)
 8004682:	fba3 2301 	umull	r2, r3, r3, r1
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2264      	movs	r2, #100	@ 0x64
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	1acb      	subs	r3, r1, r3
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004696:	4b38      	ldr	r3, [pc, #224]	@ (8004778 <UART_SetConfig+0x2f4>)
 8004698:	fba3 2302 	umull	r2, r3, r3, r2
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046a4:	441c      	add	r4, r3
 80046a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046b8:	4642      	mov	r2, r8
 80046ba:	464b      	mov	r3, r9
 80046bc:	1891      	adds	r1, r2, r2
 80046be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046c0:	415b      	adcs	r3, r3
 80046c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046c8:	4641      	mov	r1, r8
 80046ca:	1851      	adds	r1, r2, r1
 80046cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80046ce:	4649      	mov	r1, r9
 80046d0:	414b      	adcs	r3, r1
 80046d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046e0:	4659      	mov	r1, fp
 80046e2:	00cb      	lsls	r3, r1, #3
 80046e4:	4651      	mov	r1, sl
 80046e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ea:	4651      	mov	r1, sl
 80046ec:	00ca      	lsls	r2, r1, #3
 80046ee:	4610      	mov	r0, r2
 80046f0:	4619      	mov	r1, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	4642      	mov	r2, r8
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046fc:	464b      	mov	r3, r9
 80046fe:	460a      	mov	r2, r1
 8004700:	eb42 0303 	adc.w	r3, r2, r3
 8004704:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004714:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004718:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800471c:	460b      	mov	r3, r1
 800471e:	18db      	adds	r3, r3, r3
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004722:	4613      	mov	r3, r2
 8004724:	eb42 0303 	adc.w	r3, r2, r3
 8004728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800472a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800472e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004732:	f7fb fddd 	bl	80002f0 <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4b0f      	ldr	r3, [pc, #60]	@ (8004778 <UART_SetConfig+0x2f4>)
 800473c:	fba3 1302 	umull	r1, r3, r3, r2
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	2164      	movs	r1, #100	@ 0x64
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	3332      	adds	r3, #50	@ 0x32
 800474e:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <UART_SetConfig+0x2f4>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	f003 0207 	and.w	r2, r3, #7
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4422      	add	r2, r4
 8004762:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004764:	e10a      	b.n	800497c <UART_SetConfig+0x4f8>
 8004766:	bf00      	nop
 8004768:	40011000 	.word	0x40011000
 800476c:	40011400 	.word	0x40011400
 8004770:	40011800 	.word	0x40011800
 8004774:	40011c00 	.word	0x40011c00
 8004778:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800477c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004780:	2200      	movs	r2, #0
 8004782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004786:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800478a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800478e:	4642      	mov	r2, r8
 8004790:	464b      	mov	r3, r9
 8004792:	1891      	adds	r1, r2, r2
 8004794:	6239      	str	r1, [r7, #32]
 8004796:	415b      	adcs	r3, r3
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
 800479a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479e:	4641      	mov	r1, r8
 80047a0:	1854      	adds	r4, r2, r1
 80047a2:	4649      	mov	r1, r9
 80047a4:	eb43 0501 	adc.w	r5, r3, r1
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	00eb      	lsls	r3, r5, #3
 80047b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b6:	00e2      	lsls	r2, r4, #3
 80047b8:	4614      	mov	r4, r2
 80047ba:	461d      	mov	r5, r3
 80047bc:	4643      	mov	r3, r8
 80047be:	18e3      	adds	r3, r4, r3
 80047c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047c4:	464b      	mov	r3, r9
 80047c6:	eb45 0303 	adc.w	r3, r5, r3
 80047ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047ea:	4629      	mov	r1, r5
 80047ec:	008b      	lsls	r3, r1, #2
 80047ee:	4621      	mov	r1, r4
 80047f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f4:	4621      	mov	r1, r4
 80047f6:	008a      	lsls	r2, r1, #2
 80047f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047fc:	f7fb fd78 	bl	80002f0 <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4b60      	ldr	r3, [pc, #384]	@ (8004988 <UART_SetConfig+0x504>)
 8004806:	fba3 2302 	umull	r2, r3, r3, r2
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	011c      	lsls	r4, r3, #4
 800480e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004812:	2200      	movs	r2, #0
 8004814:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004818:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800481c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	1891      	adds	r1, r2, r2
 8004826:	61b9      	str	r1, [r7, #24]
 8004828:	415b      	adcs	r3, r3
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004830:	4641      	mov	r1, r8
 8004832:	1851      	adds	r1, r2, r1
 8004834:	6139      	str	r1, [r7, #16]
 8004836:	4649      	mov	r1, r9
 8004838:	414b      	adcs	r3, r1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004848:	4659      	mov	r1, fp
 800484a:	00cb      	lsls	r3, r1, #3
 800484c:	4651      	mov	r1, sl
 800484e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004852:	4651      	mov	r1, sl
 8004854:	00ca      	lsls	r2, r1, #3
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	4603      	mov	r3, r0
 800485c:	4642      	mov	r2, r8
 800485e:	189b      	adds	r3, r3, r2
 8004860:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004864:	464b      	mov	r3, r9
 8004866:	460a      	mov	r2, r1
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	67bb      	str	r3, [r7, #120]	@ 0x78
 800487a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004888:	4649      	mov	r1, r9
 800488a:	008b      	lsls	r3, r1, #2
 800488c:	4641      	mov	r1, r8
 800488e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004892:	4641      	mov	r1, r8
 8004894:	008a      	lsls	r2, r1, #2
 8004896:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800489a:	f7fb fd29 	bl	80002f0 <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	4b38      	ldr	r3, [pc, #224]	@ (8004988 <UART_SetConfig+0x504>)
 80048a6:	fba3 2301 	umull	r2, r3, r3, r1
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2264      	movs	r2, #100	@ 0x64
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	1acb      	subs	r3, r1, r3
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	3332      	adds	r3, #50	@ 0x32
 80048b8:	4a33      	ldr	r2, [pc, #204]	@ (8004988 <UART_SetConfig+0x504>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048c4:	441c      	add	r4, r3
 80048c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ca:	2200      	movs	r2, #0
 80048cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80048ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80048d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	415b      	adcs	r3, r3
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e4:	4641      	mov	r1, r8
 80048e6:	1851      	adds	r1, r2, r1
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	4649      	mov	r1, r9
 80048ec:	414b      	adcs	r3, r1
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048fc:	4659      	mov	r1, fp
 80048fe:	00cb      	lsls	r3, r1, #3
 8004900:	4651      	mov	r1, sl
 8004902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004906:	4651      	mov	r1, sl
 8004908:	00ca      	lsls	r2, r1, #3
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	4603      	mov	r3, r0
 8004910:	4642      	mov	r2, r8
 8004912:	189b      	adds	r3, r3, r2
 8004914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004916:	464b      	mov	r3, r9
 8004918:	460a      	mov	r2, r1
 800491a:	eb42 0303 	adc.w	r3, r2, r3
 800491e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	663b      	str	r3, [r7, #96]	@ 0x60
 800492a:	667a      	str	r2, [r7, #100]	@ 0x64
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004938:	4649      	mov	r1, r9
 800493a:	008b      	lsls	r3, r1, #2
 800493c:	4641      	mov	r1, r8
 800493e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004942:	4641      	mov	r1, r8
 8004944:	008a      	lsls	r2, r1, #2
 8004946:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800494a:	f7fb fcd1 	bl	80002f0 <__aeabi_uldivmod>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4b0d      	ldr	r3, [pc, #52]	@ (8004988 <UART_SetConfig+0x504>)
 8004954:	fba3 1302 	umull	r1, r3, r3, r2
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	2164      	movs	r1, #100	@ 0x64
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	3332      	adds	r3, #50	@ 0x32
 8004966:	4a08      	ldr	r2, [pc, #32]	@ (8004988 <UART_SetConfig+0x504>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	f003 020f 	and.w	r2, r3, #15
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4422      	add	r2, r4
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004982:	46bd      	mov	sp, r7
 8004984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004988:	51eb851f 	.word	0x51eb851f

0800498c <siprintf>:
 800498c:	b40e      	push	{r1, r2, r3}
 800498e:	b500      	push	{lr}
 8004990:	b09c      	sub	sp, #112	@ 0x70
 8004992:	ab1d      	add	r3, sp, #116	@ 0x74
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800499c:	4809      	ldr	r0, [pc, #36]	@ (80049c4 <siprintf+0x38>)
 800499e:	9107      	str	r1, [sp, #28]
 80049a0:	9104      	str	r1, [sp, #16]
 80049a2:	4909      	ldr	r1, [pc, #36]	@ (80049c8 <siprintf+0x3c>)
 80049a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a8:	9105      	str	r1, [sp, #20]
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	a902      	add	r1, sp, #8
 80049b0:	f000 f99c 	bl	8004cec <_svfiprintf_r>
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	b01c      	add	sp, #112	@ 0x70
 80049bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c0:	b003      	add	sp, #12
 80049c2:	4770      	bx	lr
 80049c4:	20000034 	.word	0x20000034
 80049c8:	ffff0208 	.word	0xffff0208

080049cc <memset>:
 80049cc:	4402      	add	r2, r0
 80049ce:	4603      	mov	r3, r0
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d100      	bne.n	80049d6 <memset+0xa>
 80049d4:	4770      	bx	lr
 80049d6:	f803 1b01 	strb.w	r1, [r3], #1
 80049da:	e7f9      	b.n	80049d0 <memset+0x4>

080049dc <__errno>:
 80049dc:	4b01      	ldr	r3, [pc, #4]	@ (80049e4 <__errno+0x8>)
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000034 	.word	0x20000034

080049e8 <__libc_init_array>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004a20 <__libc_init_array+0x38>)
 80049ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004a24 <__libc_init_array+0x3c>)
 80049ee:	1b64      	subs	r4, r4, r5
 80049f0:	10a4      	asrs	r4, r4, #2
 80049f2:	2600      	movs	r6, #0
 80049f4:	42a6      	cmp	r6, r4
 80049f6:	d109      	bne.n	8004a0c <__libc_init_array+0x24>
 80049f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004a28 <__libc_init_array+0x40>)
 80049fa:	4c0c      	ldr	r4, [pc, #48]	@ (8004a2c <__libc_init_array+0x44>)
 80049fc:	f000 fc6e 	bl	80052dc <_init>
 8004a00:	1b64      	subs	r4, r4, r5
 8004a02:	10a4      	asrs	r4, r4, #2
 8004a04:	2600      	movs	r6, #0
 8004a06:	42a6      	cmp	r6, r4
 8004a08:	d105      	bne.n	8004a16 <__libc_init_array+0x2e>
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a10:	4798      	blx	r3
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7ee      	b.n	80049f4 <__libc_init_array+0xc>
 8004a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1a:	4798      	blx	r3
 8004a1c:	3601      	adds	r6, #1
 8004a1e:	e7f2      	b.n	8004a06 <__libc_init_array+0x1e>
 8004a20:	080055b8 	.word	0x080055b8
 8004a24:	080055b8 	.word	0x080055b8
 8004a28:	080055b8 	.word	0x080055b8
 8004a2c:	080055bc 	.word	0x080055bc

08004a30 <__retarget_lock_acquire_recursive>:
 8004a30:	4770      	bx	lr

08004a32 <__retarget_lock_release_recursive>:
 8004a32:	4770      	bx	lr

08004a34 <strcpy>:
 8004a34:	4603      	mov	r3, r0
 8004a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a3a:	f803 2b01 	strb.w	r2, [r3], #1
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d1f9      	bne.n	8004a36 <strcpy+0x2>
 8004a42:	4770      	bx	lr

08004a44 <_free_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4605      	mov	r5, r0
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d041      	beq.n	8004ad0 <_free_r+0x8c>
 8004a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a50:	1f0c      	subs	r4, r1, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bfb8      	it	lt
 8004a56:	18e4      	addlt	r4, r4, r3
 8004a58:	f000 f8e0 	bl	8004c1c <__malloc_lock>
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad4 <_free_r+0x90>)
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	b933      	cbnz	r3, 8004a70 <_free_r+0x2c>
 8004a62:	6063      	str	r3, [r4, #4]
 8004a64:	6014      	str	r4, [r2, #0]
 8004a66:	4628      	mov	r0, r5
 8004a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a6c:	f000 b8dc 	b.w	8004c28 <__malloc_unlock>
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	d908      	bls.n	8004a86 <_free_r+0x42>
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	1821      	adds	r1, r4, r0
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	bf01      	itttt	eq
 8004a7c:	6819      	ldreq	r1, [r3, #0]
 8004a7e:	685b      	ldreq	r3, [r3, #4]
 8004a80:	1809      	addeq	r1, r1, r0
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	e7ed      	b.n	8004a62 <_free_r+0x1e>
 8004a86:	461a      	mov	r2, r3
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	b10b      	cbz	r3, 8004a90 <_free_r+0x4c>
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	d9fa      	bls.n	8004a86 <_free_r+0x42>
 8004a90:	6811      	ldr	r1, [r2, #0]
 8004a92:	1850      	adds	r0, r2, r1
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d10b      	bne.n	8004ab0 <_free_r+0x6c>
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	4401      	add	r1, r0
 8004a9c:	1850      	adds	r0, r2, r1
 8004a9e:	4283      	cmp	r3, r0
 8004aa0:	6011      	str	r1, [r2, #0]
 8004aa2:	d1e0      	bne.n	8004a66 <_free_r+0x22>
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	6053      	str	r3, [r2, #4]
 8004aaa:	4408      	add	r0, r1
 8004aac:	6010      	str	r0, [r2, #0]
 8004aae:	e7da      	b.n	8004a66 <_free_r+0x22>
 8004ab0:	d902      	bls.n	8004ab8 <_free_r+0x74>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	e7d6      	b.n	8004a66 <_free_r+0x22>
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	1821      	adds	r1, r4, r0
 8004abc:	428b      	cmp	r3, r1
 8004abe:	bf04      	itt	eq
 8004ac0:	6819      	ldreq	r1, [r3, #0]
 8004ac2:	685b      	ldreq	r3, [r3, #4]
 8004ac4:	6063      	str	r3, [r4, #4]
 8004ac6:	bf04      	itt	eq
 8004ac8:	1809      	addeq	r1, r1, r0
 8004aca:	6021      	streq	r1, [r4, #0]
 8004acc:	6054      	str	r4, [r2, #4]
 8004ace:	e7ca      	b.n	8004a66 <_free_r+0x22>
 8004ad0:	bd38      	pop	{r3, r4, r5, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200002d8 	.word	0x200002d8

08004ad8 <sbrk_aligned>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	4e0f      	ldr	r6, [pc, #60]	@ (8004b18 <sbrk_aligned+0x40>)
 8004adc:	460c      	mov	r4, r1
 8004ade:	6831      	ldr	r1, [r6, #0]
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	b911      	cbnz	r1, 8004aea <sbrk_aligned+0x12>
 8004ae4:	f000 fba6 	bl	8005234 <_sbrk_r>
 8004ae8:	6030      	str	r0, [r6, #0]
 8004aea:	4621      	mov	r1, r4
 8004aec:	4628      	mov	r0, r5
 8004aee:	f000 fba1 	bl	8005234 <_sbrk_r>
 8004af2:	1c43      	adds	r3, r0, #1
 8004af4:	d103      	bne.n	8004afe <sbrk_aligned+0x26>
 8004af6:	f04f 34ff 	mov.w	r4, #4294967295
 8004afa:	4620      	mov	r0, r4
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
 8004afe:	1cc4      	adds	r4, r0, #3
 8004b00:	f024 0403 	bic.w	r4, r4, #3
 8004b04:	42a0      	cmp	r0, r4
 8004b06:	d0f8      	beq.n	8004afa <sbrk_aligned+0x22>
 8004b08:	1a21      	subs	r1, r4, r0
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 fb92 	bl	8005234 <_sbrk_r>
 8004b10:	3001      	adds	r0, #1
 8004b12:	d1f2      	bne.n	8004afa <sbrk_aligned+0x22>
 8004b14:	e7ef      	b.n	8004af6 <sbrk_aligned+0x1e>
 8004b16:	bf00      	nop
 8004b18:	200002d4 	.word	0x200002d4

08004b1c <_malloc_r>:
 8004b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b20:	1ccd      	adds	r5, r1, #3
 8004b22:	f025 0503 	bic.w	r5, r5, #3
 8004b26:	3508      	adds	r5, #8
 8004b28:	2d0c      	cmp	r5, #12
 8004b2a:	bf38      	it	cc
 8004b2c:	250c      	movcc	r5, #12
 8004b2e:	2d00      	cmp	r5, #0
 8004b30:	4606      	mov	r6, r0
 8004b32:	db01      	blt.n	8004b38 <_malloc_r+0x1c>
 8004b34:	42a9      	cmp	r1, r5
 8004b36:	d904      	bls.n	8004b42 <_malloc_r+0x26>
 8004b38:	230c      	movs	r3, #12
 8004b3a:	6033      	str	r3, [r6, #0]
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c18 <_malloc_r+0xfc>
 8004b46:	f000 f869 	bl	8004c1c <__malloc_lock>
 8004b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b4e:	461c      	mov	r4, r3
 8004b50:	bb44      	cbnz	r4, 8004ba4 <_malloc_r+0x88>
 8004b52:	4629      	mov	r1, r5
 8004b54:	4630      	mov	r0, r6
 8004b56:	f7ff ffbf 	bl	8004ad8 <sbrk_aligned>
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	d158      	bne.n	8004c12 <_malloc_r+0xf6>
 8004b60:	f8d8 4000 	ldr.w	r4, [r8]
 8004b64:	4627      	mov	r7, r4
 8004b66:	2f00      	cmp	r7, #0
 8004b68:	d143      	bne.n	8004bf2 <_malloc_r+0xd6>
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	d04b      	beq.n	8004c06 <_malloc_r+0xea>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	4639      	mov	r1, r7
 8004b72:	4630      	mov	r0, r6
 8004b74:	eb04 0903 	add.w	r9, r4, r3
 8004b78:	f000 fb5c 	bl	8005234 <_sbrk_r>
 8004b7c:	4581      	cmp	r9, r0
 8004b7e:	d142      	bne.n	8004c06 <_malloc_r+0xea>
 8004b80:	6821      	ldr	r1, [r4, #0]
 8004b82:	1a6d      	subs	r5, r5, r1
 8004b84:	4629      	mov	r1, r5
 8004b86:	4630      	mov	r0, r6
 8004b88:	f7ff ffa6 	bl	8004ad8 <sbrk_aligned>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d03a      	beq.n	8004c06 <_malloc_r+0xea>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	442b      	add	r3, r5
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	bb62      	cbnz	r2, 8004bf8 <_malloc_r+0xdc>
 8004b9e:	f8c8 7000 	str.w	r7, [r8]
 8004ba2:	e00f      	b.n	8004bc4 <_malloc_r+0xa8>
 8004ba4:	6822      	ldr	r2, [r4, #0]
 8004ba6:	1b52      	subs	r2, r2, r5
 8004ba8:	d420      	bmi.n	8004bec <_malloc_r+0xd0>
 8004baa:	2a0b      	cmp	r2, #11
 8004bac:	d917      	bls.n	8004bde <_malloc_r+0xc2>
 8004bae:	1961      	adds	r1, r4, r5
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	6025      	str	r5, [r4, #0]
 8004bb4:	bf18      	it	ne
 8004bb6:	6059      	strne	r1, [r3, #4]
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	bf08      	it	eq
 8004bbc:	f8c8 1000 	streq.w	r1, [r8]
 8004bc0:	5162      	str	r2, [r4, r5]
 8004bc2:	604b      	str	r3, [r1, #4]
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f000 f82f 	bl	8004c28 <__malloc_unlock>
 8004bca:	f104 000b 	add.w	r0, r4, #11
 8004bce:	1d23      	adds	r3, r4, #4
 8004bd0:	f020 0007 	bic.w	r0, r0, #7
 8004bd4:	1ac2      	subs	r2, r0, r3
 8004bd6:	bf1c      	itt	ne
 8004bd8:	1a1b      	subne	r3, r3, r0
 8004bda:	50a3      	strne	r3, [r4, r2]
 8004bdc:	e7af      	b.n	8004b3e <_malloc_r+0x22>
 8004bde:	6862      	ldr	r2, [r4, #4]
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	bf0c      	ite	eq
 8004be4:	f8c8 2000 	streq.w	r2, [r8]
 8004be8:	605a      	strne	r2, [r3, #4]
 8004bea:	e7eb      	b.n	8004bc4 <_malloc_r+0xa8>
 8004bec:	4623      	mov	r3, r4
 8004bee:	6864      	ldr	r4, [r4, #4]
 8004bf0:	e7ae      	b.n	8004b50 <_malloc_r+0x34>
 8004bf2:	463c      	mov	r4, r7
 8004bf4:	687f      	ldr	r7, [r7, #4]
 8004bf6:	e7b6      	b.n	8004b66 <_malloc_r+0x4a>
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	d1fb      	bne.n	8004bf8 <_malloc_r+0xdc>
 8004c00:	2300      	movs	r3, #0
 8004c02:	6053      	str	r3, [r2, #4]
 8004c04:	e7de      	b.n	8004bc4 <_malloc_r+0xa8>
 8004c06:	230c      	movs	r3, #12
 8004c08:	6033      	str	r3, [r6, #0]
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 f80c 	bl	8004c28 <__malloc_unlock>
 8004c10:	e794      	b.n	8004b3c <_malloc_r+0x20>
 8004c12:	6005      	str	r5, [r0, #0]
 8004c14:	e7d6      	b.n	8004bc4 <_malloc_r+0xa8>
 8004c16:	bf00      	nop
 8004c18:	200002d8 	.word	0x200002d8

08004c1c <__malloc_lock>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	@ (8004c24 <__malloc_lock+0x8>)
 8004c1e:	f7ff bf07 	b.w	8004a30 <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	200002d0 	.word	0x200002d0

08004c28 <__malloc_unlock>:
 8004c28:	4801      	ldr	r0, [pc, #4]	@ (8004c30 <__malloc_unlock+0x8>)
 8004c2a:	f7ff bf02 	b.w	8004a32 <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	200002d0 	.word	0x200002d0

08004c34 <__ssputs_r>:
 8004c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c38:	688e      	ldr	r6, [r1, #8]
 8004c3a:	461f      	mov	r7, r3
 8004c3c:	42be      	cmp	r6, r7
 8004c3e:	680b      	ldr	r3, [r1, #0]
 8004c40:	4682      	mov	sl, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	4690      	mov	r8, r2
 8004c46:	d82d      	bhi.n	8004ca4 <__ssputs_r+0x70>
 8004c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c50:	d026      	beq.n	8004ca0 <__ssputs_r+0x6c>
 8004c52:	6965      	ldr	r5, [r4, #20]
 8004c54:	6909      	ldr	r1, [r1, #16]
 8004c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c5a:	eba3 0901 	sub.w	r9, r3, r1
 8004c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c62:	1c7b      	adds	r3, r7, #1
 8004c64:	444b      	add	r3, r9
 8004c66:	106d      	asrs	r5, r5, #1
 8004c68:	429d      	cmp	r5, r3
 8004c6a:	bf38      	it	cc
 8004c6c:	461d      	movcc	r5, r3
 8004c6e:	0553      	lsls	r3, r2, #21
 8004c70:	d527      	bpl.n	8004cc2 <__ssputs_r+0x8e>
 8004c72:	4629      	mov	r1, r5
 8004c74:	f7ff ff52 	bl	8004b1c <_malloc_r>
 8004c78:	4606      	mov	r6, r0
 8004c7a:	b360      	cbz	r0, 8004cd6 <__ssputs_r+0xa2>
 8004c7c:	6921      	ldr	r1, [r4, #16]
 8004c7e:	464a      	mov	r2, r9
 8004c80:	f000 fae8 	bl	8005254 <memcpy>
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8e:	81a3      	strh	r3, [r4, #12]
 8004c90:	6126      	str	r6, [r4, #16]
 8004c92:	6165      	str	r5, [r4, #20]
 8004c94:	444e      	add	r6, r9
 8004c96:	eba5 0509 	sub.w	r5, r5, r9
 8004c9a:	6026      	str	r6, [r4, #0]
 8004c9c:	60a5      	str	r5, [r4, #8]
 8004c9e:	463e      	mov	r6, r7
 8004ca0:	42be      	cmp	r6, r7
 8004ca2:	d900      	bls.n	8004ca6 <__ssputs_r+0x72>
 8004ca4:	463e      	mov	r6, r7
 8004ca6:	6820      	ldr	r0, [r4, #0]
 8004ca8:	4632      	mov	r2, r6
 8004caa:	4641      	mov	r1, r8
 8004cac:	f000 faa8 	bl	8005200 <memmove>
 8004cb0:	68a3      	ldr	r3, [r4, #8]
 8004cb2:	1b9b      	subs	r3, r3, r6
 8004cb4:	60a3      	str	r3, [r4, #8]
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	4433      	add	r3, r6
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc2:	462a      	mov	r2, r5
 8004cc4:	f000 fad4 	bl	8005270 <_realloc_r>
 8004cc8:	4606      	mov	r6, r0
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d1e0      	bne.n	8004c90 <__ssputs_r+0x5c>
 8004cce:	6921      	ldr	r1, [r4, #16]
 8004cd0:	4650      	mov	r0, sl
 8004cd2:	f7ff feb7 	bl	8004a44 <_free_r>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	f8ca 3000 	str.w	r3, [sl]
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	e7e9      	b.n	8004cbe <__ssputs_r+0x8a>
	...

08004cec <_svfiprintf_r>:
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	4698      	mov	r8, r3
 8004cf2:	898b      	ldrh	r3, [r1, #12]
 8004cf4:	061b      	lsls	r3, r3, #24
 8004cf6:	b09d      	sub	sp, #116	@ 0x74
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	460d      	mov	r5, r1
 8004cfc:	4614      	mov	r4, r2
 8004cfe:	d510      	bpl.n	8004d22 <_svfiprintf_r+0x36>
 8004d00:	690b      	ldr	r3, [r1, #16]
 8004d02:	b973      	cbnz	r3, 8004d22 <_svfiprintf_r+0x36>
 8004d04:	2140      	movs	r1, #64	@ 0x40
 8004d06:	f7ff ff09 	bl	8004b1c <_malloc_r>
 8004d0a:	6028      	str	r0, [r5, #0]
 8004d0c:	6128      	str	r0, [r5, #16]
 8004d0e:	b930      	cbnz	r0, 8004d1e <_svfiprintf_r+0x32>
 8004d10:	230c      	movs	r3, #12
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	b01d      	add	sp, #116	@ 0x74
 8004d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1e:	2340      	movs	r3, #64	@ 0x40
 8004d20:	616b      	str	r3, [r5, #20]
 8004d22:	2300      	movs	r3, #0
 8004d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d26:	2320      	movs	r3, #32
 8004d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d30:	2330      	movs	r3, #48	@ 0x30
 8004d32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ed0 <_svfiprintf_r+0x1e4>
 8004d36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d3a:	f04f 0901 	mov.w	r9, #1
 8004d3e:	4623      	mov	r3, r4
 8004d40:	469a      	mov	sl, r3
 8004d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d46:	b10a      	cbz	r2, 8004d4c <_svfiprintf_r+0x60>
 8004d48:	2a25      	cmp	r2, #37	@ 0x25
 8004d4a:	d1f9      	bne.n	8004d40 <_svfiprintf_r+0x54>
 8004d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d50:	d00b      	beq.n	8004d6a <_svfiprintf_r+0x7e>
 8004d52:	465b      	mov	r3, fp
 8004d54:	4622      	mov	r2, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f7ff ff6b 	bl	8004c34 <__ssputs_r>
 8004d5e:	3001      	adds	r0, #1
 8004d60:	f000 80a7 	beq.w	8004eb2 <_svfiprintf_r+0x1c6>
 8004d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d66:	445a      	add	r2, fp
 8004d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 809f 	beq.w	8004eb2 <_svfiprintf_r+0x1c6>
 8004d74:	2300      	movs	r3, #0
 8004d76:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d7e:	f10a 0a01 	add.w	sl, sl, #1
 8004d82:	9304      	str	r3, [sp, #16]
 8004d84:	9307      	str	r3, [sp, #28]
 8004d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d8c:	4654      	mov	r4, sl
 8004d8e:	2205      	movs	r2, #5
 8004d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d94:	484e      	ldr	r0, [pc, #312]	@ (8004ed0 <_svfiprintf_r+0x1e4>)
 8004d96:	f7fb fa5b 	bl	8000250 <memchr>
 8004d9a:	9a04      	ldr	r2, [sp, #16]
 8004d9c:	b9d8      	cbnz	r0, 8004dd6 <_svfiprintf_r+0xea>
 8004d9e:	06d0      	lsls	r0, r2, #27
 8004da0:	bf44      	itt	mi
 8004da2:	2320      	movmi	r3, #32
 8004da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004da8:	0711      	lsls	r1, r2, #28
 8004daa:	bf44      	itt	mi
 8004dac:	232b      	movmi	r3, #43	@ 0x2b
 8004dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004db2:	f89a 3000 	ldrb.w	r3, [sl]
 8004db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004db8:	d015      	beq.n	8004de6 <_svfiprintf_r+0xfa>
 8004dba:	9a07      	ldr	r2, [sp, #28]
 8004dbc:	4654      	mov	r4, sl
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	f04f 0c0a 	mov.w	ip, #10
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dca:	3b30      	subs	r3, #48	@ 0x30
 8004dcc:	2b09      	cmp	r3, #9
 8004dce:	d94b      	bls.n	8004e68 <_svfiprintf_r+0x17c>
 8004dd0:	b1b0      	cbz	r0, 8004e00 <_svfiprintf_r+0x114>
 8004dd2:	9207      	str	r2, [sp, #28]
 8004dd4:	e014      	b.n	8004e00 <_svfiprintf_r+0x114>
 8004dd6:	eba0 0308 	sub.w	r3, r0, r8
 8004dda:	fa09 f303 	lsl.w	r3, r9, r3
 8004dde:	4313      	orrs	r3, r2
 8004de0:	9304      	str	r3, [sp, #16]
 8004de2:	46a2      	mov	sl, r4
 8004de4:	e7d2      	b.n	8004d8c <_svfiprintf_r+0xa0>
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	1d19      	adds	r1, r3, #4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	9103      	str	r1, [sp, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfbb      	ittet	lt
 8004df2:	425b      	neglt	r3, r3
 8004df4:	f042 0202 	orrlt.w	r2, r2, #2
 8004df8:	9307      	strge	r3, [sp, #28]
 8004dfa:	9307      	strlt	r3, [sp, #28]
 8004dfc:	bfb8      	it	lt
 8004dfe:	9204      	strlt	r2, [sp, #16]
 8004e00:	7823      	ldrb	r3, [r4, #0]
 8004e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e04:	d10a      	bne.n	8004e1c <_svfiprintf_r+0x130>
 8004e06:	7863      	ldrb	r3, [r4, #1]
 8004e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e0a:	d132      	bne.n	8004e72 <_svfiprintf_r+0x186>
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	1d1a      	adds	r2, r3, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	9203      	str	r2, [sp, #12]
 8004e14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e18:	3402      	adds	r4, #2
 8004e1a:	9305      	str	r3, [sp, #20]
 8004e1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ee0 <_svfiprintf_r+0x1f4>
 8004e20:	7821      	ldrb	r1, [r4, #0]
 8004e22:	2203      	movs	r2, #3
 8004e24:	4650      	mov	r0, sl
 8004e26:	f7fb fa13 	bl	8000250 <memchr>
 8004e2a:	b138      	cbz	r0, 8004e3c <_svfiprintf_r+0x150>
 8004e2c:	9b04      	ldr	r3, [sp, #16]
 8004e2e:	eba0 000a 	sub.w	r0, r0, sl
 8004e32:	2240      	movs	r2, #64	@ 0x40
 8004e34:	4082      	lsls	r2, r0
 8004e36:	4313      	orrs	r3, r2
 8004e38:	3401      	adds	r4, #1
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e40:	4824      	ldr	r0, [pc, #144]	@ (8004ed4 <_svfiprintf_r+0x1e8>)
 8004e42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e46:	2206      	movs	r2, #6
 8004e48:	f7fb fa02 	bl	8000250 <memchr>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d036      	beq.n	8004ebe <_svfiprintf_r+0x1d2>
 8004e50:	4b21      	ldr	r3, [pc, #132]	@ (8004ed8 <_svfiprintf_r+0x1ec>)
 8004e52:	bb1b      	cbnz	r3, 8004e9c <_svfiprintf_r+0x1b0>
 8004e54:	9b03      	ldr	r3, [sp, #12]
 8004e56:	3307      	adds	r3, #7
 8004e58:	f023 0307 	bic.w	r3, r3, #7
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	9303      	str	r3, [sp, #12]
 8004e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e62:	4433      	add	r3, r6
 8004e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e66:	e76a      	b.n	8004d3e <_svfiprintf_r+0x52>
 8004e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	2001      	movs	r0, #1
 8004e70:	e7a8      	b.n	8004dc4 <_svfiprintf_r+0xd8>
 8004e72:	2300      	movs	r3, #0
 8004e74:	3401      	adds	r4, #1
 8004e76:	9305      	str	r3, [sp, #20]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f04f 0c0a 	mov.w	ip, #10
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e84:	3a30      	subs	r2, #48	@ 0x30
 8004e86:	2a09      	cmp	r2, #9
 8004e88:	d903      	bls.n	8004e92 <_svfiprintf_r+0x1a6>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0c6      	beq.n	8004e1c <_svfiprintf_r+0x130>
 8004e8e:	9105      	str	r1, [sp, #20]
 8004e90:	e7c4      	b.n	8004e1c <_svfiprintf_r+0x130>
 8004e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e96:	4604      	mov	r4, r0
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e7f0      	b.n	8004e7e <_svfiprintf_r+0x192>
 8004e9c:	ab03      	add	r3, sp, #12
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	462a      	mov	r2, r5
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8004edc <_svfiprintf_r+0x1f0>)
 8004ea4:	a904      	add	r1, sp, #16
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	f3af 8000 	nop.w
 8004eac:	1c42      	adds	r2, r0, #1
 8004eae:	4606      	mov	r6, r0
 8004eb0:	d1d6      	bne.n	8004e60 <_svfiprintf_r+0x174>
 8004eb2:	89ab      	ldrh	r3, [r5, #12]
 8004eb4:	065b      	lsls	r3, r3, #25
 8004eb6:	f53f af2d 	bmi.w	8004d14 <_svfiprintf_r+0x28>
 8004eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ebc:	e72c      	b.n	8004d18 <_svfiprintf_r+0x2c>
 8004ebe:	ab03      	add	r3, sp, #12
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	462a      	mov	r2, r5
 8004ec4:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <_svfiprintf_r+0x1f0>)
 8004ec6:	a904      	add	r1, sp, #16
 8004ec8:	4638      	mov	r0, r7
 8004eca:	f000 f879 	bl	8004fc0 <_printf_i>
 8004ece:	e7ed      	b.n	8004eac <_svfiprintf_r+0x1c0>
 8004ed0:	0800557c 	.word	0x0800557c
 8004ed4:	08005586 	.word	0x08005586
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	08004c35 	.word	0x08004c35
 8004ee0:	08005582 	.word	0x08005582

08004ee4 <_printf_common>:
 8004ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	4616      	mov	r6, r2
 8004eea:	4698      	mov	r8, r3
 8004eec:	688a      	ldr	r2, [r1, #8]
 8004eee:	690b      	ldr	r3, [r1, #16]
 8004ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	bfb8      	it	lt
 8004ef8:	4613      	movlt	r3, r2
 8004efa:	6033      	str	r3, [r6, #0]
 8004efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f00:	4607      	mov	r7, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	b10a      	cbz	r2, 8004f0a <_printf_common+0x26>
 8004f06:	3301      	adds	r3, #1
 8004f08:	6033      	str	r3, [r6, #0]
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	0699      	lsls	r1, r3, #26
 8004f0e:	bf42      	ittt	mi
 8004f10:	6833      	ldrmi	r3, [r6, #0]
 8004f12:	3302      	addmi	r3, #2
 8004f14:	6033      	strmi	r3, [r6, #0]
 8004f16:	6825      	ldr	r5, [r4, #0]
 8004f18:	f015 0506 	ands.w	r5, r5, #6
 8004f1c:	d106      	bne.n	8004f2c <_printf_common+0x48>
 8004f1e:	f104 0a19 	add.w	sl, r4, #25
 8004f22:	68e3      	ldr	r3, [r4, #12]
 8004f24:	6832      	ldr	r2, [r6, #0]
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	dc26      	bgt.n	8004f7a <_printf_common+0x96>
 8004f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f30:	6822      	ldr	r2, [r4, #0]
 8004f32:	3b00      	subs	r3, #0
 8004f34:	bf18      	it	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	0692      	lsls	r2, r2, #26
 8004f3a:	d42b      	bmi.n	8004f94 <_printf_common+0xb0>
 8004f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f40:	4641      	mov	r1, r8
 8004f42:	4638      	mov	r0, r7
 8004f44:	47c8      	blx	r9
 8004f46:	3001      	adds	r0, #1
 8004f48:	d01e      	beq.n	8004f88 <_printf_common+0xa4>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	6922      	ldr	r2, [r4, #16]
 8004f4e:	f003 0306 	and.w	r3, r3, #6
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	bf02      	ittt	eq
 8004f56:	68e5      	ldreq	r5, [r4, #12]
 8004f58:	6833      	ldreq	r3, [r6, #0]
 8004f5a:	1aed      	subeq	r5, r5, r3
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	bf0c      	ite	eq
 8004f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f64:	2500      	movne	r5, #0
 8004f66:	4293      	cmp	r3, r2
 8004f68:	bfc4      	itt	gt
 8004f6a:	1a9b      	subgt	r3, r3, r2
 8004f6c:	18ed      	addgt	r5, r5, r3
 8004f6e:	2600      	movs	r6, #0
 8004f70:	341a      	adds	r4, #26
 8004f72:	42b5      	cmp	r5, r6
 8004f74:	d11a      	bne.n	8004fac <_printf_common+0xc8>
 8004f76:	2000      	movs	r0, #0
 8004f78:	e008      	b.n	8004f8c <_printf_common+0xa8>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	4641      	mov	r1, r8
 8004f80:	4638      	mov	r0, r7
 8004f82:	47c8      	blx	r9
 8004f84:	3001      	adds	r0, #1
 8004f86:	d103      	bne.n	8004f90 <_printf_common+0xac>
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	3501      	adds	r5, #1
 8004f92:	e7c6      	b.n	8004f22 <_printf_common+0x3e>
 8004f94:	18e1      	adds	r1, r4, r3
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	2030      	movs	r0, #48	@ 0x30
 8004f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f9e:	4422      	add	r2, r4
 8004fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fa8:	3302      	adds	r3, #2
 8004faa:	e7c7      	b.n	8004f3c <_printf_common+0x58>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4622      	mov	r2, r4
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	47c8      	blx	r9
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d0e6      	beq.n	8004f88 <_printf_common+0xa4>
 8004fba:	3601      	adds	r6, #1
 8004fbc:	e7d9      	b.n	8004f72 <_printf_common+0x8e>
	...

08004fc0 <_printf_i>:
 8004fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	7e0f      	ldrb	r7, [r1, #24]
 8004fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fc8:	2f78      	cmp	r7, #120	@ 0x78
 8004fca:	4691      	mov	r9, r2
 8004fcc:	4680      	mov	r8, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fd6:	d807      	bhi.n	8004fe8 <_printf_i+0x28>
 8004fd8:	2f62      	cmp	r7, #98	@ 0x62
 8004fda:	d80a      	bhi.n	8004ff2 <_printf_i+0x32>
 8004fdc:	2f00      	cmp	r7, #0
 8004fde:	f000 80d2 	beq.w	8005186 <_printf_i+0x1c6>
 8004fe2:	2f58      	cmp	r7, #88	@ 0x58
 8004fe4:	f000 80b9 	beq.w	800515a <_printf_i+0x19a>
 8004fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ff0:	e03a      	b.n	8005068 <_printf_i+0xa8>
 8004ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ff6:	2b15      	cmp	r3, #21
 8004ff8:	d8f6      	bhi.n	8004fe8 <_printf_i+0x28>
 8004ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8005000 <_printf_i+0x40>)
 8004ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005000:	08005059 	.word	0x08005059
 8005004:	0800506d 	.word	0x0800506d
 8005008:	08004fe9 	.word	0x08004fe9
 800500c:	08004fe9 	.word	0x08004fe9
 8005010:	08004fe9 	.word	0x08004fe9
 8005014:	08004fe9 	.word	0x08004fe9
 8005018:	0800506d 	.word	0x0800506d
 800501c:	08004fe9 	.word	0x08004fe9
 8005020:	08004fe9 	.word	0x08004fe9
 8005024:	08004fe9 	.word	0x08004fe9
 8005028:	08004fe9 	.word	0x08004fe9
 800502c:	0800516d 	.word	0x0800516d
 8005030:	08005097 	.word	0x08005097
 8005034:	08005127 	.word	0x08005127
 8005038:	08004fe9 	.word	0x08004fe9
 800503c:	08004fe9 	.word	0x08004fe9
 8005040:	0800518f 	.word	0x0800518f
 8005044:	08004fe9 	.word	0x08004fe9
 8005048:	08005097 	.word	0x08005097
 800504c:	08004fe9 	.word	0x08004fe9
 8005050:	08004fe9 	.word	0x08004fe9
 8005054:	0800512f 	.word	0x0800512f
 8005058:	6833      	ldr	r3, [r6, #0]
 800505a:	1d1a      	adds	r2, r3, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6032      	str	r2, [r6, #0]
 8005060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005068:	2301      	movs	r3, #1
 800506a:	e09d      	b.n	80051a8 <_printf_i+0x1e8>
 800506c:	6833      	ldr	r3, [r6, #0]
 800506e:	6820      	ldr	r0, [r4, #0]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	6031      	str	r1, [r6, #0]
 8005074:	0606      	lsls	r6, r0, #24
 8005076:	d501      	bpl.n	800507c <_printf_i+0xbc>
 8005078:	681d      	ldr	r5, [r3, #0]
 800507a:	e003      	b.n	8005084 <_printf_i+0xc4>
 800507c:	0645      	lsls	r5, r0, #25
 800507e:	d5fb      	bpl.n	8005078 <_printf_i+0xb8>
 8005080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005084:	2d00      	cmp	r5, #0
 8005086:	da03      	bge.n	8005090 <_printf_i+0xd0>
 8005088:	232d      	movs	r3, #45	@ 0x2d
 800508a:	426d      	negs	r5, r5
 800508c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005090:	4859      	ldr	r0, [pc, #356]	@ (80051f8 <_printf_i+0x238>)
 8005092:	230a      	movs	r3, #10
 8005094:	e011      	b.n	80050ba <_printf_i+0xfa>
 8005096:	6821      	ldr	r1, [r4, #0]
 8005098:	6833      	ldr	r3, [r6, #0]
 800509a:	0608      	lsls	r0, r1, #24
 800509c:	f853 5b04 	ldr.w	r5, [r3], #4
 80050a0:	d402      	bmi.n	80050a8 <_printf_i+0xe8>
 80050a2:	0649      	lsls	r1, r1, #25
 80050a4:	bf48      	it	mi
 80050a6:	b2ad      	uxthmi	r5, r5
 80050a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050aa:	4853      	ldr	r0, [pc, #332]	@ (80051f8 <_printf_i+0x238>)
 80050ac:	6033      	str	r3, [r6, #0]
 80050ae:	bf14      	ite	ne
 80050b0:	230a      	movne	r3, #10
 80050b2:	2308      	moveq	r3, #8
 80050b4:	2100      	movs	r1, #0
 80050b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ba:	6866      	ldr	r6, [r4, #4]
 80050bc:	60a6      	str	r6, [r4, #8]
 80050be:	2e00      	cmp	r6, #0
 80050c0:	bfa2      	ittt	ge
 80050c2:	6821      	ldrge	r1, [r4, #0]
 80050c4:	f021 0104 	bicge.w	r1, r1, #4
 80050c8:	6021      	strge	r1, [r4, #0]
 80050ca:	b90d      	cbnz	r5, 80050d0 <_printf_i+0x110>
 80050cc:	2e00      	cmp	r6, #0
 80050ce:	d04b      	beq.n	8005168 <_printf_i+0x1a8>
 80050d0:	4616      	mov	r6, r2
 80050d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050d6:	fb03 5711 	mls	r7, r3, r1, r5
 80050da:	5dc7      	ldrb	r7, [r0, r7]
 80050dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050e0:	462f      	mov	r7, r5
 80050e2:	42bb      	cmp	r3, r7
 80050e4:	460d      	mov	r5, r1
 80050e6:	d9f4      	bls.n	80050d2 <_printf_i+0x112>
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d10b      	bne.n	8005104 <_printf_i+0x144>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	07df      	lsls	r7, r3, #31
 80050f0:	d508      	bpl.n	8005104 <_printf_i+0x144>
 80050f2:	6923      	ldr	r3, [r4, #16]
 80050f4:	6861      	ldr	r1, [r4, #4]
 80050f6:	4299      	cmp	r1, r3
 80050f8:	bfde      	ittt	le
 80050fa:	2330      	movle	r3, #48	@ 0x30
 80050fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005100:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005104:	1b92      	subs	r2, r2, r6
 8005106:	6122      	str	r2, [r4, #16]
 8005108:	f8cd a000 	str.w	sl, [sp]
 800510c:	464b      	mov	r3, r9
 800510e:	aa03      	add	r2, sp, #12
 8005110:	4621      	mov	r1, r4
 8005112:	4640      	mov	r0, r8
 8005114:	f7ff fee6 	bl	8004ee4 <_printf_common>
 8005118:	3001      	adds	r0, #1
 800511a:	d14a      	bne.n	80051b2 <_printf_i+0x1f2>
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	b004      	add	sp, #16
 8005122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	f043 0320 	orr.w	r3, r3, #32
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	4833      	ldr	r0, [pc, #204]	@ (80051fc <_printf_i+0x23c>)
 8005130:	2778      	movs	r7, #120	@ 0x78
 8005132:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	6831      	ldr	r1, [r6, #0]
 800513a:	061f      	lsls	r7, r3, #24
 800513c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005140:	d402      	bmi.n	8005148 <_printf_i+0x188>
 8005142:	065f      	lsls	r7, r3, #25
 8005144:	bf48      	it	mi
 8005146:	b2ad      	uxthmi	r5, r5
 8005148:	6031      	str	r1, [r6, #0]
 800514a:	07d9      	lsls	r1, r3, #31
 800514c:	bf44      	itt	mi
 800514e:	f043 0320 	orrmi.w	r3, r3, #32
 8005152:	6023      	strmi	r3, [r4, #0]
 8005154:	b11d      	cbz	r5, 800515e <_printf_i+0x19e>
 8005156:	2310      	movs	r3, #16
 8005158:	e7ac      	b.n	80050b4 <_printf_i+0xf4>
 800515a:	4827      	ldr	r0, [pc, #156]	@ (80051f8 <_printf_i+0x238>)
 800515c:	e7e9      	b.n	8005132 <_printf_i+0x172>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	f023 0320 	bic.w	r3, r3, #32
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	e7f6      	b.n	8005156 <_printf_i+0x196>
 8005168:	4616      	mov	r6, r2
 800516a:	e7bd      	b.n	80050e8 <_printf_i+0x128>
 800516c:	6833      	ldr	r3, [r6, #0]
 800516e:	6825      	ldr	r5, [r4, #0]
 8005170:	6961      	ldr	r1, [r4, #20]
 8005172:	1d18      	adds	r0, r3, #4
 8005174:	6030      	str	r0, [r6, #0]
 8005176:	062e      	lsls	r6, r5, #24
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	d501      	bpl.n	8005180 <_printf_i+0x1c0>
 800517c:	6019      	str	r1, [r3, #0]
 800517e:	e002      	b.n	8005186 <_printf_i+0x1c6>
 8005180:	0668      	lsls	r0, r5, #25
 8005182:	d5fb      	bpl.n	800517c <_printf_i+0x1bc>
 8005184:	8019      	strh	r1, [r3, #0]
 8005186:	2300      	movs	r3, #0
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	4616      	mov	r6, r2
 800518c:	e7bc      	b.n	8005108 <_printf_i+0x148>
 800518e:	6833      	ldr	r3, [r6, #0]
 8005190:	1d1a      	adds	r2, r3, #4
 8005192:	6032      	str	r2, [r6, #0]
 8005194:	681e      	ldr	r6, [r3, #0]
 8005196:	6862      	ldr	r2, [r4, #4]
 8005198:	2100      	movs	r1, #0
 800519a:	4630      	mov	r0, r6
 800519c:	f7fb f858 	bl	8000250 <memchr>
 80051a0:	b108      	cbz	r0, 80051a6 <_printf_i+0x1e6>
 80051a2:	1b80      	subs	r0, r0, r6
 80051a4:	6060      	str	r0, [r4, #4]
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	6123      	str	r3, [r4, #16]
 80051aa:	2300      	movs	r3, #0
 80051ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051b0:	e7aa      	b.n	8005108 <_printf_i+0x148>
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	4632      	mov	r2, r6
 80051b6:	4649      	mov	r1, r9
 80051b8:	4640      	mov	r0, r8
 80051ba:	47d0      	blx	sl
 80051bc:	3001      	adds	r0, #1
 80051be:	d0ad      	beq.n	800511c <_printf_i+0x15c>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	079b      	lsls	r3, r3, #30
 80051c4:	d413      	bmi.n	80051ee <_printf_i+0x22e>
 80051c6:	68e0      	ldr	r0, [r4, #12]
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	4298      	cmp	r0, r3
 80051cc:	bfb8      	it	lt
 80051ce:	4618      	movlt	r0, r3
 80051d0:	e7a6      	b.n	8005120 <_printf_i+0x160>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4632      	mov	r2, r6
 80051d6:	4649      	mov	r1, r9
 80051d8:	4640      	mov	r0, r8
 80051da:	47d0      	blx	sl
 80051dc:	3001      	adds	r0, #1
 80051de:	d09d      	beq.n	800511c <_printf_i+0x15c>
 80051e0:	3501      	adds	r5, #1
 80051e2:	68e3      	ldr	r3, [r4, #12]
 80051e4:	9903      	ldr	r1, [sp, #12]
 80051e6:	1a5b      	subs	r3, r3, r1
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	dcf2      	bgt.n	80051d2 <_printf_i+0x212>
 80051ec:	e7eb      	b.n	80051c6 <_printf_i+0x206>
 80051ee:	2500      	movs	r5, #0
 80051f0:	f104 0619 	add.w	r6, r4, #25
 80051f4:	e7f5      	b.n	80051e2 <_printf_i+0x222>
 80051f6:	bf00      	nop
 80051f8:	0800558d 	.word	0x0800558d
 80051fc:	0800559e 	.word	0x0800559e

08005200 <memmove>:
 8005200:	4288      	cmp	r0, r1
 8005202:	b510      	push	{r4, lr}
 8005204:	eb01 0402 	add.w	r4, r1, r2
 8005208:	d902      	bls.n	8005210 <memmove+0x10>
 800520a:	4284      	cmp	r4, r0
 800520c:	4623      	mov	r3, r4
 800520e:	d807      	bhi.n	8005220 <memmove+0x20>
 8005210:	1e43      	subs	r3, r0, #1
 8005212:	42a1      	cmp	r1, r4
 8005214:	d008      	beq.n	8005228 <memmove+0x28>
 8005216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800521a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800521e:	e7f8      	b.n	8005212 <memmove+0x12>
 8005220:	4402      	add	r2, r0
 8005222:	4601      	mov	r1, r0
 8005224:	428a      	cmp	r2, r1
 8005226:	d100      	bne.n	800522a <memmove+0x2a>
 8005228:	bd10      	pop	{r4, pc}
 800522a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800522e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005232:	e7f7      	b.n	8005224 <memmove+0x24>

08005234 <_sbrk_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d06      	ldr	r5, [pc, #24]	@ (8005250 <_sbrk_r+0x1c>)
 8005238:	2300      	movs	r3, #0
 800523a:	4604      	mov	r4, r0
 800523c:	4608      	mov	r0, r1
 800523e:	602b      	str	r3, [r5, #0]
 8005240:	f7fc f81c 	bl	800127c <_sbrk>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_sbrk_r+0x1a>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_sbrk_r+0x1a>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	200002cc 	.word	0x200002cc

08005254 <memcpy>:
 8005254:	440a      	add	r2, r1
 8005256:	4291      	cmp	r1, r2
 8005258:	f100 33ff 	add.w	r3, r0, #4294967295
 800525c:	d100      	bne.n	8005260 <memcpy+0xc>
 800525e:	4770      	bx	lr
 8005260:	b510      	push	{r4, lr}
 8005262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800526a:	4291      	cmp	r1, r2
 800526c:	d1f9      	bne.n	8005262 <memcpy+0xe>
 800526e:	bd10      	pop	{r4, pc}

08005270 <_realloc_r>:
 8005270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005274:	4680      	mov	r8, r0
 8005276:	4615      	mov	r5, r2
 8005278:	460c      	mov	r4, r1
 800527a:	b921      	cbnz	r1, 8005286 <_realloc_r+0x16>
 800527c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005280:	4611      	mov	r1, r2
 8005282:	f7ff bc4b 	b.w	8004b1c <_malloc_r>
 8005286:	b92a      	cbnz	r2, 8005294 <_realloc_r+0x24>
 8005288:	f7ff fbdc 	bl	8004a44 <_free_r>
 800528c:	2400      	movs	r4, #0
 800528e:	4620      	mov	r0, r4
 8005290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005294:	f000 f81a 	bl	80052cc <_malloc_usable_size_r>
 8005298:	4285      	cmp	r5, r0
 800529a:	4606      	mov	r6, r0
 800529c:	d802      	bhi.n	80052a4 <_realloc_r+0x34>
 800529e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052a2:	d8f4      	bhi.n	800528e <_realloc_r+0x1e>
 80052a4:	4629      	mov	r1, r5
 80052a6:	4640      	mov	r0, r8
 80052a8:	f7ff fc38 	bl	8004b1c <_malloc_r>
 80052ac:	4607      	mov	r7, r0
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d0ec      	beq.n	800528c <_realloc_r+0x1c>
 80052b2:	42b5      	cmp	r5, r6
 80052b4:	462a      	mov	r2, r5
 80052b6:	4621      	mov	r1, r4
 80052b8:	bf28      	it	cs
 80052ba:	4632      	movcs	r2, r6
 80052bc:	f7ff ffca 	bl	8005254 <memcpy>
 80052c0:	4621      	mov	r1, r4
 80052c2:	4640      	mov	r0, r8
 80052c4:	f7ff fbbe 	bl	8004a44 <_free_r>
 80052c8:	463c      	mov	r4, r7
 80052ca:	e7e0      	b.n	800528e <_realloc_r+0x1e>

080052cc <_malloc_usable_size_r>:
 80052cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d0:	1f18      	subs	r0, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfbc      	itt	lt
 80052d6:	580b      	ldrlt	r3, [r1, r0]
 80052d8:	18c0      	addlt	r0, r0, r3
 80052da:	4770      	bx	lr

080052dc <_init>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr

080052e8 <_fini>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr
