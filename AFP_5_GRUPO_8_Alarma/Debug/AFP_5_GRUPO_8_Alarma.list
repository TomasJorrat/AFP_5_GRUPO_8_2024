
AFP_5_GRUPO_8_Alarma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000534c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800552c  0800552c  0000652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e8  080057e8  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  080057e8  080057e8  000067e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057f0  080057f0  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057f0  080057f0  000067f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057f4  080057f4  000067f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080057f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000084  0800587c  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800587c  00007318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd12  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274d  00000000  00000000  00014dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00017518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000981  00000000  00000000  00018168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c2a  00000000  00000000  00018ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c87  00000000  00000000  0003a713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8ea4  00000000  00000000  0004c39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011523e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  00115284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001188fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005514 	.word	0x08005514

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	08005514 	.word	0x08005514

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f001 fca9 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f001 f88f 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /*****************************************************************************************************************/
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f001 f8f9 	bl	80017e4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005f2:	f001 fb65 	bl	8001cc0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 ff61 	bl	80014bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  keypad_init();
 80005fa:	f001 fb8f 	bl	8001d1c <keypad_init>
  BT_Test(); 						// Enviar mensaje de prueba al HC-05
 80005fe:	f000 fd75 	bl	80010ec <BT_Test>
  HAL_Delay(30);					// Delay bloqueante minimo necesario para que pueda recibir datos el integrado del LCD
 8000602:	201e      	movs	r0, #30
 8000604:	f001 fd0c 	bl	8002020 <HAL_Delay>
  lcd_init();
 8000608:	f001 fa86 	bl	8001b18 <lcd_init>
  DisplayMainMenu(); 				// Muestra el menu principal en la pantalla
 800060c:	f000 f830 	bl	8000670 <DisplayMainMenu>
  delayInit(&DelayGRAL_1,20000);
 8000610:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000614:	4814      	ldr	r0, [pc, #80]	@ (8000668 <main+0x88>)
 8000616:	f001 f829 	bl	800166c <delayInit>
				  CheckSensors(); 				// Revisa los sensores mientras la alarma está activa
				  break;
		  }
	  }*/
/******************************************************************************************************************************************/
	 char key = keypad_get_key(); // Modificacion del if dentro del switch
 800061a:	f001 fc87 	bl	8001f2c <keypad_get_key>
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	  switch (currentState) {
 8000622:	4b12      	ldr	r3, [pc, #72]	@ (800066c <main+0x8c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b04      	cmp	r3, #4
 8000628:	dcf7      	bgt.n	800061a <main+0x3a>
 800062a:	2b02      	cmp	r3, #2
 800062c:	da14      	bge.n	8000658 <main+0x78>
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <main+0x58>
 8000632:	2b01      	cmp	r3, #1
 8000634:	d008      	beq.n	8000648 <main+0x68>
 8000636:	e015      	b.n	8000664 <main+0x84>
	      case MAIN_MENU:
	          if (key != '\0') HandleMainMenuInput(key);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00f      	beq.n	800065e <main+0x7e>
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f833 	bl	80006ac <HandleMainMenuInput>
	          break;
 8000646:	e00a      	b.n	800065e <main+0x7e>
	      case ALARM_MENU:
	          if (key != '\0') HandleAlarmMenuInput(key);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d009      	beq.n	8000662 <main+0x82>
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f865 	bl	8000720 <HandleAlarmMenuInput>
	          break;
 8000656:	e004      	b.n	8000662 <main+0x82>
	      case CHANGE_PASS_MENU:
	      case TEST_ALARM_MENU:
	      case ACTIVE_ALARM:
	          CheckSensors();
 8000658:	f000 fcde 	bl	8001018 <CheckSensors>
	          break;
 800065c:	e002      	b.n	8000664 <main+0x84>
	          break;
 800065e:	bf00      	nop
 8000660:	e7db      	b.n	800061a <main+0x3a>
	          break;
 8000662:	bf00      	nop
  {
 8000664:	e7d9      	b.n	800061a <main+0x3a>
 8000666:	bf00      	nop
 8000668:	200000b0 	.word	0x200000b0
 800066c:	200000a5 	.word	0x200000a5

08000670 <DisplayMainMenu>:
/*****************************************************************************************************************
 * @brief: Función para mostrar el menú principal
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayMainMenu(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    lcd_clear();
 8000674:	f001 fa7b 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000678:	2100      	movs	r1, #0
 800067a:	2000      	movs	r0, #0
 800067c:	f001 fa81 	bl	8001b82 <lcd_set_cursor>
    lcd_print("1.Activar *.Mas");
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <DisplayMainMenu+0x30>)
 8000682:	f001 fa98 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f001 fa7a 	bl	8001b82 <lcd_set_cursor>
    lcd_print("2.Cambiar Pass");
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <DisplayMainMenu+0x34>)
 8000690:	f001 fa91 	bl	8001bb6 <lcd_print>
    currentState = MAIN_MENU;
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <DisplayMainMenu+0x38>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	0800552c 	.word	0x0800552c
 80006a4:	0800553c 	.word	0x0800553c
 80006a8:	200000a5 	.word	0x200000a5

080006ac <HandleMainMenuInput>:
/*****************************************************************************************************************
 * @brief: Manejo de la entrada del menú principal
 * @param: recibe una variable tipo caracter para entrar en las distintas opciones de menu
 * @retval: void
******************************************************************************************************************/
void HandleMainMenuInput(char key) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b32      	cmp	r3, #50	@ 0x32
 80006ba:	d008      	beq.n	80006ce <HandleMainMenuInput+0x22>
 80006bc:	2b32      	cmp	r3, #50	@ 0x32
 80006be:	dc0c      	bgt.n	80006da <HandleMainMenuInput+0x2e>
 80006c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80006c2:	d007      	beq.n	80006d4 <HandleMainMenuInput+0x28>
 80006c4:	2b31      	cmp	r3, #49	@ 0x31
 80006c6:	d108      	bne.n	80006da <HandleMainMenuInput+0x2e>
        case '1':
            DisplayAlarmMenu();
 80006c8:	f000 f80c 	bl	80006e4 <DisplayAlarmMenu>
            break;
 80006cc:	e005      	b.n	80006da <HandleMainMenuInput+0x2e>
        case '2':
            DisplayChangePassMenu();
 80006ce:	f000 fad3 	bl	8000c78 <DisplayChangePassMenu>
            break;
 80006d2:	e002      	b.n	80006da <HandleMainMenuInput+0x2e>
        case '*':
            HandleSubMenu();
 80006d4:	f000 fc2c 	bl	8000f30 <HandleSubMenu>
            break;
 80006d8:	bf00      	nop
    }
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <DisplayAlarmMenu>:
/*****************************************************************************************************************
 * @brief: Mostrar menú para activar alarma
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayAlarmMenu(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
    lcd_clear();
 80006e8:	f001 fa41 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 80006ec:	2100      	movs	r1, #0
 80006ee:	2000      	movs	r0, #0
 80006f0:	f001 fa47 	bl	8001b82 <lcd_set_cursor>
    lcd_print("1.Sist Completo");
 80006f4:	4807      	ldr	r0, [pc, #28]	@ (8000714 <DisplayAlarmMenu+0x30>)
 80006f6:	f001 fa5e 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2001      	movs	r0, #1
 80006fe:	f001 fa40 	bl	8001b82 <lcd_set_cursor>
    lcd_print("2.Sin Sensor Mov");
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <DisplayAlarmMenu+0x34>)
 8000704:	f001 fa57 	bl	8001bb6 <lcd_print>
    currentState = ALARM_MENU;
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <DisplayAlarmMenu+0x38>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	0800554c 	.word	0x0800554c
 8000718:	0800555c 	.word	0x0800555c
 800071c:	200000a5 	.word	0x200000a5

08000720 <HandleAlarmMenuInput>:
/*****************************************************************************************************************
 * @brief: Manejo de la entrada del menú de alarma
 * @param: Recibe variable tipo caracter
 * @retval:
******************************************************************************************************************/
void HandleAlarmMenuInput(char key) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b32      	cmp	r3, #50	@ 0x32
 800072e:	d00d      	beq.n	800074c <HandleAlarmMenuInput+0x2c>
 8000730:	2b32      	cmp	r3, #50	@ 0x32
 8000732:	dc35      	bgt.n	80007a0 <HandleAlarmMenuInput+0x80>
 8000734:	2b2a      	cmp	r3, #42	@ 0x2a
 8000736:	d011      	beq.n	800075c <HandleAlarmMenuInput+0x3c>
 8000738:	2b31      	cmp	r3, #49	@ 0x31
 800073a:	d131      	bne.n	80007a0 <HandleAlarmMenuInput+0x80>
        case '1':  // Modo "Sistema Completo"
            includeMotionSensor = true;
 800073c:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <HandleAlarmMenuInput+0x88>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000742:	491a      	ldr	r1, [pc, #104]	@ (80007ac <HandleAlarmMenuInput+0x8c>)
 8000744:	481a      	ldr	r0, [pc, #104]	@ (80007b0 <HandleAlarmMenuInput+0x90>)
 8000746:	f000 f83b 	bl	80007c0 <RequestPassword>
            break;
 800074a:	e029      	b.n	80007a0 <HandleAlarmMenuInput+0x80>
        case '2':  // Modo "Sin Sensor de Movimiento"
            includeMotionSensor = false;
 800074c:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <HandleAlarmMenuInput+0x88>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000752:	4916      	ldr	r1, [pc, #88]	@ (80007ac <HandleAlarmMenuInput+0x8c>)
 8000754:	4816      	ldr	r0, [pc, #88]	@ (80007b0 <HandleAlarmMenuInput+0x90>)
 8000756:	f000 f833 	bl	80007c0 <RequestPassword>
            break;
 800075a:	e021      	b.n	80007a0 <HandleAlarmMenuInput+0x80>
        case '*':  // Si el usuario presiona "*", volver al menú principal
            lcd_clear();
 800075c:	f001 fa07 	bl	8001b6e <lcd_clear>
            lcd_set_cursor(0, 0);
 8000760:	2100      	movs	r1, #0
 8000762:	2000      	movs	r0, #0
 8000764:	f001 fa0d 	bl	8001b82 <lcd_set_cursor>
            lcd_print("Operacion");
 8000768:	4812      	ldr	r0, [pc, #72]	@ (80007b4 <HandleAlarmMenuInput+0x94>)
 800076a:	f001 fa24 	bl	8001bb6 <lcd_print>
            lcd_set_cursor(1, 0);
 800076e:	2100      	movs	r1, #0
 8000770:	2001      	movs	r0, #1
 8000772:	f001 fa06 	bl	8001b82 <lcd_set_cursor>
            lcd_print("Cancelada");
 8000776:	4810      	ldr	r0, [pc, #64]	@ (80007b8 <HandleAlarmMenuInput+0x98>)
 8000778:	f001 fa1d 	bl	8001bb6 <lcd_print>
            //HAL_Delay(2000);			// Delay bloqueante necesario para muestreo de mensaje
            delayInit(&LCD_Muestro, 2000);
 800077c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000780:	480e      	ldr	r0, [pc, #56]	@ (80007bc <HandleAlarmMenuInput+0x9c>)
 8000782:	f000 ff73 	bl	800166c <delayInit>
            while(!delayRead(&LCD_Muestro)){
 8000786:	bf00      	nop
 8000788:	480c      	ldr	r0, [pc, #48]	@ (80007bc <HandleAlarmMenuInput+0x9c>)
 800078a:	f000 ff83 	bl	8001694 <delayRead>
 800078e:	4603      	mov	r3, r0
 8000790:	f083 0301 	eor.w	r3, r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f6      	bne.n	8000788 <HandleAlarmMenuInput+0x68>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();  		// Volver al menú principal
 800079a:	f7ff ff69 	bl	8000670 <DisplayMainMenu>
            break;
 800079e:	bf00      	nop
    }
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000a6 	.word	0x200000a6
 80007ac:	080006e5 	.word	0x080006e5
 80007b0:	0800098d 	.word	0x0800098d
 80007b4:	08005570 	.word	0x08005570
 80007b8:	0800557c 	.word	0x0800557c
 80007bc:	200000c8 	.word	0x200000c8

080007c0 <RequestPassword>:
/********************************************************************************************************************************
 * @brief: Solicitud de contraseña al usuario
 * @param: Recibe funciones, posibilidades: opc1 =(Activate Alarm, DisplayAlarmMenu), opc2= (DeactivateAlarm, IncorrectPassword)
 * @retval: void
********************************************************************************************************************************/
void RequestPassword(void (*onSuccess)(void), void (*onFailure)(void)) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
    while (1) { // Bucle para reintentar si la contraseña es incorrecta
        lcd_clear();
 80007ca:	f001 f9d0 	bl	8001b6e <lcd_clear>
        lcd_set_cursor(0, 0);
 80007ce:	2100      	movs	r1, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	f001 f9d6 	bl	8001b82 <lcd_set_cursor>
        lcd_print("Contrasena:____");
 80007d6:	4860      	ldr	r0, [pc, #384]	@ (8000958 <RequestPassword+0x198>)
 80007d8:	f001 f9ed 	bl	8001bb6 <lcd_print>
        memset(inputBuffer, 0, sizeof(inputBuffer));		// Re-incializa la variable en [0000]
 80007dc:	2205      	movs	r2, #5
 80007de:	2100      	movs	r1, #0
 80007e0:	485e      	ldr	r0, [pc, #376]	@ (800095c <RequestPassword+0x19c>)
 80007e2:	f004 fa0f 	bl	8004c04 <memset>
        inputIndex = 0;
 80007e6:	4b5e      	ldr	r3, [pc, #376]	@ (8000960 <RequestPassword+0x1a0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]

        //uint32_t startTime = HAL_GetTick();  // Guardar el tiempo de inicio
        delayInit(&DelayGRAL_1, 20000);
 80007ec:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80007f0:	485c      	ldr	r0, [pc, #368]	@ (8000964 <RequestPassword+0x1a4>)
 80007f2:	f000 ff3b 	bl	800166c <delayInit>
        while (1) {

            if (delayRead(&DelayGRAL_1)) { 			// Si pasan más de 20 segundos sin entrada
 80007f6:	485b      	ldr	r0, [pc, #364]	@ (8000964 <RequestPassword+0x1a4>)
 80007f8:	f000 ff4c 	bl	8001694 <delayRead>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d021      	beq.n	8000846 <RequestPassword+0x86>
                lcd_clear();
 8000802:	f001 f9b4 	bl	8001b6e <lcd_clear>
                lcd_set_cursor(0, 0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f001 f9ba 	bl	8001b82 <lcd_set_cursor>
                lcd_print("Tiempo agotado");
 800080e:	4856      	ldr	r0, [pc, #344]	@ (8000968 <RequestPassword+0x1a8>)
 8000810:	f001 f9d1 	bl	8001bb6 <lcd_print>
                lcd_set_cursor(1, 0);
 8000814:	2100      	movs	r1, #0
 8000816:	2001      	movs	r0, #1
 8000818:	f001 f9b3 	bl	8001b82 <lcd_set_cursor>
                lcd_print("Volviendo...");
 800081c:	4853      	ldr	r0, [pc, #332]	@ (800096c <RequestPassword+0x1ac>)
 800081e:	f001 f9ca 	bl	8001bb6 <lcd_print>

                //HAL_Delay(2000);				// Retardo bloqueante necesario para muestreo de mensaje
                delayInit(&LCD_Muestro, 2000);
 8000822:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000826:	4852      	ldr	r0, [pc, #328]	@ (8000970 <RequestPassword+0x1b0>)
 8000828:	f000 ff20 	bl	800166c <delayInit>
                while(!delayRead(&LCD_Muestro)){
 800082c:	bf00      	nop
 800082e:	4850      	ldr	r0, [pc, #320]	@ (8000970 <RequestPassword+0x1b0>)
 8000830:	f000 ff30 	bl	8001694 <delayRead>
 8000834:	4603      	mov	r3, r0
 8000836:	f083 0301 	eor.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f6      	bne.n	800082e <RequestPassword+0x6e>
                	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                }
                DisplayMainMenu();  			// Volver al menú principal
 8000840:	f7ff ff16 	bl	8000670 <DisplayMainMenu>
                return;
 8000844:	e085      	b.n	8000952 <RequestPassword+0x192>
            }

            char key = keypad_get_key();
 8000846:	f001 fb71 	bl	8001f2c <keypad_get_key>
 800084a:	4603      	mov	r3, r0
 800084c:	73fb      	strb	r3, [r7, #15]

            if (key != '\0') {
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0d0      	beq.n	80007f6 <RequestPassword+0x36>
                //startTime = HAL_GetTick();  // Reiniciar el temporizador // Estaria demas si se usa
            	delayInit(&DelayGRAL_1, 20000);
 8000854:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000858:	4842      	ldr	r0, [pc, #264]	@ (8000964 <RequestPassword+0x1a4>)
 800085a:	f000 ff07 	bl	800166c <delayInit>
                if (key == '*') {  // Si presiona "*", vuelve al menú principal
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	2b2a      	cmp	r3, #42	@ 0x2a
 8000862:	d121      	bne.n	80008a8 <RequestPassword+0xe8>
                    lcd_clear();
 8000864:	f001 f983 	bl	8001b6e <lcd_clear>
                    lcd_set_cursor(0, 0);
 8000868:	2100      	movs	r1, #0
 800086a:	2000      	movs	r0, #0
 800086c:	f001 f989 	bl	8001b82 <lcd_set_cursor>
                    lcd_print("Operacion");
 8000870:	4840      	ldr	r0, [pc, #256]	@ (8000974 <RequestPassword+0x1b4>)
 8000872:	f001 f9a0 	bl	8001bb6 <lcd_print>
                    lcd_set_cursor(1, 0);
 8000876:	2100      	movs	r1, #0
 8000878:	2001      	movs	r0, #1
 800087a:	f001 f982 	bl	8001b82 <lcd_set_cursor>
                    lcd_print("Cancelada");
 800087e:	483e      	ldr	r0, [pc, #248]	@ (8000978 <RequestPassword+0x1b8>)
 8000880:	f001 f999 	bl	8001bb6 <lcd_print>
                    //HAL_Delay(2000);
                    delayInit(&LCD_Muestro, 2000);
 8000884:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000888:	4839      	ldr	r0, [pc, #228]	@ (8000970 <RequestPassword+0x1b0>)
 800088a:	f000 feef 	bl	800166c <delayInit>
                    while(!delayRead(&LCD_Muestro)){
 800088e:	bf00      	nop
 8000890:	4837      	ldr	r0, [pc, #220]	@ (8000970 <RequestPassword+0x1b0>)
 8000892:	f000 feff 	bl	8001694 <delayRead>
 8000896:	4603      	mov	r3, r0
 8000898:	f083 0301 	eor.w	r3, r3, #1
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f6      	bne.n	8000890 <RequestPassword+0xd0>
                    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                    }
                    DisplayMainMenu();  // Volver al menú principal
 80008a2:	f7ff fee5 	bl	8000670 <DisplayMainMenu>
                    return;
 80008a6:	e054      	b.n	8000952 <RequestPassword+0x192>
                }

                if (key >= '0' && key <= '9' && inputIndex < 4) {
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80008ac:	d91c      	bls.n	80008e8 <RequestPassword+0x128>
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	2b39      	cmp	r3, #57	@ 0x39
 80008b2:	d819      	bhi.n	80008e8 <RequestPassword+0x128>
 80008b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <RequestPassword+0x1a0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d815      	bhi.n	80008e8 <RequestPassword+0x128>
                    inputBuffer[inputIndex++] = key;
 80008bc:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <RequestPassword+0x1a0>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	b2d1      	uxtb	r1, r2
 80008c4:	4a26      	ldr	r2, [pc, #152]	@ (8000960 <RequestPassword+0x1a0>)
 80008c6:	7011      	strb	r1, [r2, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4a24      	ldr	r2, [pc, #144]	@ (800095c <RequestPassword+0x19c>)
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	5453      	strb	r3, [r2, r1]
                    lcd_set_cursor(1, 10 + inputIndex - 1);
 80008d0:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <RequestPassword+0x1a0>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	3309      	adds	r3, #9
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4619      	mov	r1, r3
 80008da:	2001      	movs	r0, #1
 80008dc:	f001 f951 	bl	8001b82 <lcd_set_cursor>
                    lcd_print("*");
 80008e0:	4826      	ldr	r0, [pc, #152]	@ (800097c <RequestPassword+0x1bc>)
 80008e2:	f001 f968 	bl	8001bb6 <lcd_print>
 80008e6:	e032      	b.n	800094e <RequestPassword+0x18e>
                }else if (key == '#') { //  Cuando se presiona "#", verifica la clave
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	2b23      	cmp	r3, #35	@ 0x23
 80008ec:	d183      	bne.n	80007f6 <RequestPassword+0x36>
                    inputBuffer[inputIndex] = '\0';
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <RequestPassword+0x1a0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b19      	ldr	r3, [pc, #100]	@ (800095c <RequestPassword+0x19c>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	5499      	strb	r1, [r3, r2]
                    if (strcmp(inputBuffer, currentPassword) == 0) {// strcmp compara 2 cadenas de caractares y devuelve un entero =0 si son iguales
 80008fa:	4921      	ldr	r1, [pc, #132]	@ (8000980 <RequestPassword+0x1c0>)
 80008fc:	4817      	ldr	r0, [pc, #92]	@ (800095c <RequestPassword+0x19c>)
 80008fe:	f7ff fc8f 	bl	8000220 <strcmp>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <RequestPassword+0x14e>
                        onSuccess(); // Si la clave es correcta, sale de la función y retorna a la funcion ActivateAlarm
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4798      	blx	r3
                        return;
 800090c:	e021      	b.n	8000952 <RequestPassword+0x192>
                    } else {
                        //  Si la contraseña es incorrecta, mostrar mensaje y volver a pedirla
                        lcd_clear();
 800090e:	f001 f92e 	bl	8001b6e <lcd_clear>
                        lcd_set_cursor(0, 0);
 8000912:	2100      	movs	r1, #0
 8000914:	2000      	movs	r0, #0
 8000916:	f001 f934 	bl	8001b82 <lcd_set_cursor>
                        lcd_print("Contrasena");
 800091a:	481a      	ldr	r0, [pc, #104]	@ (8000984 <RequestPassword+0x1c4>)
 800091c:	f001 f94b 	bl	8001bb6 <lcd_print>
                        lcd_set_cursor(1, 0);
 8000920:	2100      	movs	r1, #0
 8000922:	2001      	movs	r0, #1
 8000924:	f001 f92d 	bl	8001b82 <lcd_set_cursor>
                        lcd_print("Incorrecta");
 8000928:	4817      	ldr	r0, [pc, #92]	@ (8000988 <RequestPassword+0x1c8>)
 800092a:	f001 f944 	bl	8001bb6 <lcd_print>
                        //HAL_Delay(2000);			// VERIFICAR FISICAMENTE EL TIEMPO NECESARIO...
                        delayInit(&LCD_Muestro, 2000);
 800092e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000932:	480f      	ldr	r0, [pc, #60]	@ (8000970 <RequestPassword+0x1b0>)
 8000934:	f000 fe9a 	bl	800166c <delayInit>
                        while(!delayRead(&LCD_Muestro)){
 8000938:	bf00      	nop
 800093a:	480d      	ldr	r0, [pc, #52]	@ (8000970 <RequestPassword+0x1b0>)
 800093c:	f000 feaa 	bl	8001694 <delayRead>
 8000940:	4603      	mov	r3, r0
 8000942:	f083 0301 	eor.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1f6      	bne.n	800093a <RequestPassword+0x17a>
                        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                        }
                        break;  //  Sale de este while pero vuelve al inicio del while externo dentro de RequestPassword
 800094c:	e000      	b.n	8000950 <RequestPassword+0x190>
        while (1) {
 800094e:	e752      	b.n	80007f6 <RequestPassword+0x36>
        lcd_clear();
 8000950:	e73b      	b.n	80007ca <RequestPassword+0xa>
                    }
                }
            }
        }
    }
}
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	08005588 	.word	0x08005588
 800095c:	200000a8 	.word	0x200000a8
 8000960:	200000ad 	.word	0x200000ad
 8000964:	200000b0 	.word	0x200000b0
 8000968:	08005598 	.word	0x08005598
 800096c:	080055a8 	.word	0x080055a8
 8000970:	200000c8 	.word	0x200000c8
 8000974:	08005570 	.word	0x08005570
 8000978:	0800557c 	.word	0x0800557c
 800097c:	080055b8 	.word	0x080055b8
 8000980:	20000000 	.word	0x20000000
 8000984:	080055bc 	.word	0x080055bc
 8000988:	080055c8 	.word	0x080055c8

0800098c <ActivateAlarm>:
/*****************************************************************************************************************
 * @brief: Activar la alarma
 * @param: void
 * @retval: void
******************************************************************************************************************/
void ActivateAlarm() {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
    lcd_clear();
 8000992:	f001 f8ec 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000996:	2100      	movs	r1, #0
 8000998:	2000      	movs	r0, #0
 800099a:	f001 f8f2 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Alarma Activada");
 800099e:	4833      	ldr	r0, [pc, #204]	@ (8000a6c <ActivateAlarm+0xe0>)
 80009a0:	f001 f909 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 80009a4:	2100      	movs	r1, #0
 80009a6:	2001      	movs	r0, #1
 80009a8:	f001 f8eb 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Corran: 20 seg");
 80009ac:	4830      	ldr	r0, [pc, #192]	@ (8000a70 <ActivateAlarm+0xe4>)
 80009ae:	f001 f902 	bl	8001bb6 <lcd_print>

    BT_SendMessage("⚠️ Alarma activada. Corran 20s... \r\n");
 80009b2:	4830      	ldr	r0, [pc, #192]	@ (8000a74 <ActivateAlarm+0xe8>)
 80009b4:	f000 fb84 	bl	80010c0 <BT_SendMessage>
            char buffer[3];
            sprintf(buffer, "%2lu", (unsigned long)remainingTime);
            lcd_print(buffer);
        }
    }*/
    uint32_t remainingTime = 20;
 80009b8:	2314      	movs	r3, #20
 80009ba:	607b      	str	r3, [r7, #4]
    delayInit(&DelayGRAL_2, 1000);
 80009bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009c0:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <ActivateAlarm+0xec>)
 80009c2:	f000 fe53 	bl	800166c <delayInit>
    while (remainingTime > 0) {
 80009c6:	e01d      	b.n	8000a04 <ActivateAlarm+0x78>
            if (delayRead(&DelayGRAL_2)) {  // Espera 1 segundo antes de continuar
 80009c8:	482b      	ldr	r0, [pc, #172]	@ (8000a78 <ActivateAlarm+0xec>)
 80009ca:	f000 fe63 	bl	8001694 <delayRead>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d017      	beq.n	8000a04 <ActivateAlarm+0x78>
                remainingTime--;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	607b      	str	r3, [r7, #4]

                lcd_set_cursor(1, 7);
 80009da:	2107      	movs	r1, #7
 80009dc:	2001      	movs	r0, #1
 80009de:	f001 f8d0 	bl	8001b82 <lcd_set_cursor>
                lcd_print("   "); // Borra el número anterior
 80009e2:	4826      	ldr	r0, [pc, #152]	@ (8000a7c <ActivateAlarm+0xf0>)
 80009e4:	f001 f8e7 	bl	8001bb6 <lcd_print>
                lcd_set_cursor(1, 7);
 80009e8:	2107      	movs	r1, #7
 80009ea:	2001      	movs	r0, #1
 80009ec:	f001 f8c9 	bl	8001b82 <lcd_set_cursor>
                char buffer[3];
                sprintf(buffer, "%2lu", (unsigned long)remainingTime);
 80009f0:	463b      	mov	r3, r7
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	4922      	ldr	r1, [pc, #136]	@ (8000a80 <ActivateAlarm+0xf4>)
 80009f6:	4618      	mov	r0, r3
 80009f8:	f004 f8e4 	bl	8004bc4 <siprintf>
                lcd_print(buffer);
 80009fc:	463b      	mov	r3, r7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 f8d9 	bl	8001bb6 <lcd_print>
    while (remainingTime > 0) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1de      	bne.n	80009c8 <ActivateAlarm+0x3c>
            }
        }

/*******************************************************************************************************************/
    lcd_clear();
 8000a0a:	f001 f8b0 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2000      	movs	r0, #0
 8000a12:	f001 f8b6 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Alarma");
 8000a16:	481b      	ldr	r0, [pc, #108]	@ (8000a84 <ActivateAlarm+0xf8>)
 8000a18:	f001 f8cd 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f001 f8af 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Activa!");
 8000a24:	4818      	ldr	r0, [pc, #96]	@ (8000a88 <ActivateAlarm+0xfc>)
 8000a26:	f001 f8c6 	bl	8001bb6 <lcd_print>

    BT_SendMessage("🚨 Alarma activada! \r\n");
 8000a2a:	4818      	ldr	r0, [pc, #96]	@ (8000a8c <ActivateAlarm+0x100>)
 8000a2c:	f000 fb48 	bl	80010c0 <BT_SendMessage>

    alarmActivated = true;
 8000a30:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <ActivateAlarm+0x104>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
    currentState = ACTIVE_ALARM;
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <ActivateAlarm+0x108>)
 8000a38:	2204      	movs	r2, #4
 8000a3a:	701a      	strb	r2, [r3, #0]

    enableSensorInterrupts();			// Habilitacion de interrupciones para pines GPIO correspondientes a los sensores
 8000a3c:	f001 f81c 	bl	8001a78 <enableSensorInterrupts>

    while (alarmActivated) {
 8000a40:	e00a      	b.n	8000a58 <ActivateAlarm+0xcc>
        char key = keypad_get_key();
 8000a42:	f001 fa73 	bl	8001f2c <keypad_get_key>
 8000a46:	4603      	mov	r3, r0
 8000a48:	70fb      	strb	r3, [r7, #3]
        if (key != '\0') {
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <ActivateAlarm+0xcc>
            CheckAlarmDeactivation(key);  // Nueva función para manejar la desactivación con temporizador
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fb6a 	bl	800112c <CheckAlarmDeactivation>
    while (alarmActivated) {
 8000a58:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <ActivateAlarm+0x104>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1f0      	bne.n	8000a42 <ActivateAlarm+0xb6>
        }
    }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	080055d4 	.word	0x080055d4
 8000a70:	080055e4 	.word	0x080055e4
 8000a74:	080055f4 	.word	0x080055f4
 8000a78:	200000bc 	.word	0x200000bc
 8000a7c:	08005620 	.word	0x08005620
 8000a80:	08005624 	.word	0x08005624
 8000a84:	0800562c 	.word	0x0800562c
 8000a88:	08005634 	.word	0x08005634
 8000a8c:	0800563c 	.word	0x0800563c
 8000a90:	200000ae 	.word	0x200000ae
 8000a94:	200000a5 	.word	0x200000a5

08000a98 <DeactivateAlarm>:
/*****************************************************************************************************************
 * @brief: Desactivar la alarma si la contraseña es correcta
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DeactivateAlarm(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
    lcd_clear();
 8000a9c:	f001 f867 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f001 f86d 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Alarma");
 8000aa8:	4814      	ldr	r0, [pc, #80]	@ (8000afc <DeactivateAlarm+0x64>)
 8000aaa:	f001 f884 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f001 f866 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Desactivada");
 8000ab6:	4812      	ldr	r0, [pc, #72]	@ (8000b00 <DeactivateAlarm+0x68>)
 8000ab8:	f001 f87d 	bl	8001bb6 <lcd_print>

    BT_SendMessage("✅ Alarma desactivada. Todo en orden. \r\n"); // Notificación de desactivación
 8000abc:	4811      	ldr	r0, [pc, #68]	@ (8000b04 <DeactivateAlarm+0x6c>)
 8000abe:	f000 faff 	bl	80010c0 <BT_SendMessage>

    alarmActivated = false;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <DeactivateAlarm+0x70>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]

    // Asegurar que el buzzer(SIRENA) se apaga
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2120      	movs	r1, #32
 8000acc:	480f      	ldr	r0, [pc, #60]	@ (8000b0c <DeactivateAlarm+0x74>)
 8000ace:	f001 fe4d 	bl	800276c <HAL_GPIO_WritePin>

    disableSensorInterrupts(); // Deshabilita las interrupciones cuando se desactiva la alarma. Evita interrupciones innecesarias.
 8000ad2:	f000 ffdb 	bl	8001a8c <disableSensorInterrupts>

    //HAL_Delay(2000);		// Delay referente al mensaje en pantalla "Alarma Desactivada"
    delayInit(&LCD_Muestro, 2000);
 8000ad6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000ada:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <DeactivateAlarm+0x78>)
 8000adc:	f000 fdc6 	bl	800166c <delayInit>
    while(!delayRead(&LCD_Muestro)){
 8000ae0:	bf00      	nop
 8000ae2:	480b      	ldr	r0, [pc, #44]	@ (8000b10 <DeactivateAlarm+0x78>)
 8000ae4:	f000 fdd6 	bl	8001694 <delayRead>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f083 0301 	eor.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f6      	bne.n	8000ae2 <DeactivateAlarm+0x4a>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8000af4:	f7ff fdbc 	bl	8000670 <DisplayMainMenu>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	0800562c 	.word	0x0800562c
 8000b00:	0800566c 	.word	0x0800566c
 8000b04:	08005678 	.word	0x08005678
 8000b08:	200000ae 	.word	0x200000ae
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	200000c8 	.word	0x200000c8

08000b14 <IncorrectPassword>:
/*****************************************************************************************************************
 * @brief: Contraseña incorrecta: mensaje y reinicio de intento
 * @param: void
 * @retval: void
******************************************************************************************************************/
void IncorrectPassword(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    lcd_clear();
 8000b18:	f001 f829 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f001 f82f 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Contrasena");
 8000b24:	481c      	ldr	r0, [pc, #112]	@ (8000b98 <IncorrectPassword+0x84>)
 8000b26:	f001 f846 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f001 f828 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Incorrecta");
 8000b32:	481a      	ldr	r0, [pc, #104]	@ (8000b9c <IncorrectPassword+0x88>)
 8000b34:	f001 f83f 	bl	8001bb6 <lcd_print>
    //HAL_Delay(2000); 			// Mostrar mensaje durante 5 segundos
    delayInit(&LCD_Muestro, 5000);
 8000b38:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000b3c:	4818      	ldr	r0, [pc, #96]	@ (8000ba0 <IncorrectPassword+0x8c>)
 8000b3e:	f000 fd95 	bl	800166c <delayInit>
    while(!delayRead(&LCD_Muestro)){
 8000b42:	bf00      	nop
 8000b44:	4816      	ldr	r0, [pc, #88]	@ (8000ba0 <IncorrectPassword+0x8c>)
 8000b46:	f000 fda5 	bl	8001694 <delayRead>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f083 0301 	eor.w	r3, r3, #1
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f6      	bne.n	8000b44 <IncorrectPassword+0x30>
*/
    // Iniciar temporizador de 31 segundos si aún no está activo
    static delay_t countdownDelay;  // Variable estática para mantener el estado del temporizador
    static bool countdownStarted = false;

    if (!countdownStarted) {
 8000b56:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <IncorrectPassword+0x90>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	f083 0301 	eor.w	r3, r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d007      	beq.n	8000b74 <IncorrectPassword+0x60>
        countdownStarted = true;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <IncorrectPassword+0x90>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
        delayInit(&countdownDelay, 31000); // Iniciar temporizador de 31 segundos
 8000b6a:	f647 1118 	movw	r1, #31000	@ 0x7918
 8000b6e:	480e      	ldr	r0, [pc, #56]	@ (8000ba8 <IncorrectPassword+0x94>)
 8000b70:	f000 fd7c 	bl	800166c <delayInit>
    }

    // Solicitar nuevamente la contraseña
    lcd_clear();
 8000b74:	f000 fffb 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f001 f801 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Ingrese");
 8000b80:	480a      	ldr	r0, [pc, #40]	@ (8000bac <IncorrectPassword+0x98>)
 8000b82:	f001 f818 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 fffa 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Contrasena:");
 8000b8e:	4808      	ldr	r0, [pc, #32]	@ (8000bb0 <IncorrectPassword+0x9c>)
 8000b90:	f001 f811 	bl	8001bb6 <lcd_print>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	080055bc 	.word	0x080055bc
 8000b9c:	080055c8 	.word	0x080055c8
 8000ba0:	200000c8 	.word	0x200000c8
 8000ba4:	200000d4 	.word	0x200000d4
 8000ba8:	200000d8 	.word	0x200000d8
 8000bac:	08005658 	.word	0x08005658
 8000bb0:	08005660 	.word	0x08005660

08000bb4 <AlarmTriggered>:
/*****************************************************************************************************************
 * @brief: Activar alarma sonora
 * @param: void
 * @retval: void
******************************************************************************************************************/
void AlarmTriggered(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
    lcd_clear();
 8000bba:	f000 ffd8 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 ffde 	bl	8001b82 <lcd_set_cursor>
    lcd_print("ALERTA!!!");
 8000bc6:	4823      	ldr	r0, [pc, #140]	@ (8000c54 <AlarmTriggered+0xa0>)
 8000bc8:	f000 fff5 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 ffd7 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Ingrese clave");
 8000bd4:	4820      	ldr	r0, [pc, #128]	@ (8000c58 <AlarmTriggered+0xa4>)
 8000bd6:	f000 ffee 	bl	8001bb6 <lcd_print>

    BT_SendMessage("⚠️ Alarma activada! \r\n"); // Enviar mensaje por Bluetooth
 8000bda:	4820      	ldr	r0, [pc, #128]	@ (8000c5c <AlarmTriggered+0xa8>)
 8000bdc:	f000 fa70 	bl	80010c0 <BT_SendMessage>

    //uint32_t lastToggleTime = HAL_GetTick();  // Tiempo de referencia para el buzzer

    while (alarmActivated) {
 8000be0:	e02a      	b.n	8000c38 <AlarmTriggered+0x84>
        // Alternar el buzzer cada 500 ms sin bloquear el sistema
        /*if (HAL_GetTick() - lastToggleTime >= 500) {
            lastToggleTime = HAL_GetTick();
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
        }*/
    	delayInit(&DelayGRAL_1, 500);
 8000be2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000be6:	481e      	ldr	r0, [pc, #120]	@ (8000c60 <AlarmTriggered+0xac>)
 8000be8:	f000 fd40 	bl	800166c <delayInit>
    	if (delayRead(&DelayGRAL_1)){
 8000bec:	481c      	ldr	r0, [pc, #112]	@ (8000c60 <AlarmTriggered+0xac>)
 8000bee:	f000 fd51 	bl	8001694 <delayRead>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <AlarmTriggered+0x4e>
    		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 8000bf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfc:	4819      	ldr	r0, [pc, #100]	@ (8000c64 <AlarmTriggered+0xb0>)
 8000bfe:	f001 fdce 	bl	800279e <HAL_GPIO_TogglePin>
    	}

        // Permitir que el usuario intente apagar la alarma
        char key = keypad_get_key();
 8000c02:	f001 f993 	bl	8001f2c <keypad_get_key>
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
        if (key != '\0') {
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <AlarmTriggered+0x64>
            RequestPassword(DeactivateAlarm, IncorrectPassword);
 8000c10:	4915      	ldr	r1, [pc, #84]	@ (8000c68 <AlarmTriggered+0xb4>)
 8000c12:	4816      	ldr	r0, [pc, #88]	@ (8000c6c <AlarmTriggered+0xb8>)
 8000c14:	f7ff fdd4 	bl	80007c0 <RequestPassword>
        }

        char btData;
                if (HAL_UART_Receive(&huart2, (uint8_t *)&btData, 1, 100) == HAL_OK) {
 8000c18:	1db9      	adds	r1, r7, #6
 8000c1a:	2364      	movs	r3, #100	@ 0x64
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4814      	ldr	r0, [pc, #80]	@ (8000c70 <AlarmTriggered+0xbc>)
 8000c20:	f003 f80d 	bl	8003c3e <HAL_UART_Receive>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d106      	bne.n	8000c38 <AlarmTriggered+0x84>
                    if (btData == '#') {  // 🔹 Si recibe "#" por Bluetooth, intenta desactivar
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	2b23      	cmp	r3, #35	@ 0x23
 8000c2e:	d103      	bne.n	8000c38 <AlarmTriggered+0x84>
                        RequestPassword(DeactivateAlarm, IncorrectPassword);
 8000c30:	490d      	ldr	r1, [pc, #52]	@ (8000c68 <AlarmTriggered+0xb4>)
 8000c32:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <AlarmTriggered+0xb8>)
 8000c34:	f7ff fdc4 	bl	80007c0 <RequestPassword>
    while (alarmActivated) {
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <AlarmTriggered+0xc0>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1d0      	bne.n	8000be2 <AlarmTriggered+0x2e>
                    }
                }
    }

    // Apagar el buzzer cuando la alarma se desactiva
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c46:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <AlarmTriggered+0xb0>)
 8000c48:	f001 fd90 	bl	800276c <HAL_GPIO_WritePin>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	080056a4 	.word	0x080056a4
 8000c58:	080056b0 	.word	0x080056b0
 8000c5c:	080056c0 	.word	0x080056c0
 8000c60:	200000b0 	.word	0x200000b0
 8000c64:	40020000 	.word	0x40020000
 8000c68:	08000b15 	.word	0x08000b15
 8000c6c:	08000a99 	.word	0x08000a99
 8000c70:	200000f8 	.word	0x200000f8
 8000c74:	200000ae 	.word	0x200000ae

08000c78 <DisplayChangePassMenu>:
/*****************************************************************************************************************
 * @brief: Cambiar contraseña
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayChangePassMenu() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
    lcd_clear();
 8000c7e:	f000 ff76 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000c82:	2100      	movs	r1, #0
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 ff7c 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Contrasena");
 8000c8a:	481f      	ldr	r0, [pc, #124]	@ (8000d08 <DisplayChangePassMenu+0x90>)
 8000c8c:	f000 ff93 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 8000c90:	2100      	movs	r1, #0
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 ff75 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Actual:");
 8000c98:	481c      	ldr	r0, [pc, #112]	@ (8000d0c <DisplayChangePassMenu+0x94>)
 8000c9a:	f000 ff8c 	bl	8001bb6 <lcd_print>

    char key;
    while (1) {  // Bucle para capturar la tecla antes de solicitar la contraseña
        key = keypad_get_key();
 8000c9e:	f001 f945 	bl	8001f2c <keypad_get_key>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
        if (key == '*') {  //  Si el usuario presiona "*", volver al menú principal
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000caa:	d121      	bne.n	8000cf0 <DisplayChangePassMenu+0x78>
            lcd_clear();
 8000cac:	f000 ff5f 	bl	8001b6e <lcd_clear>
            lcd_set_cursor(0, 0);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 ff65 	bl	8001b82 <lcd_set_cursor>
            lcd_print("Operacion");
 8000cb8:	4815      	ldr	r0, [pc, #84]	@ (8000d10 <DisplayChangePassMenu+0x98>)
 8000cba:	f000 ff7c 	bl	8001bb6 <lcd_print>
            lcd_set_cursor(1, 0);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f000 ff5e 	bl	8001b82 <lcd_set_cursor>
            lcd_print("Cancelada");
 8000cc6:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <DisplayChangePassMenu+0x9c>)
 8000cc8:	f000 ff75 	bl	8001bb6 <lcd_print>
            //HAL_Delay(2000);
            delayInit(&LCD_Muestro, 2000);
 8000ccc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000cd0:	4811      	ldr	r0, [pc, #68]	@ (8000d18 <DisplayChangePassMenu+0xa0>)
 8000cd2:	f000 fccb 	bl	800166c <delayInit>
            while(!delayRead(&LCD_Muestro)){
 8000cd6:	bf00      	nop
 8000cd8:	480f      	ldr	r0, [pc, #60]	@ (8000d18 <DisplayChangePassMenu+0xa0>)
 8000cda:	f000 fcdb 	bl	8001694 <delayRead>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f083 0301 	eor.w	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f6      	bne.n	8000cd8 <DisplayChangePassMenu+0x60>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();  //  Volver al menú principal
 8000cea:	f7ff fcc1 	bl	8000670 <DisplayMainMenu>
            return;
 8000cee:	e008      	b.n	8000d02 <DisplayChangePassMenu+0x8a>
        }
        if (key != '\0') {  // Si presiona otra tecla, salir del bucle y continuar con la contraseña
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d100      	bne.n	8000cf8 <DisplayChangePassMenu+0x80>
        key = keypad_get_key();
 8000cf6:	e7d2      	b.n	8000c9e <DisplayChangePassMenu+0x26>
            break;
 8000cf8:	bf00      	nop
        }
    }

    RequestPassword(ConfirmNewPassword, DisplayChangePassMenu);
 8000cfa:	4908      	ldr	r1, [pc, #32]	@ (8000d1c <DisplayChangePassMenu+0xa4>)
 8000cfc:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <DisplayChangePassMenu+0xa8>)
 8000cfe:	f7ff fd5f 	bl	80007c0 <RequestPassword>
}
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	080055bc 	.word	0x080055bc
 8000d0c:	080056dc 	.word	0x080056dc
 8000d10:	08005570 	.word	0x08005570
 8000d14:	0800557c 	.word	0x0800557c
 8000d18:	200000c8 	.word	0x200000c8
 8000d1c:	08000c79 	.word	0x08000c79
 8000d20:	08000d25 	.word	0x08000d25

08000d24 <ConfirmNewPassword>:
/*****************************************************************************************************************
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
void ConfirmNewPassword() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
    lcd_clear();
 8000d2a:	f000 ff20 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 ff26 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Nueva Clave:");
 8000d36:	486e      	ldr	r0, [pc, #440]	@ (8000ef0 <ConfirmNewPassword+0x1cc>)
 8000d38:	f000 ff3d 	bl	8001bb6 <lcd_print>

    memset(inputBuffer, 0, sizeof(inputBuffer));
 8000d3c:	2205      	movs	r2, #5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	486c      	ldr	r0, [pc, #432]	@ (8000ef4 <ConfirmNewPassword+0x1d0>)
 8000d42:	f003 ff5f 	bl	8004c04 <memset>
    inputIndex = 0;
 8000d46:	4b6c      	ldr	r3, [pc, #432]	@ (8000ef8 <ConfirmNewPassword+0x1d4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
    //uint32_t startTime = HAL_GetTick();  // Tiempo de inicio para evitar bucles infinitos
    delayInit(&DelayGRAL_1, 20000);
 8000d4c:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000d50:	486a      	ldr	r0, [pc, #424]	@ (8000efc <ConfirmNewPassword+0x1d8>)
 8000d52:	f000 fc8b 	bl	800166c <delayInit>
    //while (HAL_GetTick() - startTime < 20000) {  // Tiempo límite de 20 segundos
    while (delayRead(&DelayGRAL_1)) {  // Tiempo límite de 20 segundos
 8000d56:	e09f      	b.n	8000e98 <ConfirmNewPassword+0x174>
        char key = keypad_get_key();
 8000d58:	f001 f8e8 	bl	8001f2c <keypad_get_key>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]

        if (key >= '0' && key <= '9' && inputIndex < 4) {
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d64:	d91c      	bls.n	8000da0 <ConfirmNewPassword+0x7c>
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b39      	cmp	r3, #57	@ 0x39
 8000d6a:	d819      	bhi.n	8000da0 <ConfirmNewPassword+0x7c>
 8000d6c:	4b62      	ldr	r3, [pc, #392]	@ (8000ef8 <ConfirmNewPassword+0x1d4>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d815      	bhi.n	8000da0 <ConfirmNewPassword+0x7c>
            inputBuffer[inputIndex++] = key;
 8000d74:	4b60      	ldr	r3, [pc, #384]	@ (8000ef8 <ConfirmNewPassword+0x1d4>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	1c5a      	adds	r2, r3, #1
 8000d7a:	b2d1      	uxtb	r1, r2
 8000d7c:	4a5e      	ldr	r2, [pc, #376]	@ (8000ef8 <ConfirmNewPassword+0x1d4>)
 8000d7e:	7011      	strb	r1, [r2, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4a5c      	ldr	r2, [pc, #368]	@ (8000ef4 <ConfirmNewPassword+0x1d0>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	5453      	strb	r3, [r2, r1]
            lcd_set_cursor(1, inputIndex - 1);
 8000d88:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef8 <ConfirmNewPassword+0x1d4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4619      	mov	r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	f000 fef5 	bl	8001b82 <lcd_set_cursor>
            lcd_print("*");
 8000d98:	4859      	ldr	r0, [pc, #356]	@ (8000f00 <ConfirmNewPassword+0x1dc>)
 8000d9a:	f000 ff0c 	bl	8001bb6 <lcd_print>
 8000d9e:	e07b      	b.n	8000e98 <ConfirmNewPassword+0x174>
        } else if (key == '#') {
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b23      	cmp	r3, #35	@ 0x23
 8000da4:	d178      	bne.n	8000e98 <ConfirmNewPassword+0x174>
            if (inputIndex == 4) {  // Validar que la clave tenga 4 dígitos
 8000da6:	4b54      	ldr	r3, [pc, #336]	@ (8000ef8 <ConfirmNewPassword+0x1d4>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d152      	bne.n	8000e54 <ConfirmNewPassword+0x130>
                inputBuffer[inputIndex] = '\0';
 8000dae:	4b52      	ldr	r3, [pc, #328]	@ (8000ef8 <ConfirmNewPassword+0x1d4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ef4 <ConfirmNewPassword+0x1d0>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	5499      	strb	r1, [r3, r2]
                strcpy(newPassword, inputBuffer);
 8000dba:	494e      	ldr	r1, [pc, #312]	@ (8000ef4 <ConfirmNewPassword+0x1d0>)
 8000dbc:	4851      	ldr	r0, [pc, #324]	@ (8000f04 <ConfirmNewPassword+0x1e0>)
 8000dbe:	f003 ff55 	bl	8004c6c <strcpy>

                lcd_clear();
 8000dc2:	f000 fed4 	bl	8001b6e <lcd_clear>
                lcd_set_cursor(0, 0);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 feda 	bl	8001b82 <lcd_set_cursor>
                lcd_print("Confirmar: ");
 8000dce:	484e      	ldr	r0, [pc, #312]	@ (8000f08 <ConfirmNewPassword+0x1e4>)
 8000dd0:	f000 fef1 	bl	8001bb6 <lcd_print>
                lcd_set_cursor(1, 0);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f000 fed3 	bl	8001b82 <lcd_set_cursor>
                lcd_print("*.Si   #.No");
 8000ddc:	484b      	ldr	r0, [pc, #300]	@ (8000f0c <ConfirmNewPassword+0x1e8>)
 8000dde:	f000 feea 	bl	8001bb6 <lcd_print>

                //uint32_t confirmStart = HAL_GetTick();
                //while (HAL_GetTick() - confirmStart < 10000) {  // Espera 10 segundos para confirmar
                delayInit(&DelayGRAL_2, 10000);
 8000de2:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000de6:	484a      	ldr	r0, [pc, #296]	@ (8000f10 <ConfirmNewPassword+0x1ec>)
 8000de8:	f000 fc40 	bl	800166c <delayInit>
                while(delayRead(&DelayGRAL_2)){
 8000dec:	e02b      	b.n	8000e46 <ConfirmNewPassword+0x122>
                    char confirmKey = keypad_get_key();
 8000dee:	f001 f89d 	bl	8001f2c <keypad_get_key>
 8000df2:	4603      	mov	r3, r0
 8000df4:	71bb      	strb	r3, [r7, #6]
                    if (confirmKey == '*') {
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dfa:	d11e      	bne.n	8000e3a <ConfirmNewPassword+0x116>
                        strcpy(currentPassword, newPassword);
 8000dfc:	4941      	ldr	r1, [pc, #260]	@ (8000f04 <ConfirmNewPassword+0x1e0>)
 8000dfe:	4845      	ldr	r0, [pc, #276]	@ (8000f14 <ConfirmNewPassword+0x1f0>)
 8000e00:	f003 ff34 	bl	8004c6c <strcpy>
                        lcd_clear();
 8000e04:	f000 feb3 	bl	8001b6e <lcd_clear>
                        lcd_set_cursor(0, 0);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 feb9 	bl	8001b82 <lcd_set_cursor>
                        lcd_print("Clave Actualizada");
 8000e10:	4841      	ldr	r0, [pc, #260]	@ (8000f18 <ConfirmNewPassword+0x1f4>)
 8000e12:	f000 fed0 	bl	8001bb6 <lcd_print>
                        //HAL_Delay(2000);
                        delayInit(&LCD_Muestro, 2000);
 8000e16:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000e1a:	4840      	ldr	r0, [pc, #256]	@ (8000f1c <ConfirmNewPassword+0x1f8>)
 8000e1c:	f000 fc26 	bl	800166c <delayInit>
                        while(!delayRead(&LCD_Muestro)){
 8000e20:	bf00      	nop
 8000e22:	483e      	ldr	r0, [pc, #248]	@ (8000f1c <ConfirmNewPassword+0x1f8>)
 8000e24:	f000 fc36 	bl	8001694 <delayRead>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f083 0301 	eor.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f6      	bne.n	8000e22 <ConfirmNewPassword+0xfe>
                        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                        }
                        DisplayMainMenu();
 8000e34:	f7ff fc1c 	bl	8000670 <DisplayMainMenu>
                        return;
 8000e38:	e056      	b.n	8000ee8 <ConfirmNewPassword+0x1c4>
                    } else if (confirmKey == '#') {
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	2b23      	cmp	r3, #35	@ 0x23
 8000e3e:	d102      	bne.n	8000e46 <ConfirmNewPassword+0x122>
                        ConfirmNewPassword();  // Volver a solicitar la clave
 8000e40:	f7ff ff70 	bl	8000d24 <ConfirmNewPassword>
                        return;
 8000e44:	e050      	b.n	8000ee8 <ConfirmNewPassword+0x1c4>
                while(delayRead(&DelayGRAL_2)){
 8000e46:	4832      	ldr	r0, [pc, #200]	@ (8000f10 <ConfirmNewPassword+0x1ec>)
 8000e48:	f000 fc24 	bl	8001694 <delayRead>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1cd      	bne.n	8000dee <ConfirmNewPassword+0xca>
 8000e52:	e021      	b.n	8000e98 <ConfirmNewPassword+0x174>
                    }
                }
            } else {
                lcd_clear();
 8000e54:	f000 fe8b 	bl	8001b6e <lcd_clear>
                lcd_set_cursor(0, 0);
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 fe91 	bl	8001b82 <lcd_set_cursor>
                lcd_print("Debe ser 4 ");
 8000e60:	482f      	ldr	r0, [pc, #188]	@ (8000f20 <ConfirmNewPassword+0x1fc>)
 8000e62:	f000 fea8 	bl	8001bb6 <lcd_print>
                lcd_set_cursor(1, 0);
 8000e66:	2100      	movs	r1, #0
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fe8a 	bl	8001b82 <lcd_set_cursor>
                lcd_print("digitos ");
 8000e6e:	482d      	ldr	r0, [pc, #180]	@ (8000f24 <ConfirmNewPassword+0x200>)
 8000e70:	f000 fea1 	bl	8001bb6 <lcd_print>
                //HAL_Delay(2000);
                delayInit(&LCD_Muestro, 2000);
 8000e74:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000e78:	4828      	ldr	r0, [pc, #160]	@ (8000f1c <ConfirmNewPassword+0x1f8>)
 8000e7a:	f000 fbf7 	bl	800166c <delayInit>
                while(!delayRead(&LCD_Muestro)){
 8000e7e:	bf00      	nop
 8000e80:	4826      	ldr	r0, [pc, #152]	@ (8000f1c <ConfirmNewPassword+0x1f8>)
 8000e82:	f000 fc07 	bl	8001694 <delayRead>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f083 0301 	eor.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f6      	bne.n	8000e80 <ConfirmNewPassword+0x15c>
                	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                }
                ConfirmNewPassword();  // Reiniciar el proceso
 8000e92:	f7ff ff47 	bl	8000d24 <ConfirmNewPassword>
                return;
 8000e96:	e027      	b.n	8000ee8 <ConfirmNewPassword+0x1c4>
    while (delayRead(&DelayGRAL_1)) {  // Tiempo límite de 20 segundos
 8000e98:	4818      	ldr	r0, [pc, #96]	@ (8000efc <ConfirmNewPassword+0x1d8>)
 8000e9a:	f000 fbfb 	bl	8001694 <delayRead>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f47f af59 	bne.w	8000d58 <ConfirmNewPassword+0x34>
            }
        }
    }

    // Si el usuario no ingresa nada en 20 segundos, volver al menú principal
    lcd_clear();
 8000ea6:	f000 fe62 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 fe68 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Tiempo ");
 8000eb2:	481d      	ldr	r0, [pc, #116]	@ (8000f28 <ConfirmNewPassword+0x204>)
 8000eb4:	f000 fe7f 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f000 fe61 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Excedido ");
 8000ec0:	481a      	ldr	r0, [pc, #104]	@ (8000f2c <ConfirmNewPassword+0x208>)
 8000ec2:	f000 fe78 	bl	8001bb6 <lcd_print>
    //HAL_Delay(2000);
    delayInit(&LCD_Muestro, 2000);
 8000ec6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000eca:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <ConfirmNewPassword+0x1f8>)
 8000ecc:	f000 fbce 	bl	800166c <delayInit>
    while(!delayRead(&LCD_Muestro)){
 8000ed0:	bf00      	nop
 8000ed2:	4812      	ldr	r0, [pc, #72]	@ (8000f1c <ConfirmNewPassword+0x1f8>)
 8000ed4:	f000 fbde 	bl	8001694 <delayRead>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f083 0301 	eor.w	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f6      	bne.n	8000ed2 <ConfirmNewPassword+0x1ae>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8000ee4:	f7ff fbc4 	bl	8000670 <DisplayMainMenu>
}
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	080056e4 	.word	0x080056e4
 8000ef4:	200000a8 	.word	0x200000a8
 8000ef8:	200000ad 	.word	0x200000ad
 8000efc:	200000b0 	.word	0x200000b0
 8000f00:	080055b8 	.word	0x080055b8
 8000f04:	200000a0 	.word	0x200000a0
 8000f08:	080056f4 	.word	0x080056f4
 8000f0c:	08005700 	.word	0x08005700
 8000f10:	200000bc 	.word	0x200000bc
 8000f14:	20000000 	.word	0x20000000
 8000f18:	0800570c 	.word	0x0800570c
 8000f1c:	200000c8 	.word	0x200000c8
 8000f20:	08005720 	.word	0x08005720
 8000f24:	0800572c 	.word	0x0800572c
 8000f28:	08005738 	.word	0x08005738
 8000f2c:	08005740 	.word	0x08005740

08000f30 <HandleSubMenu>:
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
// Submenú "Más"
void HandleSubMenu() {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    lcd_clear();
 8000f36:	f000 fe1a 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 fe20 	bl	8001b82 <lcd_set_cursor>
    lcd_print("#.Volver ");
 8000f42:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <HandleSubMenu+0x50>)
 8000f44:	f000 fe37 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fe19 	bl	8001b82 <lcd_set_cursor>
    lcd_print("3.Prueba");
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <HandleSubMenu+0x54>)
 8000f52:	f000 fe30 	bl	8001bb6 <lcd_print>

    while (1) {
        char key = keypad_get_key();
 8000f56:	f000 ffe9 	bl	8001f2c <keypad_get_key>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]

        if (key != '\0') {
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0f8      	beq.n	8000f56 <HandleSubMenu+0x26>
            if (key == '#') {
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b23      	cmp	r3, #35	@ 0x23
 8000f68:	d102      	bne.n	8000f70 <HandleSubMenu+0x40>
                DisplayMainMenu();
 8000f6a:	f7ff fb81 	bl	8000670 <DisplayMainMenu>
                return;
 8000f6e:	e004      	b.n	8000f7a <HandleSubMenu+0x4a>
            } else if (key == '3') {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b33      	cmp	r3, #51	@ 0x33
 8000f74:	d1ef      	bne.n	8000f56 <HandleSubMenu+0x26>
                TestAlarm();
 8000f76:	f000 f807 	bl	8000f88 <TestAlarm>
                return;
            }
        }
    }
}
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	0800574c 	.word	0x0800574c
 8000f84:	08005758 	.word	0x08005758

08000f88 <TestAlarm>:
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
// Prueba de alarma
void TestAlarm() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    lcd_clear();
 8000f8c:	f000 fdef 	bl	8001b6e <lcd_clear>
    lcd_set_cursor(0, 0);
 8000f90:	2100      	movs	r1, #0
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 fdf5 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Prueba de");
 8000f98:	481b      	ldr	r0, [pc, #108]	@ (8001008 <TestAlarm+0x80>)
 8000f9a:	f000 fe0c 	bl	8001bb6 <lcd_print>
    lcd_set_cursor(1, 0);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f000 fdee 	bl	8001b82 <lcd_set_cursor>
    lcd_print("Alarma...");
 8000fa6:	4819      	ldr	r0, [pc, #100]	@ (800100c <TestAlarm+0x84>)
 8000fa8:	f000 fe05 	bl	8001bb6 <lcd_print>

    // Activar el buzzer en PA13
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fb2:	4817      	ldr	r0, [pc, #92]	@ (8001010 <TestAlarm+0x88>)
 8000fb4:	f001 fbda 	bl	800276c <HAL_GPIO_WritePin>
    //HAL_Delay(5000);  // Mantener el buzzer encendido 5 segundos
    delayInit(&LCD_Muestro, 5000);
 8000fb8:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000fbc:	4815      	ldr	r0, [pc, #84]	@ (8001014 <TestAlarm+0x8c>)
 8000fbe:	f000 fb55 	bl	800166c <delayInit>
    while(!delayRead(&LCD_Muestro)){
 8000fc2:	bf00      	nop
 8000fc4:	4813      	ldr	r0, [pc, #76]	@ (8001014 <TestAlarm+0x8c>)
 8000fc6:	f000 fb65 	bl	8001694 <delayRead>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f6      	bne.n	8000fc4 <TestAlarm+0x3c>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);  // Apagar buzzer
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <TestAlarm+0x88>)
 8000fde:	f001 fbc5 	bl	800276c <HAL_GPIO_WritePin>

    //HAL_Delay(1000);  // Pequeña pausa antes de volver al menú
    delayInit(&LCD_Muestro, 1000);
 8000fe2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fe6:	480b      	ldr	r0, [pc, #44]	@ (8001014 <TestAlarm+0x8c>)
 8000fe8:	f000 fb40 	bl	800166c <delayInit>
    while(!delayRead(&LCD_Muestro)){
 8000fec:	bf00      	nop
 8000fee:	4809      	ldr	r0, [pc, #36]	@ (8001014 <TestAlarm+0x8c>)
 8000ff0:	f000 fb50 	bl	8001694 <delayRead>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f083 0301 	eor.w	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f6      	bne.n	8000fee <TestAlarm+0x66>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8001000:	f7ff fb36 	bl	8000670 <DisplayMainMenu>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	08005764 	.word	0x08005764
 800100c:	08005770 	.word	0x08005770
 8001010:	40020000 	.word	0x40020000
 8001014:	200000c8 	.word	0x200000c8

08001018 <CheckSensors>:
/*****************************************************************************************************************
 * @brief: Chequeo de sensores
 * @param: void
 * @retval: void
******************************************************************************************************************/
void CheckSensors(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
    if (alarmActivated) {
 800101e:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <CheckSensors+0x98>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d03f      	beq.n	80010a6 <CheckSensors+0x8e>
        // Verificar si se abre una puerta o ventana (sensor magnético)
    	// El manejo de los sensores con interrupciones deberia ser unicamente cuando la alarma este activada, es decir,
    	// la interrupcion tiene que darse por valida cuando este en modo activada...
        bool doorOpened = (HAL_GPIO_ReadPin(GPIOA, Sensor_Magnetico_1_Pin) == GPIO_PIN_RESET);
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	4822      	ldr	r0, [pc, #136]	@ (80010b4 <CheckSensors+0x9c>)
 800102a:	f001 fb87 	bl	800273c <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf0c      	ite	eq
 8001034:	2301      	moveq	r3, #1
 8001036:	2300      	movne	r3, #0
 8001038:	71bb      	strb	r3, [r7, #6]
        bool motionDetected = false;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]

        // Solo verificar el sensor PIR si está activado en "Sist Completo"
        if (includeMotionSensor) {
 800103e:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <CheckSensors+0xa0>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d023      	beq.n	800108e <CheckSensors+0x76>
            motionDetected = HAL_GPIO_ReadPin(GPIOA, Sensor_PIR_Pin);
 8001046:	2140      	movs	r1, #64	@ 0x40
 8001048:	481a      	ldr	r0, [pc, #104]	@ (80010b4 <CheckSensors+0x9c>)
 800104a:	f001 fb77 	bl	800273c <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	71fb      	strb	r3, [r7, #7]

            // Filtro por software para evitar falsas detecciones
            //HAL_Delay(50);
            delayInit(&LCD_Muestro, 2000);
 800105a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800105e:	4817      	ldr	r0, [pc, #92]	@ (80010bc <CheckSensors+0xa4>)
 8001060:	f000 fb04 	bl	800166c <delayInit>
            while(!delayRead(&LCD_Muestro)){
 8001064:	bf00      	nop
 8001066:	4815      	ldr	r0, [pc, #84]	@ (80010bc <CheckSensors+0xa4>)
 8001068:	f000 fb14 	bl	8001694 <delayRead>
 800106c:	4603      	mov	r3, r0
 800106e:	f083 0301 	eor.w	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f6      	bne.n	8001066 <CheckSensors+0x4e>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            if (HAL_GPIO_ReadPin(GPIOA, Sensor_PIR_Pin) != motionDetected) {
 8001078:	2140      	movs	r1, #64	@ 0x40
 800107a:	480e      	ldr	r0, [pc, #56]	@ (80010b4 <CheckSensors+0x9c>)
 800107c:	f001 fb5e 	bl	800273c <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	429a      	cmp	r2, r3
 8001088:	d001      	beq.n	800108e <CheckSensors+0x76>
                motionDetected = false; // Ignorar si el estado cambió muy rápido
 800108a:	2300      	movs	r3, #0
 800108c:	71fb      	strb	r3, [r7, #7]
            }
        }
        // Evaluar si se debe activar la alarma
        if (doorOpened || (includeMotionSensor && motionDetected)) {
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d106      	bne.n	80010a2 <CheckSensors+0x8a>
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <CheckSensors+0xa0>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <CheckSensors+0x8e>
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <CheckSensors+0x8e>
            AlarmTriggered();
 80010a2:	f7ff fd87 	bl	8000bb4 <AlarmTriggered>
        }
    }
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000ae 	.word	0x200000ae
 80010b4:	40020000 	.word	0x40020000
 80010b8:	200000a6 	.word	0x200000a6
 80010bc:	200000c8 	.word	0x200000c8

080010c0 <BT_SendMessage>:
/*****************************************************************************************************************
 * @brief: Enviar datos al HC-05
 * @param:
 * @retval:
******************************************************************************************************************/
void BT_SendMessage(char *message) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff f8b3 	bl	8000234 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <BT_SendMessage+0x28>)
 80010da:	f002 fd25 	bl	8003b28 <HAL_UART_Transmit>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200000f8 	.word	0x200000f8

080010ec <BT_Test>:
/*****************************************************************************************************************
 * @brief: Para probar si el STM32 está enviando datos correctamente al módulo Bluetooth HC-05
 * @param:
 * @retval:
******************************************************************************************************************/
void BT_Test() {
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
    char message[] = "✅ HC-05 conectado con STM32\r\n";
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <BT_Test+0x38>)
 80010f4:	463c      	mov	r4, r7
 80010f6:	461d      	mov	r5, r3
 80010f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001104:	463b      	mov	r3, r7
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f894 	bl	8000234 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	4639      	mov	r1, r7
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	4804      	ldr	r0, [pc, #16]	@ (8001128 <BT_Test+0x3c>)
 8001118:	f002 fd06 	bl	8003b28 <HAL_UART_Transmit>
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bdb0      	pop	{r4, r5, r7, pc}
 8001124:	0800577c 	.word	0x0800577c
 8001128:	200000f8 	.word	0x200000f8

0800112c <CheckAlarmDeactivation>:
    // Si pasan 31 segundos sin ingresar la clave correcta, activar la alarma
    if (HAL_GetTick() - startTime >= 31000) {
        AlarmTriggered();
    }
}*/
void CheckAlarmDeactivation(char key) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
    static delay_t countdownDelay;
    static bool countdownStarted = false;

    if (!countdownStarted) {
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <CheckAlarmDeactivation+0x48>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <CheckAlarmDeactivation+0x28>
        countdownStarted = true;
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <CheckAlarmDeactivation+0x48>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
        delayInit(&countdownDelay, 31000);  // Iniciar temporizador de 31 segundos
 800114a:	f647 1118 	movw	r1, #31000	@ 0x7918
 800114e:	480a      	ldr	r0, [pc, #40]	@ (8001178 <CheckAlarmDeactivation+0x4c>)
 8001150:	f000 fa8c 	bl	800166c <delayInit>
    }

    RequestPassword(DeactivateAlarm, IncorrectPassword);
 8001154:	4909      	ldr	r1, [pc, #36]	@ (800117c <CheckAlarmDeactivation+0x50>)
 8001156:	480a      	ldr	r0, [pc, #40]	@ (8001180 <CheckAlarmDeactivation+0x54>)
 8001158:	f7ff fb32 	bl	80007c0 <RequestPassword>

    // Si pasan 31 segundos sin ingresar la clave correcta, activar la alarma
    if (delayRead(&countdownDelay)) {
 800115c:	4806      	ldr	r0, [pc, #24]	@ (8001178 <CheckAlarmDeactivation+0x4c>)
 800115e:	f000 fa99 	bl	8001694 <delayRead>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <CheckAlarmDeactivation+0x40>
        AlarmTriggered();
 8001168:	f7ff fd24 	bl	8000bb4 <AlarmTriggered>
    }
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200000e4 	.word	0x200000e4
 8001178:	200000e8 	.word	0x200000e8
 800117c:	08000b15 	.word	0x08000b15
 8001180:	08000a99 	.word	0x08000a99

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <Error_Handler+0x8>

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <HAL_MspInit+0x4c>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <HAL_MspInit+0x4c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	@ (8001264 <HAL_I2C_MspInit+0x84>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12b      	bne.n	800125a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <HAL_I2C_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a17      	ldr	r2, [pc, #92]	@ (8001268 <HAL_I2C_MspInit+0x88>)
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <HAL_I2C_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0320 	and.w	r3, r3, #32
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800121e:	2303      	movs	r3, #3
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001222:	2312      	movs	r3, #18
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800122e:	2304      	movs	r3, #4
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <HAL_I2C_MspInit+0x8c>)
 800123a:	f001 f8eb 	bl	8002414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_I2C_MspInit+0x88>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <HAL_I2C_MspInit+0x88>)
 8001248:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800124c:	6413      	str	r3, [r2, #64]	@ 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_I2C_MspInit+0x88>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	@ 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40005800 	.word	0x40005800
 8001268:	40023800 	.word	0x40023800
 800126c:	40021400 	.word	0x40021400

08001270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	@ 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <HAL_UART_MspInit+0x94>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d133      	bne.n	80012fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <HAL_UART_MspInit+0x98>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	4a1b      	ldr	r2, [pc, #108]	@ (8001308 <HAL_UART_MspInit+0x98>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a2:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <HAL_UART_MspInit+0x98>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_UART_MspInit+0x98>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <HAL_UART_MspInit+0x98>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_UART_MspInit+0x98>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012ca:	2360      	movs	r3, #96	@ 0x60
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012da:	2307      	movs	r3, #7
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4809      	ldr	r0, [pc, #36]	@ (800130c <HAL_UART_MspInit+0x9c>)
 80012e6:	f001 f895 	bl	8002414 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2026      	movs	r0, #38	@ 0x26
 80012f0:	f000 ffb9 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012f4:	2026      	movs	r0, #38	@ 0x26
 80012f6:	f000 ffd2 	bl	800229e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	@ 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40004400 	.word	0x40004400
 8001308:	40023800 	.word	0x40023800
 800130c:	40020c00 	.word	0x40020c00

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <NMI_Handler+0x4>

08001318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <MemManage_Handler+0x4>

08001328 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <UsageFault_Handler+0x4>

08001338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f000 fe3b 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}

0800136e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 8001372:	2004      	movs	r0, #4
 8001374:	f001 fa2e 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C2_Pin);
 8001380:	2010      	movs	r0, #16
 8001382:	f001 fa27 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}

0800138a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C3_Pin);
 800138e:	2020      	movs	r0, #32
 8001390:	f001 fa20 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_PIR_Pin);
 8001394:	2040      	movs	r0, #64	@ 0x40
 8001396:	f001 fa1d 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_1_Pin);
 800139a:	2080      	movs	r0, #128	@ 0x80
 800139c:	f001 fa1a 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <USART2_IRQHandler+0x10>)
 80013aa:	f002 fcdf 	bl	8003d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200000f8 	.word	0x200000f8

080013b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80013bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013c0:	f001 fa08 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_2_Pin);
 80013c4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013c8:	f001 fa04 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_3_Pin);
 80013cc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80013d0:	f001 fa00 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f003 fc04 	bl	8004c14 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	@ (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20050000 	.word	0x20050000
 8001438:	00000400 	.word	0x00000400
 800143c:	200000f4 	.word	0x200000f4
 8001440:	20000318 	.word	0x20000318

08001444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	@ (80014b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001496:	f003 fbc3 	bl	8004c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff f8a1 	bl	80005e0 <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80014ac:	080057f8 	.word	0x080057f8
  ldr r2, =_sbss
 80014b0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80014b4:	20000318 	.word	0x20000318

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>
	...

080014bc <MX_USART2_UART_Init>:
 * @brief Inicializacion USART2 (Asincrona)
 * @param void
 * @retval void
*/
void MX_USART2_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */
  huart2.Instance = USART2;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <MX_USART2_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014f4:	f002 fac8 	bl	8003a88 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014fe:	f7ff fe41 	bl	8001184 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200000f8 	.word	0x200000f8
 800150c:	40004400 	.word	0x40004400

08001510 <HAL_UART_TxCpltCallback>:
 * @brief Cuando se completa la transmision se puede realizar una tarea determinada
 * @param modulo UART
 * @retval void
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
		/*USER CODE BEGIN TxCpltCallback*/

		/*USER CODE END TxCpltCallback*/
	}
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <readKey>:
bool_t buttonRead;
delay_t debounceDelay;
//bool buttonRead = true;

/*Define functions -----------------------------------------------------------*/
bool_t readKey(void){																// Devuelve true si la tecla fue presionada
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
	bool_t keyPress = false;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]
	flanco_descendente = false;														// Re- inicializacion de la variable
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <readKey+0x30>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
	if(keyPressed){
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <readKey+0x34>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <readKey+0x22>
		keyPress = true;
 800153c:	2301      	movs	r3, #1
 800153e:	71fb      	strb	r3, [r7, #7]
		keyPressed = false; 														// Limpio estado de la variable para evitar lecturas repetidas
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <readKey+0x34>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
	}
	return keyPress;																// Retorna True solo una vez por evento de flanco
 8001546:	79fb      	ldrb	r3, [r7, #7]
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	20000142 	.word	0x20000142
 8001558:	20000141 	.word	0x20000141

0800155c <debounceFSM_init>:

void debounceFSM_init(void)															// debe cargar el estado inicial
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	actualState = BUTTON_UP;
 8001560:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <debounceFSM_init+0x24>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceDelay, DEBOUNCE_DELAY);
 8001566:	2128      	movs	r1, #40	@ 0x28
 8001568:	4806      	ldr	r0, [pc, #24]	@ (8001584 <debounceFSM_init+0x28>)
 800156a:	f000 f87f 	bl	800166c <delayInit>

	//Actualizar salida del estado inicial Leds off
	writeLedOff_GPIO(LD1_Pin|LD3_Pin|LD2_Pin);										// Inicializacion de todos los leds apagados
 800156e:	f244 0081 	movw	r0, #16513	@ 0x4081
 8001572:	f000 f8b9 	bl	80016e8 <writeLedOff_GPIO>
	buttonRead = true; 																// Boton de usuario no activado
 8001576:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <debounceFSM_init+0x2c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000140 	.word	0x20000140
 8001584:	20000144 	.word	0x20000144
 8001588:	20000143 	.word	0x20000143

0800158c <debounceFSM_update>:

void debounceFSM_update(bool buttonRead){
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	switch (actualState){
 8001596:	4b31      	ldr	r3, [pc, #196]	@ (800165c <debounceFSM_update+0xd0>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d84f      	bhi.n	800163e <debounceFSM_update+0xb2>
 800159e:	a201      	add	r2, pc, #4	@ (adr r2, 80015a4 <debounceFSM_update+0x18>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	080015b5 	.word	0x080015b5
 80015a8:	080015c9 	.word	0x080015c9
 80015ac:	080015f7 	.word	0x080015f7
 80015b0:	08001611 	.word	0x08001611
	case BUTTON_UP: 																// Estado inicial 0 | Actualizar salida del estado LEDs off
		if(buttonRead == true){ 													// Chequear condicion de transición | se presionó el boton?
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d044      	beq.n	8001644 <debounceFSM_update+0xb8>
			actualState = BUTTON_FALLING; 											// Pasa al estado siguiente
 80015ba:	4b28      	ldr	r3, [pc, #160]	@ (800165c <debounceFSM_update+0xd0>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
			delayRead(&debounceDelay);   											// Arranca cuenta de DEBOUNCE_DELAY
 80015c0:	4827      	ldr	r0, [pc, #156]	@ (8001660 <debounceFSM_update+0xd4>)
 80015c2:	f000 f867 	bl	8001694 <delayRead>
		}
	break;
 80015c6:	e03d      	b.n	8001644 <debounceFSM_update+0xb8>

	case BUTTON_FALLING:
		//Chequea si paso el tiempo de 40 ms
		if(delayRead(&debounceDelay)){
 80015c8:	4825      	ldr	r0, [pc, #148]	@ (8001660 <debounceFSM_update+0xd4>)
 80015ca:	f000 f863 	bl	8001694 <delayRead>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d039      	beq.n	8001648 <debounceFSM_update+0xbc>
			//Chequear condicion de transición
			if(buttonRead == true){													// Se presionó boton de usuario
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <debounceFSM_update+0x62>
				keyPressed = true; 													// Indica tecla presionada luego de 2 lecturas en 40 ms
 80015da:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <debounceFSM_update+0xd8>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
				flanco_descendente = true; 												// Asume que en este estado hubo un flanco decendente
 80015e0:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <debounceFSM_update+0xdc>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
				actualState = BUTTON_DOWN; 											// Pasa al estado siguiente
 80015e6:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <debounceFSM_update+0xd0>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	701a      	strb	r2, [r3, #0]
			}
			else{
				actualState = BUTTON_UP; 											// Regresa al estado anterior
			}
		}
	break;
 80015ec:	e02c      	b.n	8001648 <debounceFSM_update+0xbc>
				actualState = BUTTON_UP; 											// Regresa al estado anterior
 80015ee:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <debounceFSM_update+0xd0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
	break;
 80015f4:	e028      	b.n	8001648 <debounceFSM_update+0xbc>

	case BUTTON_DOWN:
		//Chequear condicion de transición
		if(buttonRead == false){ 													// Se presionó el boton?
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f083 0301 	eor.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d024      	beq.n	800164c <debounceFSM_update+0xc0>
			actualState = BUTTON_RISING; 											// Pasa al estado siguiente Deteccion de flanco ascendente
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <debounceFSM_update+0xd0>)
 8001604:	2203      	movs	r2, #3
 8001606:	701a      	strb	r2, [r3, #0]
			delayRead(&debounceDelay);   											// Arranca cuenta de DEBOUNCE_DELAY = 40ms
 8001608:	4815      	ldr	r0, [pc, #84]	@ (8001660 <debounceFSM_update+0xd4>)
 800160a:	f000 f843 	bl	8001694 <delayRead>
		}
	break;
 800160e:	e01d      	b.n	800164c <debounceFSM_update+0xc0>

	case BUTTON_RISING:
		//Chequea si paso el tiempo de 40 ms
		if(delayRead(&debounceDelay)){
 8001610:	4813      	ldr	r0, [pc, #76]	@ (8001660 <debounceFSM_update+0xd4>)
 8001612:	f000 f83f 	bl	8001694 <delayRead>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d019      	beq.n	8001650 <debounceFSM_update+0xc4>
			//Chequear condicion de transición
			if(buttonRead == false){												// El boton de usuario regresó a estado inactivo
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f083 0301 	eor.w	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <debounceFSM_update+0xaa>
				keyPressed = false; 												// Indica tecla presionada luego de 2 lecturas en 40 ms
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <debounceFSM_update+0xd8>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
				actualState = BUTTON_UP; 											// Pasa al estado siguiente, el inicial
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <debounceFSM_update+0xd0>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
			}
			else{
				actualState = BUTTON_DOWN; 											// Regresa al estado anterior
			}
		}
	break;
 8001634:	e00c      	b.n	8001650 <debounceFSM_update+0xc4>
				actualState = BUTTON_DOWN; 											// Regresa al estado anterior
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <debounceFSM_update+0xd0>)
 8001638:	2202      	movs	r2, #2
 800163a:	701a      	strb	r2, [r3, #0]
	break;
 800163c:	e008      	b.n	8001650 <debounceFSM_update+0xc4>

	default:
		Error_Handler();
 800163e:	f7ff fda1 	bl	8001184 <Error_Handler>
	break;
 8001642:	e006      	b.n	8001652 <debounceFSM_update+0xc6>
	break;
 8001644:	bf00      	nop
 8001646:	e004      	b.n	8001652 <debounceFSM_update+0xc6>
	break;
 8001648:	bf00      	nop
 800164a:	e002      	b.n	8001652 <debounceFSM_update+0xc6>
	break;
 800164c:	bf00      	nop
 800164e:	e000      	b.n	8001652 <debounceFSM_update+0xc6>
	break;
 8001650:	bf00      	nop
	}
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000140 	.word	0x20000140
 8001660:	20000144 	.word	0x20000144
 8001664:	20000141 	.word	0x20000141
 8001668:	20000142 	.word	0x20000142

0800166c <delayInit>:
 */

#include "main.h"
#include "API_Delay.h"

void delayInit(delay_t *delay, tick_t duration){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
	delay->startTime=HAL_GetTick();
 8001676:	f000 fcc7 	bl	8002008 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	601a      	str	r2, [r3, #0]
	delay->duration=duration;				//valor que tomara al definir el tiempo de espera
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	605a      	str	r2, [r3, #4]
	delay->running=false;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	721a      	strb	r2, [r3, #8]
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <delayRead>:
bool_t delayRead(delay_t *delay){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	if(delay->running==false){
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7a1b      	ldrb	r3, [r3, #8]
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <delayRead+0x2a>
		delay->startTime=HAL_GetTick();
 80016aa:	f000 fcad 	bl	8002008 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	601a      	str	r2, [r3, #0]
		delay->running=true;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	721a      	strb	r2, [r3, #8]
		return false;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e00f      	b.n	80016de <delayRead+0x4a>
	}
	if((HAL_GetTick()-delay->startTime)>=delay->duration){
 80016be:	f000 fca3 	bl	8002008 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	1ad2      	subs	r2, r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d304      	bcc.n	80016dc <delayRead+0x48>
		delay->running=false;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	721a      	strb	r2, [r3, #8]
		return true;
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <delayRead+0x4a>
	}
	return false;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <writeLedOff_GPIO>:
 * @brief Apagar LED GPIO
 * @param led_t LDx
 * @retval ninguno
 */

void writeLedOff_GPIO(led_t LDx){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_RESET);
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <writeLedOff_GPIO+0x20>)
 80016fa:	f001 f837 	bl	800276c <HAL_GPIO_WritePin>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40020400 	.word	0x40020400

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	@ 0x50
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	2234      	movs	r2, #52	@ 0x34
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f003 fa72 	bl	8004c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <SystemClock_Config+0xd0>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a28      	ldr	r2, [pc, #160]	@ (80017dc <SystemClock_Config+0xd0>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001740:	4b26      	ldr	r3, [pc, #152]	@ (80017dc <SystemClock_Config+0xd0>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174c:	2300      	movs	r3, #0
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <SystemClock_Config+0xd4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a22      	ldr	r2, [pc, #136]	@ (80017e0 <SystemClock_Config+0xd4>)
 8001756:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <SystemClock_Config+0xd4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001768:	2301      	movs	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800176c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001770:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001772:	2302      	movs	r3, #2
 8001774:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001776:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800177c:	2308      	movs	r3, #8
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001780:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001784:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001786:	2304      	movs	r3, #4
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800178a:	2308      	movs	r3, #8
 800178c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800178e:	2302      	movs	r3, #2
 8001790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4618      	mov	r0, r3
 8001798:	f001 fef2 	bl	8003580 <HAL_RCC_OscConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017a2:	f7ff fcef 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2302      	movs	r3, #2
 80017ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	2103      	movs	r1, #3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 fcbc 	bl	8003140 <HAL_RCC_ClockConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017ce:	f7ff fcd9 	bl	8001184 <Error_Handler>
  }
}
 80017d2:	bf00      	nop
 80017d4:	3750      	adds	r7, #80	@ 0x50
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08e      	sub	sp, #56	@ 0x38
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
 80017fe:	4b96      	ldr	r3, [pc, #600]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a95      	ldr	r2, [pc, #596]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001804:	f043 0310 	orr.w	r3, r3, #16
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b93      	ldr	r3, [pc, #588]	@ (8001a58 <MX_GPIO_Init+0x274>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	623b      	str	r3, [r7, #32]
 8001814:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	4b8f      	ldr	r3, [pc, #572]	@ (8001a58 <MX_GPIO_Init+0x274>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a8e      	ldr	r2, [pc, #568]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b8c      	ldr	r3, [pc, #560]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	4b88      	ldr	r3, [pc, #544]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a87      	ldr	r2, [pc, #540]	@ (8001a58 <MX_GPIO_Init+0x274>)
 800183c:	f043 0320 	orr.w	r3, r3, #32
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b85      	ldr	r3, [pc, #532]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	4b81      	ldr	r3, [pc, #516]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a80      	ldr	r2, [pc, #512]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b7e      	ldr	r3, [pc, #504]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a79      	ldr	r2, [pc, #484]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b77      	ldr	r3, [pc, #476]	@ (8001a58 <MX_GPIO_Init+0x274>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b73      	ldr	r3, [pc, #460]	@ (8001a58 <MX_GPIO_Init+0x274>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a72      	ldr	r2, [pc, #456]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b70      	ldr	r3, [pc, #448]	@ (8001a58 <MX_GPIO_Init+0x274>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a58 <MX_GPIO_Init+0x274>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a6b      	ldr	r2, [pc, #428]	@ (8001a58 <MX_GPIO_Init+0x274>)
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b69      	ldr	r3, [pc, #420]	@ (8001a58 <MX_GPIO_Init+0x274>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b65      	ldr	r3, [pc, #404]	@ (8001a58 <MX_GPIO_Init+0x274>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a64      	ldr	r2, [pc, #400]	@ (8001a58 <MX_GPIO_Init+0x274>)
 80018c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b62      	ldr	r3, [pc, #392]	@ (8001a58 <MX_GPIO_Init+0x274>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, R2_Pin|R1_Pin, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	2148      	movs	r1, #72	@ 0x48
 80018de:	485f      	ldr	r0, [pc, #380]	@ (8001a5c <MX_GPIO_Init+0x278>)
 80018e0:	f000 ff44 	bl	800276c <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, R4_Pin|R3_Pin, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80018ea:	485d      	ldr	r0, [pc, #372]	@ (8001a60 <MX_GPIO_Init+0x27c>)
 80018ec:	f000 ff3e 	bl	800276c <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2120      	movs	r1, #32
 80018f4:	485b      	ldr	r0, [pc, #364]	@ (8001a64 <MX_GPIO_Init+0x280>)
 80018f6:	f000 ff39 	bl	800276c <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001900:	4859      	ldr	r0, [pc, #356]	@ (8001a68 <MX_GPIO_Init+0x284>)
 8001902:	f000 ff33 	bl	800276c <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Encendido_GPIO_Port, Led_Encendido_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800190c:	4854      	ldr	r0, [pc, #336]	@ (8001a60 <MX_GPIO_Init+0x27c>)
 800190e:	f000 ff2d 	bl	800276c <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Alerta_Pin|Led_Estado_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8001918:	4850      	ldr	r0, [pc, #320]	@ (8001a5c <MX_GPIO_Init+0x278>)
 800191a:	f000 ff27 	bl	800276c <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2140      	movs	r1, #64	@ 0x40
 8001922:	4852      	ldr	r0, [pc, #328]	@ (8001a6c <MX_GPIO_Init+0x288>)
 8001924:	f000 ff22 	bl	800276c <HAL_GPIO_WritePin>
  /*Configure GPIO pins : R2_Pin R1_Pin Led_Alerta_Pin Led_Estado_Pin */
  GPIO_InitStruct.Pin = Led_Alerta_Pin|Led_Estado_Pin;
 8001928:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800193e:	4619      	mov	r1, r3
 8001940:	4846      	ldr	r0, [pc, #280]	@ (8001a5c <MX_GPIO_Init+0x278>)
 8001942:	f000 fd67 	bl	8002414 <HAL_GPIO_Init>
  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001946:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800194c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800195a:	4619      	mov	r1, r3
 800195c:	4844      	ldr	r0, [pc, #272]	@ (8001a70 <MX_GPIO_Init+0x28c>)
 800195e:	f000 fd59 	bl	8002414 <HAL_GPIO_Init>
  /*Configure GPIO pins : R4_Pin R3_Pin Led_Encendido_Pin */
  GPIO_InitStruct.Pin = Led_Encendido_Pin;
 8001962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	4839      	ldr	r0, [pc, #228]	@ (8001a60 <MX_GPIO_Init+0x27c>)
 800197c:	f000 fd4a 	bl	8002414 <HAL_GPIO_Init>
  /*Configure GPIO pin : Sirena_Pin */
  GPIO_InitStruct.Pin = Sirena_Pin;
 8001980:	2320      	movs	r3, #32
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001988:	2302      	movs	r3, #2
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Sirena_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	4833      	ldr	r0, [pc, #204]	@ (8001a64 <MX_GPIO_Init+0x280>)
 8001998:	f000 fd3c 	bl	8002414 <HAL_GPIO_Init>
  /*Configure GPIO pins : Sensor_PIR_Pin Sensor_Magnetico_1_Pin */
  GPIO_InitStruct.Pin = Sensor_PIR_Pin|Sensor_Magnetico_1_Pin;
 800199c:	23c0      	movs	r3, #192	@ 0xc0
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019a0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	4619      	mov	r1, r3
 80019b0:	482c      	ldr	r0, [pc, #176]	@ (8001a64 <MX_GPIO_Init+0x280>)
 80019b2:	f000 fd2f 	bl	8002414 <HAL_GPIO_Init>
  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019b6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019cc:	4619      	mov	r1, r3
 80019ce:	4826      	ldr	r0, [pc, #152]	@ (8001a68 <MX_GPIO_Init+0x284>)
 80019d0:	f000 fd20 	bl	8002414 <HAL_GPIO_Init>
  /*Configure GPIO pin : Sensor_Magnetico_2_Pin */
  GPIO_InitStruct.Pin = Sensor_Magnetico_2_Pin;
 80019d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Sensor_Magnetico_2_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e8:	4619      	mov	r1, r3
 80019ea:	4822      	ldr	r0, [pc, #136]	@ (8001a74 <MX_GPIO_Init+0x290>)
 80019ec:	f000 fd12 	bl	8002414 <HAL_GPIO_Init>
  /*Configure GPIO pin : Sensor_Magnetico_3_Pin */
  GPIO_InitStruct.Pin = Sensor_Magnetico_3_Pin;
 80019f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Sensor_Magnetico_3_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	481b      	ldr	r0, [pc, #108]	@ (8001a74 <MX_GPIO_Init+0x290>)
 8001a08:	f000 fd04 	bl	8002414 <HAL_GPIO_Init>
  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a0c:	2340      	movs	r3, #64	@ 0x40
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4812      	ldr	r0, [pc, #72]	@ (8001a6c <MX_GPIO_Init+0x288>)
 8001a24:	f000 fcf6 	bl	8002414 <HAL_GPIO_Init>
  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a28:	2380      	movs	r3, #128	@ 0x80
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <MX_GPIO_Init+0x288>)
 8001a3c:	f000 fcea 	bl	8002414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2028      	movs	r0, #40	@ 0x28
 8001a46:	f000 fc0e 	bl	8002266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a4a:	2028      	movs	r0, #40	@ 0x28
 8001a4c:	f000 fc27 	bl	800229e <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a50:	bf00      	nop
 8001a52:	3738      	adds	r7, #56	@ 0x38
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40021400 	.word	0x40021400
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40021800 	.word	0x40021800
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020c00 	.word	0x40020c00

08001a78 <enableSensorInterrupts>:
/*****************************************************************************************************************
 * @brief: Habilita las interrupciones en los pines GPIOs correspondientes a los sensores.
 * @param: void
 * @retval: void
******************************************************************************************************************/
void enableSensorInterrupts(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);  // Habilita interrupciones para sensores magnéticos
 8001a7c:	2028      	movs	r0, #40	@ 0x28
 8001a7e:	f000 fc0e 	bl	800229e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);    // Habilita interrupciones para sensor PIR
 8001a82:	2017      	movs	r0, #23
 8001a84:	f000 fc0b 	bl	800229e <HAL_NVIC_EnableIRQ>
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <disableSensorInterrupts>:
/*****************************************************************************************************************
 * @brief: Deshabilita las interrupciones en los pines GPIOs correspondientes a los sensores.
 * @param: void
 * @retval: void
******************************************************************************************************************/
void disableSensorInterrupts(void) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001a90:	2028      	movs	r0, #40	@ 0x28
 8001a92:	f000 fc12 	bl	80022ba <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001a96:	2017      	movs	r0, #23
 8001a98:	f000 fc0f 	bl	80022ba <HAL_NVIC_DisableIRQ>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_GPIO_EXTI_Callback>:
 * @brief: Callback de interrupción de los pines GPIO.
 *         Maneja interrupciones del teclado matricial y los sensores de la alarma.
 * @param: GPIO_Pin - Pin GPIO que generó la interrupción.
 * @retval: void
******************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
    //Caso 1: Sensores de la alarma
    if (currentState == ACTIVE_ALARM) {  // Solo procesar interrupciones si la alarma está activada
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d117      	bne.n	8001ae2 <HAL_GPIO_EXTI_Callback+0x42>
        if (GPIO_Pin == Sensor_Magnetico_1_Pin ||
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	2b80      	cmp	r3, #128	@ 0x80
 8001ab6:	d007      	beq.n	8001ac8 <HAL_GPIO_EXTI_Callback+0x28>
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_EXTI_Callback+0x28>
            GPIO_Pin == Sensor_Magnetico_2_Pin ||
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ac6:	d102      	bne.n	8001ace <HAL_GPIO_EXTI_Callback+0x2e>
            GPIO_Pin == Sensor_Magnetico_3_Pin) {
            AlarmTriggered();  // 🚨 Se detectó la apertura de una puerta o ventana
 8001ac8:	f7ff f874 	bl	8000bb4 <AlarmTriggered>
            return;
 8001acc:	e01a      	b.n	8001b04 <HAL_GPIO_EXTI_Callback+0x64>
        }
        else if (GPIO_Pin == Sensor_PIR_Pin && includeMotionSensor) {
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	2b40      	cmp	r3, #64	@ 0x40
 8001ad2:	d106      	bne.n	8001ae2 <HAL_GPIO_EXTI_Callback+0x42>
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <HAL_GPIO_EXTI_Callback+0x42>
            AlarmTriggered();  // 🚨 Se detectó movimiento con el sensor PIR
 8001adc:	f7ff f86a 	bl	8000bb4 <AlarmTriggered>
            return;
 8001ae0:	e010      	b.n	8001b04 <HAL_GPIO_EXTI_Callback+0x64>
        }
    }

    //Caso 2: Teclado matricial
    if (GPIO_Pin == C1_PIN || GPIO_Pin == C2_PIN || GPIO_Pin == C3_PIN) {
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d005      	beq.n	8001af4 <HAL_GPIO_EXTI_Callback+0x54>
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	d002      	beq.n	8001af4 <HAL_GPIO_EXTI_Callback+0x54>
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d107      	bne.n	8001b04 <HAL_GPIO_EXTI_Callback+0x64>
        if (delayRead(&debounce_delay)) {  // Verifica debounce antes de escanear
 8001af4:	4807      	ldr	r0, [pc, #28]	@ (8001b14 <HAL_GPIO_EXTI_Callback+0x74>)
 8001af6:	f7ff fdcd 	bl	8001694 <delayRead>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_GPIO_EXTI_Callback+0x64>
            scan_keypad();  // Escanear teclado y agregar tecla al buffer
 8001b00:	f000 f9bc 	bl	8001e7c <scan_keypad>
        }
    }
}
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200000a5 	.word	0x200000a5
 8001b10:	200000a6 	.word	0x200000a6
 8001b14:	200001c0 	.word	0x200001c0

08001b18 <lcd_init>:
static void lcd_send_command(uint8_t cmd);
static void lcd_send_data(uint8_t data);
static void lcd_send(uint8_t value, uint8_t mode);
static void lcd_write_nibble(uint8_t nibble);

void lcd_init() {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Tiempo de inicio según especificación HD44780
 8001b1c:	2032      	movs	r0, #50	@ 0x32
 8001b1e:	f000 fa7f 	bl	8002020 <HAL_Delay>
    lcd_send_command(0x30);
 8001b22:	2030      	movs	r0, #48	@ 0x30
 8001b24:	f000 f85c 	bl	8001be0 <lcd_send_command>
    HAL_Delay(5);
 8001b28:	2005      	movs	r0, #5
 8001b2a:	f000 fa79 	bl	8002020 <HAL_Delay>
    lcd_send_command(0x30);
 8001b2e:	2030      	movs	r0, #48	@ 0x30
 8001b30:	f000 f856 	bl	8001be0 <lcd_send_command>
    HAL_Delay(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f000 fa73 	bl	8002020 <HAL_Delay>
    lcd_send_command(0x30);
 8001b3a:	2030      	movs	r0, #48	@ 0x30
 8001b3c:	f000 f850 	bl	8001be0 <lcd_send_command>
    lcd_send_command(0x20); // Cambiar a modo 4 bits
 8001b40:	2020      	movs	r0, #32
 8001b42:	f000 f84d 	bl	8001be0 <lcd_send_command>

    lcd_send_command(0x28); // Configuración: LCD 2 líneas, matriz 5x8
 8001b46:	2028      	movs	r0, #40	@ 0x28
 8001b48:	f000 f84a 	bl	8001be0 <lcd_send_command>
    lcd_send_command(0x08); // Apagar display
 8001b4c:	2008      	movs	r0, #8
 8001b4e:	f000 f847 	bl	8001be0 <lcd_send_command>
    lcd_send_command(0x01); // Limpiar pantalla
 8001b52:	2001      	movs	r0, #1
 8001b54:	f000 f844 	bl	8001be0 <lcd_send_command>
    HAL_Delay(2);
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f000 fa61 	bl	8002020 <HAL_Delay>
    lcd_send_command(0x06); // Configurar modo de entrada
 8001b5e:	2006      	movs	r0, #6
 8001b60:	f000 f83e 	bl	8001be0 <lcd_send_command>
    lcd_send_command(0x0C); // Encender display, cursor apagado
 8001b64:	200c      	movs	r0, #12
 8001b66:	f000 f83b 	bl	8001be0 <lcd_send_command>
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <lcd_clear>:

void lcd_clear() {
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
    lcd_send_command(0x01); // Limpiar pantalla
 8001b72:	2001      	movs	r0, #1
 8001b74:	f000 f834 	bl	8001be0 <lcd_send_command>
    HAL_Delay(2);
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f000 fa51 	bl	8002020 <HAL_Delay>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col) {
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460a      	mov	r2, r1
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	71bb      	strb	r3, [r7, #6]
    uint8_t addresses[] = {0x80, 0xC0}; // Dirección DDRAM para la primera y segunda línea
 8001b92:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8001b96:	81bb      	strh	r3, [r7, #12]
    lcd_send_command(addresses[row] + col);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	3310      	adds	r3, #16
 8001b9c:	443b      	add	r3, r7
 8001b9e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f819 	bl	8001be0 <lcd_send_command>
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <lcd_print>:

void lcd_print(const char *str) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001bbe:	e006      	b.n	8001bce <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f817 	bl	8001bfc <lcd_send_data>
    while (*str) {
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f4      	bne.n	8001bc0 <lcd_print+0xa>
    }
}
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <lcd_send_command>:
void lcd_print_num(int num) {
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "%d", num);
    lcd_print(buffer);
}
static void lcd_send_command(uint8_t cmd) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
    lcd_send(cmd, 0x00);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f812 	bl	8001c18 <lcd_send>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <lcd_send_data>:

static void lcd_send_data(uint8_t data) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
    lcd_send(data, 0x01);
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f804 	bl	8001c18 <lcd_send>
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <lcd_send>:

static void lcd_send(uint8_t value, uint8_t mode) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460a      	mov	r2, r1
 8001c22:	71fb      	strb	r3, [r7, #7]
 8001c24:	4613      	mov	r3, r2
 8001c26:	71bb      	strb	r3, [r7, #6]
    lcd_control = lcd_backlight | mode;
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <lcd_send+0x40>)
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	79bb      	ldrb	r3, [r7, #6]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <lcd_send+0x44>)
 8001c34:	701a      	strb	r2, [r3, #0]
    lcd_write_nibble(value & 0xF0);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f023 030f 	bic.w	r3, r3, #15
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f80e 	bl	8001c60 <lcd_write_nibble>
    lcd_write_nibble((value << 4) & 0xF0);
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f808 	bl	8001c60 <lcd_write_nibble>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000000c 	.word	0x2000000c
 8001c5c:	200001a4 	.word	0x200001a4

08001c60 <lcd_write_nibble>:

static void lcd_write_nibble(uint8_t nibble) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
    uint8_t data = nibble | lcd_control | 0x04; // Habilitar bit Enable
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <lcd_write_nibble+0x58>)
 8001c6c:	781a      	ldrb	r2, [r3, #0]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001c7c:	f107 020f 	add.w	r2, r7, #15
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2301      	movs	r3, #1
 8001c88:	214e      	movs	r1, #78	@ 0x4e
 8001c8a:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <lcd_write_nibble+0x5c>)
 8001c8c:	f000 fefe 	bl	8002a8c <HAL_I2C_Master_Transmit>
    data &= ~0x04; // Deshabilitar bit Enable
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001c9a:	f107 020f 	add.w	r2, r7, #15
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	214e      	movs	r1, #78	@ 0x4e
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <lcd_write_nibble+0x5c>)
 8001caa:	f000 feef 	bl	8002a8c <HAL_I2C_Master_Transmit>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200001a4 	.word	0x200001a4
 8001cbc:	20000150 	.word	0x20000150

08001cc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <MX_I2C2_Init+0x50>)
 8001cc6:	4a13      	ldr	r2, [pc, #76]	@ (8001d14 <MX_I2C2_Init+0x54>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_I2C2_Init+0x50>)
 8001ccc:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <MX_I2C2_Init+0x58>)
 8001cce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_I2C2_Init+0x50>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_I2C2_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_I2C2_Init+0x50>)
 8001cde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ce2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <MX_I2C2_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_I2C2_Init+0x50>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <MX_I2C2_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_I2C2_Init+0x50>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	@ (8001d10 <MX_I2C2_Init+0x50>)
 8001cfe:	f000 fd81 	bl	8002804 <HAL_I2C_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d08:	f7ff fa3c 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000150 	.word	0x20000150
 8001d14:	40005800 	.word	0x40005800
 8001d18:	000186a0 	.word	0x000186a0

08001d1c <keypad_init>:
/***********************************************************************************************************************
 * @brief Inicializacion de los pines GPIOs / Habilita las interrupciones para las columnas / Inicializa las filas en 1
 * @param void
 * @retval void
************************************************************************************************************************/
void keypad_init(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]

    // Configuración de los pines de columna como entradas con interrupciones en flanco descendente
    GPIO_InitStruct.Pin = C1_PIN | C2_PIN | C3_PIN;
 8001d30:	2334      	movs	r3, #52	@ 0x34
 8001d32:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d34:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d38:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(C_PORT, &GPIO_InitStruct);
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	481c      	ldr	r0, [pc, #112]	@ (8001db4 <keypad_init+0x98>)
 8001d44:	f000 fb66 	bl	8002414 <HAL_GPIO_Init>

    // Configuración de los pines de fila como salidas push-pull
    GPIO_InitStruct.Pin = R1_PIN | R2_PIN | R3_PIN | R4_PIN;
 8001d48:	f44f 73e4 	mov.w	r3, #456	@ 0x1c8
 8001d4c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(R_PORT, &GPIO_InitStruct);
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4816      	ldr	r0, [pc, #88]	@ (8001db8 <keypad_init+0x9c>)
 8001d60:	f000 fb58 	bl	8002414 <HAL_GPIO_Init>

    // Inicialmente, todas las filas en estado ALTO
    HAL_GPIO_WritePin(R_PORT, R1_PIN | R2_PIN | R3_PIN | R4_PIN, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8001d6a:	4813      	ldr	r0, [pc, #76]	@ (8001db8 <keypad_init+0x9c>)
 8001d6c:	f000 fcfe 	bl	800276c <HAL_GPIO_WritePin>

    // Habilitar interrupciones para las columnas
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2008      	movs	r0, #8
 8001d76:	f000 fa76 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d7a:	2008      	movs	r0, #8
 8001d7c:	f000 fa8f 	bl	800229e <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	200a      	movs	r0, #10
 8001d86:	f000 fa6e 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f000 fa87 	bl	800229e <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2017      	movs	r0, #23
 8001d96:	f000 fa66 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d9a:	2017      	movs	r0, #23
 8001d9c:	f000 fa7f 	bl	800229e <HAL_NVIC_EnableIRQ>

    // Inicialización del debounce y delay
    debounceFSM_init();
 8001da0:	f7ff fbdc 	bl	800155c <debounceFSM_init>
    delayInit(&debounce_delay, 40);
 8001da4:	2128      	movs	r1, #40	@ 0x28
 8001da6:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <keypad_init+0xa0>)
 8001da8:	f7ff fc60 	bl	800166c <delayInit>
}
 8001dac:	bf00      	nop
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40021400 	.word	0x40021400
 8001dbc:	200001c0 	.word	0x200001c0

08001dc0 <buffer_add>:
/*****************************************************************************************************************
 * @brief: Agrega una tecla al buffer
 * @param recibe variable tipo caracter para agregar al buffer
 * @retval void
******************************************************************************************************************/
static void buffer_add(char key) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
    key_buffer[buffer_head] = key;
 8001dca:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <buffer_add+0x5c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4914      	ldr	r1, [pc, #80]	@ (8001e20 <buffer_add+0x60>)
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	54ca      	strb	r2, [r1, r3]
    buffer_head = (buffer_head + 1) % BUFFER_SIZE;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <buffer_add+0x5c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	425a      	negs	r2, r3
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	f002 020f 	and.w	r2, r2, #15
 8001de4:	bf58      	it	pl
 8001de6:	4253      	negpl	r3, r2
 8001de8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e1c <buffer_add+0x5c>)
 8001dea:	6013      	str	r3, [r2, #0]
    if (buffer_head == buffer_tail) {
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <buffer_add+0x5c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <buffer_add+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d10b      	bne.n	8001e10 <buffer_add+0x50>
        buffer_tail = (buffer_tail + 1) % BUFFER_SIZE; // Sobrescribe la tecla más antigua si el buffer está lleno
 8001df8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <buffer_add+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	425a      	negs	r2, r3
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	f002 020f 	and.w	r2, r2, #15
 8001e08:	bf58      	it	pl
 8001e0a:	4253      	negpl	r3, r2
 8001e0c:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <buffer_add+0x64>)
 8001e0e:	6013      	str	r3, [r2, #0]
    }
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	200001b8 	.word	0x200001b8
 8001e20:	200001a8 	.word	0x200001a8
 8001e24:	200001bc 	.word	0x200001bc

08001e28 <buffer_get>:
/*****************************************************************************************************************
 * @brief: Obtiene una tecla del buffer
 * @param void
 * @retval Devuelve la tecla presionada
******************************************************************************************************************/
char buffer_get(void) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
    if (buffer_head == buffer_tail) return 0; // Si el buffer está vacío
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <buffer_get+0x48>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <buffer_get+0x4c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d101      	bne.n	8001e3e <buffer_get+0x16>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e011      	b.n	8001e62 <buffer_get+0x3a>
    char key = key_buffer[buffer_tail];
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <buffer_get+0x4c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <buffer_get+0x50>)
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	71fb      	strb	r3, [r7, #7]
    buffer_tail = (buffer_tail + 1) % BUFFER_SIZE;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <buffer_get+0x4c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	425a      	negs	r2, r3
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	f002 020f 	and.w	r2, r2, #15
 8001e58:	bf58      	it	pl
 8001e5a:	4253      	negpl	r3, r2
 8001e5c:	4a05      	ldr	r2, [pc, #20]	@ (8001e74 <buffer_get+0x4c>)
 8001e5e:	6013      	str	r3, [r2, #0]
    return key;
 8001e60:	79fb      	ldrb	r3, [r7, #7]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	200001b8 	.word	0x200001b8
 8001e74:	200001bc 	.word	0x200001bc
 8001e78:	200001a8 	.word	0x200001a8

08001e7c <scan_keypad>:
/*****************************************************************************************************************
 * @brief: Escanea el teclado y agrega teclas al buffer usando la FSM de debounce
 * @param: void
 * @retval: void
******************************************************************************************************************/
void scan_keypad(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
    for (int row = 0; row < ROWS; row++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	e03f      	b.n	8001f08 <scan_keypad+0x8c>
        HAL_GPIO_WritePin(R_PORT, row_pins[row], GPIO_PIN_RESET);
 8001e88:	4a23      	ldr	r2, [pc, #140]	@ (8001f18 <scan_keypad+0x9c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e90:	2200      	movs	r2, #0
 8001e92:	4619      	mov	r1, r3
 8001e94:	4821      	ldr	r0, [pc, #132]	@ (8001f1c <scan_keypad+0xa0>)
 8001e96:	f000 fc69 	bl	800276c <HAL_GPIO_WritePin>
        for (int col = 0; col < COLS; col++) {
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	e024      	b.n	8001eea <scan_keypad+0x6e>
            debounceFSM_update(HAL_GPIO_ReadPin(C_PORT, col_pins[col]));
 8001ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f20 <scan_keypad+0xa4>)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	481e      	ldr	r0, [pc, #120]	@ (8001f24 <scan_keypad+0xa8>)
 8001eac:	f000 fc46 	bl	800273c <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	2301      	movne	r3, #1
 8001eb8:	2300      	moveq	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fb65 	bl	800158c <debounceFSM_update>
            if (readKey()) { // Se detectó una pulsación estable
 8001ec2:	f7ff fb2f 	bl	8001524 <readKey>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <scan_keypad+0x68>
                buffer_add(keymap[row][col]);
 8001ecc:	4916      	ldr	r1, [pc, #88]	@ (8001f28 <scan_keypad+0xac>)
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	18ca      	adds	r2, r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff6e 	bl	8001dc0 <buffer_add>
        for (int col = 0; col < COLS; col++) {
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	ddd7      	ble.n	8001ea0 <scan_keypad+0x24>
            }
        }
        HAL_GPIO_WritePin(R_PORT, row_pins[row], GPIO_PIN_SET);
 8001ef0:	4a09      	ldr	r2, [pc, #36]	@ (8001f18 <scan_keypad+0x9c>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4619      	mov	r1, r3
 8001efc:	4807      	ldr	r0, [pc, #28]	@ (8001f1c <scan_keypad+0xa0>)
 8001efe:	f000 fc35 	bl	800276c <HAL_GPIO_WritePin>
    for (int row = 0; row < ROWS; row++) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3301      	adds	r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	ddbc      	ble.n	8001e88 <scan_keypad+0xc>
    }
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	2000001c 	.word	0x2000001c
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	20000024 	.word	0x20000024
 8001f24:	40021000 	.word	0x40021000
 8001f28:	20000010 	.word	0x20000010

08001f2c <keypad_get_key>:
/*****************************************************************************************************************
 * @brief: Obtiene una tecla del buffer
 * @param void
 * @retval void
******************************************************************************************************************/
char keypad_get_key(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
    return buffer_get();
 8001f30:	f7ff ff7a 	bl	8001e28 <buffer_get>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	@ (8001f7c <HAL_Init+0x40>)
 8001f46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_Init+0x40>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	@ (8001f7c <HAL_Init+0x40>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 f973 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f000 f808 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff f90e 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_InitTick+0x54>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_InitTick+0x58>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f999 	bl	80022d6 <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f000 f953 	bl	8002266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	@ (8001fdc <HAL_InitTick+0x5c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	20000030 	.word	0x20000030
 8001fdc:	2000002c 	.word	0x2000002c

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000030 	.word	0x20000030
 8002004:	200001cc 	.word	0x200001cc

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	200001cc 	.word	0x200001cc

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000030 	.word	0x20000030

08002068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	@ (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db12      	blt.n	8002140 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	490a      	ldr	r1, [pc, #40]	@ (800214c <__NVIC_DisableIRQ+0x44>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	3320      	adds	r3, #32
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002134:	f3bf 8f4f 	dsb	sy
}
 8002138:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800213a:	f3bf 8f6f 	isb	sy
}
 800213e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	@ (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	@ (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	@ 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	@ 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	210f      	movs	r1, #15
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f7ff ff8e 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	@ (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff05 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002278:	f7ff ff1a 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 800227c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff ff8e 	bl	80021a4 <NVIC_EncodePriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff5d 	bl	8002150 <__NVIC_SetPriority>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff0d 	bl	80020cc <__NVIC_EnableIRQ>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff1d 	bl	8002108 <__NVIC_DisableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ff94 	bl	800220c <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff fe84 	bl	8002008 <HAL_GetTick>
 8002300:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d008      	beq.n	8002320 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e052      	b.n	80023c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0216 	bic.w	r2, r2, #22
 800232e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800233e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d103      	bne.n	8002350 <HAL_DMA_Abort+0x62>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0208 	bic.w	r2, r2, #8
 800235e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002370:	e013      	b.n	800239a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002372:	f7ff fe49 	bl	8002008 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b05      	cmp	r3, #5
 800237e:	d90c      	bls.n	800239a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2203      	movs	r2, #3
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e015      	b.n	80023c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e4      	bne.n	8002372 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ac:	223f      	movs	r2, #63	@ 0x3f
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d004      	beq.n	80023ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2280      	movs	r2, #128	@ 0x80
 80023e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e00c      	b.n	8002406 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2205      	movs	r2, #5
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	@ 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e165      	b.n	80026fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8154 	bne.w	80026f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	2b02      	cmp	r3, #2
 8002464:	d130      	bne.n	80024c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d017      	beq.n	8002504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80ae 	beq.w	80026f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b5d      	ldr	r3, [pc, #372]	@ (8002714 <HAL_GPIO_Init+0x300>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002714 <HAL_GPIO_Init+0x300>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002714 <HAL_GPIO_Init+0x300>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a58      	ldr	r2, [pc, #352]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4f      	ldr	r2, [pc, #316]	@ (800271c <HAL_GPIO_Init+0x308>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d025      	beq.n	800262e <HAL_GPIO_Init+0x21a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002720 <HAL_GPIO_Init+0x30c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01f      	beq.n	800262a <HAL_GPIO_Init+0x216>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002724 <HAL_GPIO_Init+0x310>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d019      	beq.n	8002626 <HAL_GPIO_Init+0x212>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002728 <HAL_GPIO_Init+0x314>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0x20e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4b      	ldr	r2, [pc, #300]	@ (800272c <HAL_GPIO_Init+0x318>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00d      	beq.n	800261e <HAL_GPIO_Init+0x20a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4a      	ldr	r2, [pc, #296]	@ (8002730 <HAL_GPIO_Init+0x31c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x206>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a49      	ldr	r2, [pc, #292]	@ (8002734 <HAL_GPIO_Init+0x320>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x202>
 8002612:	2306      	movs	r3, #6
 8002614:	e00c      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 8002616:	2307      	movs	r3, #7
 8002618:	e00a      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800261a:	2305      	movs	r3, #5
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800261e:	2304      	movs	r3, #4
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800262e:	2300      	movs	r3, #0
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002640:	4935      	ldr	r1, [pc, #212]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264e:	4b3a      	ldr	r3, [pc, #232]	@ (8002738 <HAL_GPIO_Init+0x324>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002672:	4a31      	ldr	r2, [pc, #196]	@ (8002738 <HAL_GPIO_Init+0x324>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002678:	4b2f      	ldr	r3, [pc, #188]	@ (8002738 <HAL_GPIO_Init+0x324>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800269c:	4a26      	ldr	r2, [pc, #152]	@ (8002738 <HAL_GPIO_Init+0x324>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a2:	4b25      	ldr	r3, [pc, #148]	@ (8002738 <HAL_GPIO_Init+0x324>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002738 <HAL_GPIO_Init+0x324>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <HAL_GPIO_Init+0x324>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f0:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_GPIO_Init+0x324>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	f67f ae96 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3724      	adds	r7, #36	@ 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40013800 	.word	0x40013800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400
 8002724:	40020800 	.word	0x40020800
 8002728:	40020c00 	.word	0x40020c00
 800272c:	40021000 	.word	0x40021000
 8002730:	40021400 	.word	0x40021400
 8002734:	40021800 	.word	0x40021800
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e001      	b.n	800275e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
 8002778:	4613      	mov	r3, r2
 800277a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800277c:	787b      	ldrb	r3, [r7, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002788:	e003      	b.n	8002792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	041a      	lsls	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	619a      	str	r2, [r3, #24]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800279e:	b480      	push	{r7}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b0:	887a      	ldrh	r2, [r7, #2]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4013      	ands	r3, r2
 80027b6:	041a      	lsls	r2, r3, #16
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	400b      	ands	r3, r1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	619a      	str	r2, [r3, #24]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ea:	4a05      	ldr	r2, [pc, #20]	@ (8002800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f954 	bl	8001aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40013c00 	.word	0x40013c00

08002804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e12b      	b.n	8002a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fcd8 	bl	80011e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	@ 0x24
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002868:	f000 fe62 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 800286c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a81      	ldr	r2, [pc, #516]	@ (8002a78 <HAL_I2C_Init+0x274>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d807      	bhi.n	8002888 <HAL_I2C_Init+0x84>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a80      	ldr	r2, [pc, #512]	@ (8002a7c <HAL_I2C_Init+0x278>)
 800287c:	4293      	cmp	r3, r2
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e006      	b.n	8002896 <HAL_I2C_Init+0x92>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a80 <HAL_I2C_Init+0x27c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0e7      	b.n	8002a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a78      	ldr	r2, [pc, #480]	@ (8002a84 <HAL_I2C_Init+0x280>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0c9b      	lsrs	r3, r3, #18
 80028a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002a78 <HAL_I2C_Init+0x274>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d802      	bhi.n	80028d8 <HAL_I2C_Init+0xd4>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3301      	adds	r3, #1
 80028d6:	e009      	b.n	80028ec <HAL_I2C_Init+0xe8>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	4a69      	ldr	r2, [pc, #420]	@ (8002a88 <HAL_I2C_Init+0x284>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	3301      	adds	r3, #1
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	495c      	ldr	r1, [pc, #368]	@ (8002a78 <HAL_I2C_Init+0x274>)
 8002908:	428b      	cmp	r3, r1
 800290a:	d819      	bhi.n	8002940 <HAL_I2C_Init+0x13c>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1e59      	subs	r1, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fbb1 f3f3 	udiv	r3, r1, r3
 800291a:	1c59      	adds	r1, r3, #1
 800291c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002920:	400b      	ands	r3, r1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_I2C_Init+0x138>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1e59      	subs	r1, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fbb1 f3f3 	udiv	r3, r1, r3
 8002934:	3301      	adds	r3, #1
 8002936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293a:	e051      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 800293c:	2304      	movs	r3, #4
 800293e:	e04f      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d111      	bne.n	800296c <HAL_I2C_Init+0x168>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e58      	subs	r0, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e012      	b.n	8002992 <HAL_I2C_Init+0x18e>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	0099      	lsls	r1, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Init+0x196>
 8002996:	2301      	movs	r3, #1
 8002998:	e022      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10e      	bne.n	80029c0 <HAL_I2C_Init+0x1bc>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1e58      	subs	r0, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	440b      	add	r3, r1
 80029b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1e58      	subs	r0, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	0099      	lsls	r1, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d6:	3301      	adds	r3, #1
 80029d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	6809      	ldr	r1, [r1, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6911      	ldr	r1, [r2, #16]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68d2      	ldr	r2, [r2, #12]
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	000186a0 	.word	0x000186a0
 8002a7c:	001e847f 	.word	0x001e847f
 8002a80:	003d08ff 	.word	0x003d08ff
 8002a84:	431bde83 	.word	0x431bde83
 8002a88:	10624dd3 	.word	0x10624dd3

08002a8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	461a      	mov	r2, r3
 8002a98:	460b      	mov	r3, r1
 8002a9a:	817b      	strh	r3, [r7, #10]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7ff fab2 	bl	8002008 <HAL_GetTick>
 8002aa4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	f040 80e0 	bne.w	8002c74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2319      	movs	r3, #25
 8002aba:	2201      	movs	r2, #1
 8002abc:	4970      	ldr	r1, [pc, #448]	@ (8002c80 <HAL_I2C_Master_Transmit+0x1f4>)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f964 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
 8002acc:	e0d3      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_I2C_Master_Transmit+0x50>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e0cc      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d007      	beq.n	8002b02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2221      	movs	r2, #33	@ 0x21
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	893a      	ldrh	r2, [r7, #8]
 8002b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a50      	ldr	r2, [pc, #320]	@ (8002c84 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b44:	8979      	ldrh	r1, [r7, #10]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	6a3a      	ldr	r2, [r7, #32]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f89c 	bl	8002c88 <I2C_MasterRequestWrite>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e08d      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b70:	e066      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	6a39      	ldr	r1, [r7, #32]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fa22 	bl	8002fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00d      	beq.n	8002b9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d107      	bne.n	8002b9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06b      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	781a      	ldrb	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d11b      	bne.n	8002c14 <HAL_I2C_Master_Transmit+0x188>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d017      	beq.n	8002c14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	6a39      	ldr	r1, [r7, #32]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fa19 	bl	8003050 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d107      	bne.n	8002c3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e01a      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d194      	bne.n	8002b72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e000      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	00100002 	.word	0x00100002
 8002c84:	ffff0000 	.word	0xffff0000

08002c88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	460b      	mov	r3, r1
 8002c96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d006      	beq.n	8002cb2 <I2C_MasterRequestWrite+0x2a>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d003      	beq.n	8002cb2 <I2C_MasterRequestWrite+0x2a>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cb0:	d108      	bne.n	8002cc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e00b      	b.n	8002cdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	2b12      	cmp	r3, #18
 8002cca:	d107      	bne.n	8002cdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f84f 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d02:	d103      	bne.n	8002d0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e035      	b.n	8002d7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d18:	d108      	bne.n	8002d2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d28:	611a      	str	r2, [r3, #16]
 8002d2a:	e01b      	b.n	8002d64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d2c:	897b      	ldrh	r3, [r7, #10]
 8002d2e:	11db      	asrs	r3, r3, #7
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 0306 	and.w	r3, r3, #6
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f063 030f 	orn	r3, r3, #15
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	490e      	ldr	r1, [pc, #56]	@ (8002d84 <I2C_MasterRequestWrite+0xfc>)
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f898 	bl	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e010      	b.n	8002d7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4907      	ldr	r1, [pc, #28]	@ (8002d88 <I2C_MasterRequestWrite+0x100>)
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f888 	bl	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	00010008 	.word	0x00010008
 8002d88:	00010002 	.word	0x00010002

08002d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9c:	e048      	b.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d044      	beq.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7ff f92f 	bl	8002008 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d139      	bne.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	0c1b      	lsrs	r3, r3, #16
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d10d      	bne.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	e00c      	b.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	43da      	mvns	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d116      	bne.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e023      	b.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	0c1b      	lsrs	r3, r3, #16
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10d      	bne.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	43da      	mvns	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4013      	ands	r3, r2
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	e00c      	b.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	43da      	mvns	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4013      	ands	r3, r2
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d093      	beq.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e8e:	e071      	b.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9e:	d123      	bne.n	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f043 0204 	orr.w	r2, r3, #4
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e067      	b.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d041      	beq.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef0:	f7ff f88a 	bl	8002008 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d302      	bcc.n	8002f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d136      	bne.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d10c      	bne.n	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bf14      	ite	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	2300      	moveq	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	e00b      	b.n	8002f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	43da      	mvns	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e021      	b.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	0c1b      	lsrs	r3, r3, #16
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d10c      	bne.n	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	43da      	mvns	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e00b      	b.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f af6d 	bne.w	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fcc:	e034      	b.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f886 	bl	80030e0 <I2C_IsAcknowledgeFailed>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e034      	b.n	8003048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d028      	beq.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7ff f80f 	bl	8002008 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11d      	bne.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003006:	2b80      	cmp	r3, #128	@ 0x80
 8003008:	d016      	beq.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e007      	b.n	8003048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003042:	2b80      	cmp	r3, #128	@ 0x80
 8003044:	d1c3      	bne.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800305c:	e034      	b.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f83e 	bl	80030e0 <I2C_IsAcknowledgeFailed>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e034      	b.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d028      	beq.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe ffc7 	bl	8002008 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11d      	bne.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b04      	cmp	r3, #4
 8003098:	d016      	beq.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e007      	b.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d1c3      	bne.n	800305e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f6:	d11b      	bne.n	8003130 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003100:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	f043 0204 	orr.w	r2, r3, #4
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0cc      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b68      	ldr	r3, [pc, #416]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d90c      	bls.n	800317c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b65      	ldr	r3, [pc, #404]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b63      	ldr	r3, [pc, #396]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b8      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b59      	ldr	r3, [pc, #356]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a58      	ldr	r2, [pc, #352]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800319e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ac:	4b53      	ldr	r3, [pc, #332]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a52      	ldr	r2, [pc, #328]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b50      	ldr	r3, [pc, #320]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	494d      	ldr	r1, [pc, #308]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d044      	beq.n	8003260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b47      	ldr	r3, [pc, #284]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d119      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d003      	beq.n	80031fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	4b3f      	ldr	r3, [pc, #252]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b3b      	ldr	r3, [pc, #236]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e067      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321e:	4b37      	ldr	r3, [pc, #220]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 0203 	bic.w	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4934      	ldr	r1, [pc, #208]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003230:	f7fe feea 	bl	8002008 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	e00a      	b.n	800324e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fe fee6 	bl	8002008 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e04f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	4b2b      	ldr	r3, [pc, #172]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 020c 	and.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	429a      	cmp	r2, r3
 800325e:	d1eb      	bne.n	8003238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003260:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d20c      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b22      	ldr	r3, [pc, #136]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e032      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003294:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4916      	ldr	r1, [pc, #88]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b2:	4b12      	ldr	r3, [pc, #72]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	490e      	ldr	r1, [pc, #56]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032c6:	f000 f821 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	490a      	ldr	r1, [pc, #40]	@ (8003300 <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	5ccb      	ldrb	r3, [r1, r3]
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	4a09      	ldr	r2, [pc, #36]	@ (8003304 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032e2:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fe4a 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00
 80032fc:	40023800 	.word	0x40023800
 8003300:	0800579c 	.word	0x0800579c
 8003304:	20000008 	.word	0x20000008
 8003308:	2000002c 	.word	0x2000002c

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003310:	b094      	sub	sp, #80	@ 0x50
 8003312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003324:	4b79      	ldr	r3, [pc, #484]	@ (800350c <HAL_RCC_GetSysClockFreq+0x200>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b08      	cmp	r3, #8
 800332e:	d00d      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x40>
 8003330:	2b08      	cmp	r3, #8
 8003332:	f200 80e1 	bhi.w	80034f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x34>
 800333a:	2b04      	cmp	r3, #4
 800333c:	d003      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x3a>
 800333e:	e0db      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b73      	ldr	r3, [pc, #460]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x204>)
 8003342:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003344:	e0db      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003346:	4b73      	ldr	r3, [pc, #460]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x208>)
 8003348:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800334a:	e0d8      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800334c:	4b6f      	ldr	r3, [pc, #444]	@ (800350c <HAL_RCC_GetSysClockFreq+0x200>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003354:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003356:	4b6d      	ldr	r3, [pc, #436]	@ (800350c <HAL_RCC_GetSysClockFreq+0x200>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d063      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003362:	4b6a      	ldr	r3, [pc, #424]	@ (800350c <HAL_RCC_GetSysClockFreq+0x200>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	2200      	movs	r2, #0
 800336a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800336c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800336e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003374:	633b      	str	r3, [r7, #48]	@ 0x30
 8003376:	2300      	movs	r3, #0
 8003378:	637b      	str	r3, [r7, #52]	@ 0x34
 800337a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800337e:	4622      	mov	r2, r4
 8003380:	462b      	mov	r3, r5
 8003382:	f04f 0000 	mov.w	r0, #0
 8003386:	f04f 0100 	mov.w	r1, #0
 800338a:	0159      	lsls	r1, r3, #5
 800338c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003390:	0150      	lsls	r0, r2, #5
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4621      	mov	r1, r4
 8003398:	1a51      	subs	r1, r2, r1
 800339a:	6139      	str	r1, [r7, #16]
 800339c:	4629      	mov	r1, r5
 800339e:	eb63 0301 	sbc.w	r3, r3, r1
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033b0:	4659      	mov	r1, fp
 80033b2:	018b      	lsls	r3, r1, #6
 80033b4:	4651      	mov	r1, sl
 80033b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ba:	4651      	mov	r1, sl
 80033bc:	018a      	lsls	r2, r1, #6
 80033be:	4651      	mov	r1, sl
 80033c0:	ebb2 0801 	subs.w	r8, r2, r1
 80033c4:	4659      	mov	r1, fp
 80033c6:	eb63 0901 	sbc.w	r9, r3, r1
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033de:	4690      	mov	r8, r2
 80033e0:	4699      	mov	r9, r3
 80033e2:	4623      	mov	r3, r4
 80033e4:	eb18 0303 	adds.w	r3, r8, r3
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	462b      	mov	r3, r5
 80033ec:	eb49 0303 	adc.w	r3, r9, r3
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033fe:	4629      	mov	r1, r5
 8003400:	024b      	lsls	r3, r1, #9
 8003402:	4621      	mov	r1, r4
 8003404:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003408:	4621      	mov	r1, r4
 800340a:	024a      	lsls	r2, r1, #9
 800340c:	4610      	mov	r0, r2
 800340e:	4619      	mov	r1, r3
 8003410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003412:	2200      	movs	r2, #0
 8003414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003416:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003418:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800341c:	f7fc ff68 	bl	80002f0 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4613      	mov	r3, r2
 8003426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003428:	e058      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342a:	4b38      	ldr	r3, [pc, #224]	@ (800350c <HAL_RCC_GetSysClockFreq+0x200>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	099b      	lsrs	r3, r3, #6
 8003430:	2200      	movs	r2, #0
 8003432:	4618      	mov	r0, r3
 8003434:	4611      	mov	r1, r2
 8003436:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800343a:	623b      	str	r3, [r7, #32]
 800343c:	2300      	movs	r3, #0
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003440:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003444:	4642      	mov	r2, r8
 8003446:	464b      	mov	r3, r9
 8003448:	f04f 0000 	mov.w	r0, #0
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	0159      	lsls	r1, r3, #5
 8003452:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003456:	0150      	lsls	r0, r2, #5
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4641      	mov	r1, r8
 800345e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003462:	4649      	mov	r1, r9
 8003464:	eb63 0b01 	sbc.w	fp, r3, r1
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003474:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003478:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800347c:	ebb2 040a 	subs.w	r4, r2, sl
 8003480:	eb63 050b 	sbc.w	r5, r3, fp
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	00eb      	lsls	r3, r5, #3
 800348e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003492:	00e2      	lsls	r2, r4, #3
 8003494:	4614      	mov	r4, r2
 8003496:	461d      	mov	r5, r3
 8003498:	4643      	mov	r3, r8
 800349a:	18e3      	adds	r3, r4, r3
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	464b      	mov	r3, r9
 80034a0:	eb45 0303 	adc.w	r3, r5, r3
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034b2:	4629      	mov	r1, r5
 80034b4:	028b      	lsls	r3, r1, #10
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034bc:	4621      	mov	r1, r4
 80034be:	028a      	lsls	r2, r1, #10
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034c6:	2200      	movs	r2, #0
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	61fa      	str	r2, [r7, #28]
 80034cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d0:	f7fc ff0e 	bl	80002f0 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCC_GetSysClockFreq+0x200>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	3301      	adds	r3, #1
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80034ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034f6:	e002      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x204>)
 80034fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003500:	4618      	mov	r0, r3
 8003502:	3750      	adds	r7, #80	@ 0x50
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	00f42400 	.word	0x00f42400
 8003514:	007a1200 	.word	0x007a1200

08003518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <HAL_RCC_GetHCLKFreq+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000008 	.word	0x20000008

08003530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003534:	f7ff fff0 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0a9b      	lsrs	r3, r3, #10
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4903      	ldr	r1, [pc, #12]	@ (8003554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	080057ac 	.word	0x080057ac

08003558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800355c:	f7ff ffdc 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	0b5b      	lsrs	r3, r3, #13
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4903      	ldr	r1, [pc, #12]	@ (800357c <HAL_RCC_GetPCLK2Freq+0x24>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	080057ac 	.word	0x080057ac

08003580 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e273      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d075      	beq.n	800368a <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800359e:	4b88      	ldr	r3, [pc, #544]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b85      	ldr	r3, [pc, #532]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b82      	ldr	r3, [pc, #520]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b7e      	ldr	r3, [pc, #504]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05b      	beq.n	8003688 <HAL_RCC_OscConfig+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d157      	bne.n	8003688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e24e      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x74>
 80035e6:	4b76      	ldr	r3, [pc, #472]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b70      	ldr	r3, [pc, #448]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6f      	ldr	r2, [pc, #444]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b6d      	ldr	r3, [pc, #436]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6c      	ldr	r2, [pc, #432]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 8003618:	4b69      	ldr	r3, [pc, #420]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a68      	ldr	r2, [pc, #416]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b66      	ldr	r3, [pc, #408]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a65      	ldr	r2, [pc, #404]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fce6 	bl	8002008 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003640:	f7fe fce2 	bl	8002008 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	@ 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e213      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b5b      	ldr	r3, [pc, #364]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xc0>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe fcd2 	bl	8002008 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003668:	f7fe fcce 	bl	8002008 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	@ 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1ff      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b51      	ldr	r3, [pc, #324]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0xe8>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003696:	4b4a      	ldr	r3, [pc, #296]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d11c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b44      	ldr	r3, [pc, #272]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	4b41      	ldr	r3, [pc, #260]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e1d3      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4937      	ldr	r1, [pc, #220]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	e03a      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f0:	4b34      	ldr	r3, [pc, #208]	@ (80037c4 <HAL_RCC_OscConfig+0x244>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fe fc87 	bl	8002008 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fe:	f7fe fc83 	bl	8002008 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1b4      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4925      	ldr	r1, [pc, #148]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003732:	4b24      	ldr	r3, [pc, #144]	@ (80037c4 <HAL_RCC_OscConfig+0x244>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fe fc66 	bl	8002008 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003740:	f7fe fc62 	bl	8002008 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e193      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d036      	beq.n	80037d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <HAL_RCC_OscConfig+0x248>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fe fc46 	bl	8002008 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003780:	f7fe fc42 	bl	8002008 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e173      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x200>
 800379e:	e01b      	b.n	80037d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <HAL_RCC_OscConfig+0x248>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fe fc2f 	bl	8002008 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	e00e      	b.n	80037cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ae:	f7fe fc2b 	bl	8002008 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d907      	bls.n	80037cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e15c      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	42470000 	.word	0x42470000
 80037c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b8a      	ldr	r3, [pc, #552]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ea      	bne.n	80037ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8097 	beq.w	8003914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b83      	ldr	r3, [pc, #524]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b7f      	ldr	r3, [pc, #508]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	4a7e      	ldr	r2, [pc, #504]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	@ 0x40
 8003806:	4b7c      	ldr	r3, [pc, #496]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b79      	ldr	r3, [pc, #484]	@ (80039fc <HAL_RCC_OscConfig+0x47c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b76      	ldr	r3, [pc, #472]	@ (80039fc <HAL_RCC_OscConfig+0x47c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a75      	ldr	r2, [pc, #468]	@ (80039fc <HAL_RCC_OscConfig+0x47c>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fe fbeb 	bl	8002008 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fe fbe7 	bl	8002008 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e118      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b6c      	ldr	r3, [pc, #432]	@ (80039fc <HAL_RCC_OscConfig+0x47c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x2ea>
 800385c:	4b66      	ldr	r3, [pc, #408]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	4a65      	ldr	r2, [pc, #404]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	@ 0x70
 8003868:	e01c      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x30c>
 8003872:	4b61      	ldr	r3, [pc, #388]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	4a60      	ldr	r2, [pc, #384]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6713      	str	r3, [r2, #112]	@ 0x70
 800387e:	4b5e      	ldr	r3, [pc, #376]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	4a5d      	ldr	r2, [pc, #372]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	@ 0x70
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800388c:	4b5a      	ldr	r3, [pc, #360]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003890:	4a59      	ldr	r2, [pc, #356]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	@ 0x70
 8003898:	4b57      	ldr	r3, [pc, #348]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389c:	4a56      	ldr	r2, [pc, #344]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fe fbac 	bl	8002008 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fe fba8 	bl	8002008 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0d7      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0ee      	beq.n	80038b4 <HAL_RCC_OscConfig+0x334>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fe fb96 	bl	8002008 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7fe fb92 	bl	8002008 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0c1      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	4b40      	ldr	r3, [pc, #256]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ee      	bne.n	80038e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	4a3a      	ldr	r2, [pc, #232]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003912:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80ad 	beq.w	8003a78 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391e:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b08      	cmp	r3, #8
 8003928:	d060      	beq.n	80039ec <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d145      	bne.n	80039be <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b33      	ldr	r3, [pc, #204]	@ (8003a00 <HAL_RCC_OscConfig+0x480>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fb66 	bl	8002008 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003940:	f7fe fb62 	bl	8002008 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e093      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	4b29      	ldr	r3, [pc, #164]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	3b01      	subs	r3, #1
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	071b      	lsls	r3, r3, #28
 800398a:	491b      	ldr	r1, [pc, #108]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003990:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <HAL_RCC_OscConfig+0x480>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fe fb37 	bl	8002008 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399e:	f7fe fb33 	bl	8002008 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e064      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b0:	4b11      	ldr	r3, [pc, #68]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x41e>
 80039bc:	e05c      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b10      	ldr	r3, [pc, #64]	@ (8003a00 <HAL_RCC_OscConfig+0x480>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe fb20 	bl	8002008 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe fb1c 	bl	8002008 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e04d      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x44c>
 80039ea:	e045      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e040      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40007000 	.word	0x40007000
 8003a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a04:	4b1f      	ldr	r3, [pc, #124]	@ (8003a84 <HAL_RCC_OscConfig+0x504>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d030      	beq.n	8003a74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d129      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d122      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d119      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d10f      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800

08003a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e042      	b.n	8003b20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd fbde 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	@ 0x24
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fdf5 	bl	80046bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	@ 0x28
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d175      	bne.n	8003c34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_UART_Transmit+0x2c>
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e06e      	b.n	8003c36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2221      	movs	r2, #33	@ 0x21
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b66:	f7fe fa4f 	bl	8002008 <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	88fa      	ldrh	r2, [r7, #6]
 8003b76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b80:	d108      	bne.n	8003b94 <HAL_UART_Transmit+0x6c>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d104      	bne.n	8003b94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	e003      	b.n	8003b9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b9c:	e02e      	b.n	8003bfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2180      	movs	r1, #128	@ 0x80
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fb91 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e03a      	b.n	8003c36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	3302      	adds	r3, #2
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	e007      	b.n	8003bee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	3301      	adds	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1cb      	bne.n	8003b9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2140      	movs	r1, #64	@ 0x40
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fb5d 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e006      	b.n	8003c36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b08a      	sub	sp, #40	@ 0x28
 8003c42:	af02      	add	r7, sp, #8
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	f040 8081 	bne.w	8003d62 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_UART_Receive+0x2e>
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e079      	b.n	8003d64 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2222      	movs	r2, #34	@ 0x22
 8003c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c84:	f7fe f9c0 	bl	8002008 <HAL_GetTick>
 8003c88:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	88fa      	ldrh	r2, [r7, #6]
 8003c8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9e:	d108      	bne.n	8003cb2 <HAL_UART_Receive+0x74>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d104      	bne.n	8003cb2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e003      	b.n	8003cba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cba:	e047      	b.n	8003d4c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2120      	movs	r1, #32
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fb02 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e042      	b.n	8003d64 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10c      	bne.n	8003cfe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e01f      	b.n	8003d3e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d06:	d007      	beq.n	8003d18 <HAL_UART_Receive+0xda>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <HAL_UART_Receive+0xe8>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	e008      	b.n	8003d38 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1b2      	bne.n	8003cbc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b0ba      	sub	sp, #232	@ 0xe8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x66>
 8003dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fbb8 	bl	8004540 <UART_Receive_IT>
      return;
 8003dd0:	e25b      	b.n	800428a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 80de 	beq.w	8003f98 <HAL_UART_IRQHandler+0x22c>
 8003ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80d1 	beq.w	8003f98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <HAL_UART_IRQHandler+0xae>
 8003e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	f043 0201 	orr.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_UART_IRQHandler+0xd2>
 8003e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e36:	f043 0202 	orr.w	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00b      	beq.n	8003e62 <HAL_UART_IRQHandler+0xf6>
 8003e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	f043 0204 	orr.w	r2, r3, #4
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d011      	beq.n	8003e92 <HAL_UART_IRQHandler+0x126>
 8003e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	f043 0208 	orr.w	r2, r3, #8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 81f2 	beq.w	8004280 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_UART_IRQHandler+0x14e>
 8003ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fb43 	bl	8004540 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec4:	2b40      	cmp	r3, #64	@ 0x40
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x17a>
 8003ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d04f      	beq.n	8003f86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fa4b 	bl	8004382 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef6:	2b40      	cmp	r3, #64	@ 0x40
 8003ef8:	d141      	bne.n	8003f7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3314      	adds	r3, #20
 8003f00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3314      	adds	r3, #20
 8003f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1d9      	bne.n	8003efa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d013      	beq.n	8003f76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f52:	4a7e      	ldr	r2, [pc, #504]	@ (800414c <HAL_UART_IRQHandler+0x3e0>)
 8003f54:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fa37 	bl	80023ce <HAL_DMA_Abort_IT>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d016      	beq.n	8003f94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f70:	4610      	mov	r0, r2
 8003f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	e00e      	b.n	8003f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f994 	bl	80042a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	e00a      	b.n	8003f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f990 	bl	80042a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	e006      	b.n	8003f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f98c 	bl	80042a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f92:	e175      	b.n	8004280 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	bf00      	nop
    return;
 8003f96:	e173      	b.n	8004280 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	f040 814f 	bne.w	8004240 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8148 	beq.w	8004240 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8141 	beq.w	8004240 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fde:	2b40      	cmp	r3, #64	@ 0x40
 8003fe0:	f040 80b6 	bne.w	8004150 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ff0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8145 	beq.w	8004284 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004002:	429a      	cmp	r2, r3
 8004004:	f080 813e 	bcs.w	8004284 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800400e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800401a:	f000 8088 	beq.w	800412e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004034:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800403c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800404a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800404e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004056:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1d9      	bne.n	800401e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800407a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3314      	adds	r3, #20
 800408a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800408e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004092:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004096:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e1      	bne.n	800406a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3314      	adds	r3, #20
 80040ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3314      	adds	r3, #20
 80040c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e3      	bne.n	80040a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040fe:	f023 0310 	bic.w	r3, r3, #16
 8004102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004110:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004112:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004116:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800411e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e3      	bne.n	80040ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe f8e0 	bl	80022ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800413c:	b29b      	uxth	r3, r3
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	b29b      	uxth	r3, r3
 8004142:	4619      	mov	r1, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f8b7 	bl	80042b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800414a:	e09b      	b.n	8004284 <HAL_UART_IRQHandler+0x518>
 800414c:	08004449 	.word	0x08004449
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004158:	b29b      	uxth	r3, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 808e 	beq.w	8004288 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800416c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8089 	beq.w	8004288 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004188:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800418c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800419a:	647a      	str	r2, [r7, #68]	@ 0x44
 800419c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e3      	bne.n	8004176 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3314      	adds	r3, #20
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	623b      	str	r3, [r7, #32]
   return(result);
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3314      	adds	r3, #20
 80041ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80041d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e3      	bne.n	80041ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	60fb      	str	r3, [r7, #12]
   return(result);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0310 	bic.w	r3, r3, #16
 800420a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004218:	61fa      	str	r2, [r7, #28]
 800421a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	69b9      	ldr	r1, [r7, #24]
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	617b      	str	r3, [r7, #20]
   return(result);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e3      	bne.n	80041f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004232:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f83d 	bl	80042b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800423e:	e023      	b.n	8004288 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <HAL_UART_IRQHandler+0x4f4>
 800424c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f909 	bl	8004470 <UART_Transmit_IT>
    return;
 800425e:	e014      	b.n	800428a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00e      	beq.n	800428a <HAL_UART_IRQHandler+0x51e>
 800426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f949 	bl	8004510 <UART_EndTransmit_IT>
    return;
 800427e:	e004      	b.n	800428a <HAL_UART_IRQHandler+0x51e>
    return;
 8004280:	bf00      	nop
 8004282:	e002      	b.n	800428a <HAL_UART_IRQHandler+0x51e>
      return;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <HAL_UART_IRQHandler+0x51e>
      return;
 8004288:	bf00      	nop
  }
}
 800428a:	37e8      	adds	r7, #232	@ 0xe8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e0:	e03b      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d037      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fd fe8d 	bl	8002008 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <UART_WaitOnFlagUntilTimeout+0x30>
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e03a      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d023      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b80      	cmp	r3, #128	@ 0x80
 8004316:	d020      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b40      	cmp	r3, #64	@ 0x40
 800431c:	d01d      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b08      	cmp	r3, #8
 800432a:	d116      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f81d 	bl	8004382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2208      	movs	r2, #8
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e00f      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	429a      	cmp	r2, r3
 8004376:	d0b4      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004382:	b480      	push	{r7}
 8004384:	b095      	sub	sp, #84	@ 0x54
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	330c      	adds	r3, #12
 8004390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	330c      	adds	r3, #12
 80043a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80043ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e5      	bne.n	800438a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3314      	adds	r3, #20
 80043dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e5      	bne.n	80043be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d119      	bne.n	800442e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	60bb      	str	r3, [r7, #8]
   return(result);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f023 0310 	bic.w	r3, r3, #16
 8004410:	647b      	str	r3, [r7, #68]	@ 0x44
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800441a:	61ba      	str	r2, [r7, #24]
 800441c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6979      	ldr	r1, [r7, #20]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	613b      	str	r3, [r7, #16]
   return(result);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e5      	bne.n	80043fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800443c:	bf00      	nop
 800443e:	3754      	adds	r7, #84	@ 0x54
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004454:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff ff1e 	bl	80042a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b21      	cmp	r3, #33	@ 0x21
 8004482:	d13e      	bne.n	8004502 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800448c:	d114      	bne.n	80044b8 <UART_Transmit_IT+0x48>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d110      	bne.n	80044b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	1c9a      	adds	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	621a      	str	r2, [r3, #32]
 80044b6:	e008      	b.n	80044ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	1c59      	adds	r1, r3, #1
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6211      	str	r1, [r2, #32]
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4619      	mov	r1, r3
 80044d8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e000      	b.n	8004504 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004502:	2302      	movs	r3, #2
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004526:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fc ffed 	bl	8001510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08c      	sub	sp, #48	@ 0x30
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b22      	cmp	r3, #34	@ 0x22
 8004552:	f040 80ae 	bne.w	80046b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455e:	d117      	bne.n	8004590 <UART_Receive_IT+0x50>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d113      	bne.n	8004590 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004570:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457e:	b29a      	uxth	r2, r3
 8004580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004582:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	1c9a      	adds	r2, r3, #2
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	629a      	str	r2, [r3, #40]	@ 0x28
 800458e:	e026      	b.n	80045de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004594:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a2:	d007      	beq.n	80045b4 <UART_Receive_IT+0x74>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <UART_Receive_IT+0x82>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e008      	b.n	80045d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4619      	mov	r1, r3
 80045ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d15d      	bne.n	80046ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0220 	bic.w	r2, r2, #32
 8004600:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004610:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0201 	bic.w	r2, r2, #1
 8004620:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	2b01      	cmp	r3, #1
 8004636:	d135      	bne.n	80046a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	613b      	str	r3, [r7, #16]
   return(result);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f023 0310 	bic.w	r3, r3, #16
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800465e:	623a      	str	r2, [r7, #32]
 8004660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	69f9      	ldr	r1, [r7, #28]
 8004664:	6a3a      	ldr	r2, [r7, #32]
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	61bb      	str	r3, [r7, #24]
   return(result);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e5      	bne.n	800463e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b10      	cmp	r3, #16
 800467e:	d10a      	bne.n	8004696 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff fe0b 	bl	80042b8 <HAL_UARTEx_RxEventCallback>
 80046a2:	e002      	b.n	80046aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fdf3 	bl	8004290 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e002      	b.n	80046b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e000      	b.n	80046b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046b2:	2302      	movs	r3, #2
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3730      	adds	r7, #48	@ 0x30
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c0:	b0c0      	sub	sp, #256	@ 0x100
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d8:	68d9      	ldr	r1, [r3, #12]
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	ea40 0301 	orr.w	r3, r0, r1
 80046e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004714:	f021 010c 	bic.w	r1, r1, #12
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004722:	430b      	orrs	r3, r1
 8004724:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004736:	6999      	ldr	r1, [r3, #24]
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	ea40 0301 	orr.w	r3, r0, r1
 8004742:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b95      	ldr	r3, [pc, #596]	@ (80049a0 <UART_SetConfig+0x2e4>)
 800474c:	429a      	cmp	r2, r3
 800474e:	d011      	beq.n	8004774 <UART_SetConfig+0xb8>
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b93      	ldr	r3, [pc, #588]	@ (80049a4 <UART_SetConfig+0x2e8>)
 8004758:	429a      	cmp	r2, r3
 800475a:	d00b      	beq.n	8004774 <UART_SetConfig+0xb8>
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b91      	ldr	r3, [pc, #580]	@ (80049a8 <UART_SetConfig+0x2ec>)
 8004764:	429a      	cmp	r2, r3
 8004766:	d005      	beq.n	8004774 <UART_SetConfig+0xb8>
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b8f      	ldr	r3, [pc, #572]	@ (80049ac <UART_SetConfig+0x2f0>)
 8004770:	429a      	cmp	r2, r3
 8004772:	d104      	bne.n	800477e <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe fef0 	bl	8003558 <HAL_RCC_GetPCLK2Freq>
 8004778:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800477c:	e003      	b.n	8004786 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800477e:	f7fe fed7 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8004782:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004790:	f040 8110 	bne.w	80049b4 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004798:	2200      	movs	r2, #0
 800479a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800479e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047a6:	4622      	mov	r2, r4
 80047a8:	462b      	mov	r3, r5
 80047aa:	1891      	adds	r1, r2, r2
 80047ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047ae:	415b      	adcs	r3, r3
 80047b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047b6:	4621      	mov	r1, r4
 80047b8:	eb12 0801 	adds.w	r8, r2, r1
 80047bc:	4629      	mov	r1, r5
 80047be:	eb43 0901 	adc.w	r9, r3, r1
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d6:	4690      	mov	r8, r2
 80047d8:	4699      	mov	r9, r3
 80047da:	4623      	mov	r3, r4
 80047dc:	eb18 0303 	adds.w	r3, r8, r3
 80047e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047e4:	462b      	mov	r3, r5
 80047e6:	eb49 0303 	adc.w	r3, r9, r3
 80047ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004802:	460b      	mov	r3, r1
 8004804:	18db      	adds	r3, r3, r3
 8004806:	653b      	str	r3, [r7, #80]	@ 0x50
 8004808:	4613      	mov	r3, r2
 800480a:	eb42 0303 	adc.w	r3, r2, r3
 800480e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004814:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004818:	f7fb fd6a 	bl	80002f0 <__aeabi_uldivmod>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4b63      	ldr	r3, [pc, #396]	@ (80049b0 <UART_SetConfig+0x2f4>)
 8004822:	fba3 2302 	umull	r2, r3, r3, r2
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	011c      	lsls	r4, r3, #4
 800482a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800482e:	2200      	movs	r2, #0
 8004830:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004834:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004838:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	1891      	adds	r1, r2, r2
 8004842:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004844:	415b      	adcs	r3, r3
 8004846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004848:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800484c:	4641      	mov	r1, r8
 800484e:	eb12 0a01 	adds.w	sl, r2, r1
 8004852:	4649      	mov	r1, r9
 8004854:	eb43 0b01 	adc.w	fp, r3, r1
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004864:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800486c:	4692      	mov	sl, r2
 800486e:	469b      	mov	fp, r3
 8004870:	4643      	mov	r3, r8
 8004872:	eb1a 0303 	adds.w	r3, sl, r3
 8004876:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800487a:	464b      	mov	r3, r9
 800487c:	eb4b 0303 	adc.w	r3, fp, r3
 8004880:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004890:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004894:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004898:	460b      	mov	r3, r1
 800489a:	18db      	adds	r3, r3, r3
 800489c:	643b      	str	r3, [r7, #64]	@ 0x40
 800489e:	4613      	mov	r3, r2
 80048a0:	eb42 0303 	adc.w	r3, r2, r3
 80048a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048ae:	f7fb fd1f 	bl	80002f0 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	4b3d      	ldr	r3, [pc, #244]	@ (80049b0 <UART_SetConfig+0x2f4>)
 80048ba:	fba3 2301 	umull	r2, r3, r3, r1
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2264      	movs	r2, #100	@ 0x64
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	1acb      	subs	r3, r1, r3
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80048ce:	4b38      	ldr	r3, [pc, #224]	@ (80049b0 <UART_SetConfig+0x2f4>)
 80048d0:	fba3 2302 	umull	r2, r3, r3, r2
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048dc:	441c      	add	r4, r3
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	1891      	adds	r1, r2, r2
 80048f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048f8:	415b      	adcs	r3, r3
 80048fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004900:	4641      	mov	r1, r8
 8004902:	1851      	adds	r1, r2, r1
 8004904:	6339      	str	r1, [r7, #48]	@ 0x30
 8004906:	4649      	mov	r1, r9
 8004908:	414b      	adcs	r3, r1
 800490a:	637b      	str	r3, [r7, #52]	@ 0x34
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004918:	4659      	mov	r1, fp
 800491a:	00cb      	lsls	r3, r1, #3
 800491c:	4651      	mov	r1, sl
 800491e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004922:	4651      	mov	r1, sl
 8004924:	00ca      	lsls	r2, r1, #3
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	4603      	mov	r3, r0
 800492c:	4642      	mov	r2, r8
 800492e:	189b      	adds	r3, r3, r2
 8004930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004934:	464b      	mov	r3, r9
 8004936:	460a      	mov	r2, r1
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800494c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004950:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004954:	460b      	mov	r3, r1
 8004956:	18db      	adds	r3, r3, r3
 8004958:	62bb      	str	r3, [r7, #40]	@ 0x28
 800495a:	4613      	mov	r3, r2
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004966:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800496a:	f7fb fcc1 	bl	80002f0 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4b0f      	ldr	r3, [pc, #60]	@ (80049b0 <UART_SetConfig+0x2f4>)
 8004974:	fba3 1302 	umull	r1, r3, r3, r2
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	2164      	movs	r1, #100	@ 0x64
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	3332      	adds	r3, #50	@ 0x32
 8004986:	4a0a      	ldr	r2, [pc, #40]	@ (80049b0 <UART_SetConfig+0x2f4>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	f003 0207 	and.w	r2, r3, #7
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4422      	add	r2, r4
 800499a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800499c:	e10a      	b.n	8004bb4 <UART_SetConfig+0x4f8>
 800499e:	bf00      	nop
 80049a0:	40011000 	.word	0x40011000
 80049a4:	40011400 	.word	0x40011400
 80049a8:	40011800 	.word	0x40011800
 80049ac:	40011c00 	.word	0x40011c00
 80049b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049c6:	4642      	mov	r2, r8
 80049c8:	464b      	mov	r3, r9
 80049ca:	1891      	adds	r1, r2, r2
 80049cc:	6239      	str	r1, [r7, #32]
 80049ce:	415b      	adcs	r3, r3
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049d6:	4641      	mov	r1, r8
 80049d8:	1854      	adds	r4, r2, r1
 80049da:	4649      	mov	r1, r9
 80049dc:	eb43 0501 	adc.w	r5, r3, r1
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	00eb      	lsls	r3, r5, #3
 80049ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ee:	00e2      	lsls	r2, r4, #3
 80049f0:	4614      	mov	r4, r2
 80049f2:	461d      	mov	r5, r3
 80049f4:	4643      	mov	r3, r8
 80049f6:	18e3      	adds	r3, r4, r3
 80049f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049fc:	464b      	mov	r3, r9
 80049fe:	eb45 0303 	adc.w	r3, r5, r3
 8004a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a22:	4629      	mov	r1, r5
 8004a24:	008b      	lsls	r3, r1, #2
 8004a26:	4621      	mov	r1, r4
 8004a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	008a      	lsls	r2, r1, #2
 8004a30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a34:	f7fb fc5c 	bl	80002f0 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4b60      	ldr	r3, [pc, #384]	@ (8004bc0 <UART_SetConfig+0x504>)
 8004a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	011c      	lsls	r4, r3, #4
 8004a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	1891      	adds	r1, r2, r2
 8004a5e:	61b9      	str	r1, [r7, #24]
 8004a60:	415b      	adcs	r3, r3
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a68:	4641      	mov	r1, r8
 8004a6a:	1851      	adds	r1, r2, r1
 8004a6c:	6139      	str	r1, [r7, #16]
 8004a6e:	4649      	mov	r1, r9
 8004a70:	414b      	adcs	r3, r1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a80:	4659      	mov	r1, fp
 8004a82:	00cb      	lsls	r3, r1, #3
 8004a84:	4651      	mov	r1, sl
 8004a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	00ca      	lsls	r2, r1, #3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	4642      	mov	r2, r8
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	460a      	mov	r2, r1
 8004aa0:	eb42 0303 	adc.w	r3, r2, r3
 8004aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ab2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	008b      	lsls	r3, r1, #2
 8004ac4:	4641      	mov	r1, r8
 8004ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aca:	4641      	mov	r1, r8
 8004acc:	008a      	lsls	r2, r1, #2
 8004ace:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ad2:	f7fb fc0d 	bl	80002f0 <__aeabi_uldivmod>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	4b38      	ldr	r3, [pc, #224]	@ (8004bc0 <UART_SetConfig+0x504>)
 8004ade:	fba3 2301 	umull	r2, r3, r3, r1
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2264      	movs	r2, #100	@ 0x64
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	1acb      	subs	r3, r1, r3
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	3332      	adds	r3, #50	@ 0x32
 8004af0:	4a33      	ldr	r2, [pc, #204]	@ (8004bc0 <UART_SetConfig+0x504>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004afc:	441c      	add	r4, r3
 8004afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b02:	2200      	movs	r2, #0
 8004b04:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b06:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	1891      	adds	r1, r2, r2
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	415b      	adcs	r3, r3
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	1851      	adds	r1, r2, r1
 8004b20:	6039      	str	r1, [r7, #0]
 8004b22:	4649      	mov	r1, r9
 8004b24:	414b      	adcs	r3, r1
 8004b26:	607b      	str	r3, [r7, #4]
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b34:	4659      	mov	r1, fp
 8004b36:	00cb      	lsls	r3, r1, #3
 8004b38:	4651      	mov	r1, sl
 8004b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3e:	4651      	mov	r1, sl
 8004b40:	00ca      	lsls	r2, r1, #3
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	4603      	mov	r3, r0
 8004b48:	4642      	mov	r2, r8
 8004b4a:	189b      	adds	r3, r3, r2
 8004b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b4e:	464b      	mov	r3, r9
 8004b50:	460a      	mov	r2, r1
 8004b52:	eb42 0303 	adc.w	r3, r2, r3
 8004b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b62:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b70:	4649      	mov	r1, r9
 8004b72:	008b      	lsls	r3, r1, #2
 8004b74:	4641      	mov	r1, r8
 8004b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	008a      	lsls	r2, r1, #2
 8004b7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b82:	f7fb fbb5 	bl	80002f0 <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <UART_SetConfig+0x504>)
 8004b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	2164      	movs	r1, #100	@ 0x64
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	3332      	adds	r3, #50	@ 0x32
 8004b9e:	4a08      	ldr	r2, [pc, #32]	@ (8004bc0 <UART_SetConfig+0x504>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	f003 020f 	and.w	r2, r3, #15
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4422      	add	r2, r4
 8004bb2:	609a      	str	r2, [r3, #8]
}
 8004bb4:	bf00      	nop
 8004bb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc0:	51eb851f 	.word	0x51eb851f

08004bc4 <siprintf>:
 8004bc4:	b40e      	push	{r1, r2, r3}
 8004bc6:	b500      	push	{lr}
 8004bc8:	b09c      	sub	sp, #112	@ 0x70
 8004bca:	ab1d      	add	r3, sp, #116	@ 0x74
 8004bcc:	9002      	str	r0, [sp, #8]
 8004bce:	9006      	str	r0, [sp, #24]
 8004bd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bd4:	4809      	ldr	r0, [pc, #36]	@ (8004bfc <siprintf+0x38>)
 8004bd6:	9107      	str	r1, [sp, #28]
 8004bd8:	9104      	str	r1, [sp, #16]
 8004bda:	4909      	ldr	r1, [pc, #36]	@ (8004c00 <siprintf+0x3c>)
 8004bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004be0:	9105      	str	r1, [sp, #20]
 8004be2:	6800      	ldr	r0, [r0, #0]
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	a902      	add	r1, sp, #8
 8004be8:	f000 f99c 	bl	8004f24 <_svfiprintf_r>
 8004bec:	9b02      	ldr	r3, [sp, #8]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	b01c      	add	sp, #112	@ 0x70
 8004bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf8:	b003      	add	sp, #12
 8004bfa:	4770      	bx	lr
 8004bfc:	20000034 	.word	0x20000034
 8004c00:	ffff0208 	.word	0xffff0208

08004c04 <memset>:
 8004c04:	4402      	add	r2, r0
 8004c06:	4603      	mov	r3, r0
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memset+0xa>
 8004c0c:	4770      	bx	lr
 8004c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c12:	e7f9      	b.n	8004c08 <memset+0x4>

08004c14 <__errno>:
 8004c14:	4b01      	ldr	r3, [pc, #4]	@ (8004c1c <__errno+0x8>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000034 	.word	0x20000034

08004c20 <__libc_init_array>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	4d0d      	ldr	r5, [pc, #52]	@ (8004c58 <__libc_init_array+0x38>)
 8004c24:	4c0d      	ldr	r4, [pc, #52]	@ (8004c5c <__libc_init_array+0x3c>)
 8004c26:	1b64      	subs	r4, r4, r5
 8004c28:	10a4      	asrs	r4, r4, #2
 8004c2a:	2600      	movs	r6, #0
 8004c2c:	42a6      	cmp	r6, r4
 8004c2e:	d109      	bne.n	8004c44 <__libc_init_array+0x24>
 8004c30:	4d0b      	ldr	r5, [pc, #44]	@ (8004c60 <__libc_init_array+0x40>)
 8004c32:	4c0c      	ldr	r4, [pc, #48]	@ (8004c64 <__libc_init_array+0x44>)
 8004c34:	f000 fc6e 	bl	8005514 <_init>
 8004c38:	1b64      	subs	r4, r4, r5
 8004c3a:	10a4      	asrs	r4, r4, #2
 8004c3c:	2600      	movs	r6, #0
 8004c3e:	42a6      	cmp	r6, r4
 8004c40:	d105      	bne.n	8004c4e <__libc_init_array+0x2e>
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
 8004c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c48:	4798      	blx	r3
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	e7ee      	b.n	8004c2c <__libc_init_array+0xc>
 8004c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c52:	4798      	blx	r3
 8004c54:	3601      	adds	r6, #1
 8004c56:	e7f2      	b.n	8004c3e <__libc_init_array+0x1e>
 8004c58:	080057f0 	.word	0x080057f0
 8004c5c:	080057f0 	.word	0x080057f0
 8004c60:	080057f0 	.word	0x080057f0
 8004c64:	080057f4 	.word	0x080057f4

08004c68 <__retarget_lock_acquire_recursive>:
 8004c68:	4770      	bx	lr

08004c6a <__retarget_lock_release_recursive>:
 8004c6a:	4770      	bx	lr

08004c6c <strcpy>:
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c72:	f803 2b01 	strb.w	r2, [r3], #1
 8004c76:	2a00      	cmp	r2, #0
 8004c78:	d1f9      	bne.n	8004c6e <strcpy+0x2>
 8004c7a:	4770      	bx	lr

08004c7c <_free_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4605      	mov	r5, r0
 8004c80:	2900      	cmp	r1, #0
 8004c82:	d041      	beq.n	8004d08 <_free_r+0x8c>
 8004c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c88:	1f0c      	subs	r4, r1, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bfb8      	it	lt
 8004c8e:	18e4      	addlt	r4, r4, r3
 8004c90:	f000 f8e0 	bl	8004e54 <__malloc_lock>
 8004c94:	4a1d      	ldr	r2, [pc, #116]	@ (8004d0c <_free_r+0x90>)
 8004c96:	6813      	ldr	r3, [r2, #0]
 8004c98:	b933      	cbnz	r3, 8004ca8 <_free_r+0x2c>
 8004c9a:	6063      	str	r3, [r4, #4]
 8004c9c:	6014      	str	r4, [r2, #0]
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ca4:	f000 b8dc 	b.w	8004e60 <__malloc_unlock>
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	d908      	bls.n	8004cbe <_free_r+0x42>
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	1821      	adds	r1, r4, r0
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	bf01      	itttt	eq
 8004cb4:	6819      	ldreq	r1, [r3, #0]
 8004cb6:	685b      	ldreq	r3, [r3, #4]
 8004cb8:	1809      	addeq	r1, r1, r0
 8004cba:	6021      	streq	r1, [r4, #0]
 8004cbc:	e7ed      	b.n	8004c9a <_free_r+0x1e>
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	b10b      	cbz	r3, 8004cc8 <_free_r+0x4c>
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	d9fa      	bls.n	8004cbe <_free_r+0x42>
 8004cc8:	6811      	ldr	r1, [r2, #0]
 8004cca:	1850      	adds	r0, r2, r1
 8004ccc:	42a0      	cmp	r0, r4
 8004cce:	d10b      	bne.n	8004ce8 <_free_r+0x6c>
 8004cd0:	6820      	ldr	r0, [r4, #0]
 8004cd2:	4401      	add	r1, r0
 8004cd4:	1850      	adds	r0, r2, r1
 8004cd6:	4283      	cmp	r3, r0
 8004cd8:	6011      	str	r1, [r2, #0]
 8004cda:	d1e0      	bne.n	8004c9e <_free_r+0x22>
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	6053      	str	r3, [r2, #4]
 8004ce2:	4408      	add	r0, r1
 8004ce4:	6010      	str	r0, [r2, #0]
 8004ce6:	e7da      	b.n	8004c9e <_free_r+0x22>
 8004ce8:	d902      	bls.n	8004cf0 <_free_r+0x74>
 8004cea:	230c      	movs	r3, #12
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	e7d6      	b.n	8004c9e <_free_r+0x22>
 8004cf0:	6820      	ldr	r0, [r4, #0]
 8004cf2:	1821      	adds	r1, r4, r0
 8004cf4:	428b      	cmp	r3, r1
 8004cf6:	bf04      	itt	eq
 8004cf8:	6819      	ldreq	r1, [r3, #0]
 8004cfa:	685b      	ldreq	r3, [r3, #4]
 8004cfc:	6063      	str	r3, [r4, #4]
 8004cfe:	bf04      	itt	eq
 8004d00:	1809      	addeq	r1, r1, r0
 8004d02:	6021      	streq	r1, [r4, #0]
 8004d04:	6054      	str	r4, [r2, #4]
 8004d06:	e7ca      	b.n	8004c9e <_free_r+0x22>
 8004d08:	bd38      	pop	{r3, r4, r5, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000314 	.word	0x20000314

08004d10 <sbrk_aligned>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	4e0f      	ldr	r6, [pc, #60]	@ (8004d50 <sbrk_aligned+0x40>)
 8004d14:	460c      	mov	r4, r1
 8004d16:	6831      	ldr	r1, [r6, #0]
 8004d18:	4605      	mov	r5, r0
 8004d1a:	b911      	cbnz	r1, 8004d22 <sbrk_aligned+0x12>
 8004d1c:	f000 fba6 	bl	800546c <_sbrk_r>
 8004d20:	6030      	str	r0, [r6, #0]
 8004d22:	4621      	mov	r1, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 fba1 	bl	800546c <_sbrk_r>
 8004d2a:	1c43      	adds	r3, r0, #1
 8004d2c:	d103      	bne.n	8004d36 <sbrk_aligned+0x26>
 8004d2e:	f04f 34ff 	mov.w	r4, #4294967295
 8004d32:	4620      	mov	r0, r4
 8004d34:	bd70      	pop	{r4, r5, r6, pc}
 8004d36:	1cc4      	adds	r4, r0, #3
 8004d38:	f024 0403 	bic.w	r4, r4, #3
 8004d3c:	42a0      	cmp	r0, r4
 8004d3e:	d0f8      	beq.n	8004d32 <sbrk_aligned+0x22>
 8004d40:	1a21      	subs	r1, r4, r0
 8004d42:	4628      	mov	r0, r5
 8004d44:	f000 fb92 	bl	800546c <_sbrk_r>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d1f2      	bne.n	8004d32 <sbrk_aligned+0x22>
 8004d4c:	e7ef      	b.n	8004d2e <sbrk_aligned+0x1e>
 8004d4e:	bf00      	nop
 8004d50:	20000310 	.word	0x20000310

08004d54 <_malloc_r>:
 8004d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d58:	1ccd      	adds	r5, r1, #3
 8004d5a:	f025 0503 	bic.w	r5, r5, #3
 8004d5e:	3508      	adds	r5, #8
 8004d60:	2d0c      	cmp	r5, #12
 8004d62:	bf38      	it	cc
 8004d64:	250c      	movcc	r5, #12
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	4606      	mov	r6, r0
 8004d6a:	db01      	blt.n	8004d70 <_malloc_r+0x1c>
 8004d6c:	42a9      	cmp	r1, r5
 8004d6e:	d904      	bls.n	8004d7a <_malloc_r+0x26>
 8004d70:	230c      	movs	r3, #12
 8004d72:	6033      	str	r3, [r6, #0]
 8004d74:	2000      	movs	r0, #0
 8004d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e50 <_malloc_r+0xfc>
 8004d7e:	f000 f869 	bl	8004e54 <__malloc_lock>
 8004d82:	f8d8 3000 	ldr.w	r3, [r8]
 8004d86:	461c      	mov	r4, r3
 8004d88:	bb44      	cbnz	r4, 8004ddc <_malloc_r+0x88>
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f7ff ffbf 	bl	8004d10 <sbrk_aligned>
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	4604      	mov	r4, r0
 8004d96:	d158      	bne.n	8004e4a <_malloc_r+0xf6>
 8004d98:	f8d8 4000 	ldr.w	r4, [r8]
 8004d9c:	4627      	mov	r7, r4
 8004d9e:	2f00      	cmp	r7, #0
 8004da0:	d143      	bne.n	8004e2a <_malloc_r+0xd6>
 8004da2:	2c00      	cmp	r4, #0
 8004da4:	d04b      	beq.n	8004e3e <_malloc_r+0xea>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	4639      	mov	r1, r7
 8004daa:	4630      	mov	r0, r6
 8004dac:	eb04 0903 	add.w	r9, r4, r3
 8004db0:	f000 fb5c 	bl	800546c <_sbrk_r>
 8004db4:	4581      	cmp	r9, r0
 8004db6:	d142      	bne.n	8004e3e <_malloc_r+0xea>
 8004db8:	6821      	ldr	r1, [r4, #0]
 8004dba:	1a6d      	subs	r5, r5, r1
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	f7ff ffa6 	bl	8004d10 <sbrk_aligned>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d03a      	beq.n	8004e3e <_malloc_r+0xea>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	442b      	add	r3, r5
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	bb62      	cbnz	r2, 8004e30 <_malloc_r+0xdc>
 8004dd6:	f8c8 7000 	str.w	r7, [r8]
 8004dda:	e00f      	b.n	8004dfc <_malloc_r+0xa8>
 8004ddc:	6822      	ldr	r2, [r4, #0]
 8004dde:	1b52      	subs	r2, r2, r5
 8004de0:	d420      	bmi.n	8004e24 <_malloc_r+0xd0>
 8004de2:	2a0b      	cmp	r2, #11
 8004de4:	d917      	bls.n	8004e16 <_malloc_r+0xc2>
 8004de6:	1961      	adds	r1, r4, r5
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	6025      	str	r5, [r4, #0]
 8004dec:	bf18      	it	ne
 8004dee:	6059      	strne	r1, [r3, #4]
 8004df0:	6863      	ldr	r3, [r4, #4]
 8004df2:	bf08      	it	eq
 8004df4:	f8c8 1000 	streq.w	r1, [r8]
 8004df8:	5162      	str	r2, [r4, r5]
 8004dfa:	604b      	str	r3, [r1, #4]
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f000 f82f 	bl	8004e60 <__malloc_unlock>
 8004e02:	f104 000b 	add.w	r0, r4, #11
 8004e06:	1d23      	adds	r3, r4, #4
 8004e08:	f020 0007 	bic.w	r0, r0, #7
 8004e0c:	1ac2      	subs	r2, r0, r3
 8004e0e:	bf1c      	itt	ne
 8004e10:	1a1b      	subne	r3, r3, r0
 8004e12:	50a3      	strne	r3, [r4, r2]
 8004e14:	e7af      	b.n	8004d76 <_malloc_r+0x22>
 8004e16:	6862      	ldr	r2, [r4, #4]
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	bf0c      	ite	eq
 8004e1c:	f8c8 2000 	streq.w	r2, [r8]
 8004e20:	605a      	strne	r2, [r3, #4]
 8004e22:	e7eb      	b.n	8004dfc <_malloc_r+0xa8>
 8004e24:	4623      	mov	r3, r4
 8004e26:	6864      	ldr	r4, [r4, #4]
 8004e28:	e7ae      	b.n	8004d88 <_malloc_r+0x34>
 8004e2a:	463c      	mov	r4, r7
 8004e2c:	687f      	ldr	r7, [r7, #4]
 8004e2e:	e7b6      	b.n	8004d9e <_malloc_r+0x4a>
 8004e30:	461a      	mov	r2, r3
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	d1fb      	bne.n	8004e30 <_malloc_r+0xdc>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	6053      	str	r3, [r2, #4]
 8004e3c:	e7de      	b.n	8004dfc <_malloc_r+0xa8>
 8004e3e:	230c      	movs	r3, #12
 8004e40:	6033      	str	r3, [r6, #0]
 8004e42:	4630      	mov	r0, r6
 8004e44:	f000 f80c 	bl	8004e60 <__malloc_unlock>
 8004e48:	e794      	b.n	8004d74 <_malloc_r+0x20>
 8004e4a:	6005      	str	r5, [r0, #0]
 8004e4c:	e7d6      	b.n	8004dfc <_malloc_r+0xa8>
 8004e4e:	bf00      	nop
 8004e50:	20000314 	.word	0x20000314

08004e54 <__malloc_lock>:
 8004e54:	4801      	ldr	r0, [pc, #4]	@ (8004e5c <__malloc_lock+0x8>)
 8004e56:	f7ff bf07 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 8004e5a:	bf00      	nop
 8004e5c:	2000030c 	.word	0x2000030c

08004e60 <__malloc_unlock>:
 8004e60:	4801      	ldr	r0, [pc, #4]	@ (8004e68 <__malloc_unlock+0x8>)
 8004e62:	f7ff bf02 	b.w	8004c6a <__retarget_lock_release_recursive>
 8004e66:	bf00      	nop
 8004e68:	2000030c 	.word	0x2000030c

08004e6c <__ssputs_r>:
 8004e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	688e      	ldr	r6, [r1, #8]
 8004e72:	461f      	mov	r7, r3
 8004e74:	42be      	cmp	r6, r7
 8004e76:	680b      	ldr	r3, [r1, #0]
 8004e78:	4682      	mov	sl, r0
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	4690      	mov	r8, r2
 8004e7e:	d82d      	bhi.n	8004edc <__ssputs_r+0x70>
 8004e80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e88:	d026      	beq.n	8004ed8 <__ssputs_r+0x6c>
 8004e8a:	6965      	ldr	r5, [r4, #20]
 8004e8c:	6909      	ldr	r1, [r1, #16]
 8004e8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e92:	eba3 0901 	sub.w	r9, r3, r1
 8004e96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e9a:	1c7b      	adds	r3, r7, #1
 8004e9c:	444b      	add	r3, r9
 8004e9e:	106d      	asrs	r5, r5, #1
 8004ea0:	429d      	cmp	r5, r3
 8004ea2:	bf38      	it	cc
 8004ea4:	461d      	movcc	r5, r3
 8004ea6:	0553      	lsls	r3, r2, #21
 8004ea8:	d527      	bpl.n	8004efa <__ssputs_r+0x8e>
 8004eaa:	4629      	mov	r1, r5
 8004eac:	f7ff ff52 	bl	8004d54 <_malloc_r>
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	b360      	cbz	r0, 8004f0e <__ssputs_r+0xa2>
 8004eb4:	6921      	ldr	r1, [r4, #16]
 8004eb6:	464a      	mov	r2, r9
 8004eb8:	f000 fae8 	bl	800548c <memcpy>
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	6126      	str	r6, [r4, #16]
 8004eca:	6165      	str	r5, [r4, #20]
 8004ecc:	444e      	add	r6, r9
 8004ece:	eba5 0509 	sub.w	r5, r5, r9
 8004ed2:	6026      	str	r6, [r4, #0]
 8004ed4:	60a5      	str	r5, [r4, #8]
 8004ed6:	463e      	mov	r6, r7
 8004ed8:	42be      	cmp	r6, r7
 8004eda:	d900      	bls.n	8004ede <__ssputs_r+0x72>
 8004edc:	463e      	mov	r6, r7
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	4632      	mov	r2, r6
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	f000 faa8 	bl	8005438 <memmove>
 8004ee8:	68a3      	ldr	r3, [r4, #8]
 8004eea:	1b9b      	subs	r3, r3, r6
 8004eec:	60a3      	str	r3, [r4, #8]
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	4433      	add	r3, r6
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efa:	462a      	mov	r2, r5
 8004efc:	f000 fad4 	bl	80054a8 <_realloc_r>
 8004f00:	4606      	mov	r6, r0
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d1e0      	bne.n	8004ec8 <__ssputs_r+0x5c>
 8004f06:	6921      	ldr	r1, [r4, #16]
 8004f08:	4650      	mov	r0, sl
 8004f0a:	f7ff feb7 	bl	8004c7c <_free_r>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	f8ca 3000 	str.w	r3, [sl]
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f1a:	81a3      	strh	r3, [r4, #12]
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	e7e9      	b.n	8004ef6 <__ssputs_r+0x8a>
	...

08004f24 <_svfiprintf_r>:
 8004f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	4698      	mov	r8, r3
 8004f2a:	898b      	ldrh	r3, [r1, #12]
 8004f2c:	061b      	lsls	r3, r3, #24
 8004f2e:	b09d      	sub	sp, #116	@ 0x74
 8004f30:	4607      	mov	r7, r0
 8004f32:	460d      	mov	r5, r1
 8004f34:	4614      	mov	r4, r2
 8004f36:	d510      	bpl.n	8004f5a <_svfiprintf_r+0x36>
 8004f38:	690b      	ldr	r3, [r1, #16]
 8004f3a:	b973      	cbnz	r3, 8004f5a <_svfiprintf_r+0x36>
 8004f3c:	2140      	movs	r1, #64	@ 0x40
 8004f3e:	f7ff ff09 	bl	8004d54 <_malloc_r>
 8004f42:	6028      	str	r0, [r5, #0]
 8004f44:	6128      	str	r0, [r5, #16]
 8004f46:	b930      	cbnz	r0, 8004f56 <_svfiprintf_r+0x32>
 8004f48:	230c      	movs	r3, #12
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	b01d      	add	sp, #116	@ 0x74
 8004f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	2340      	movs	r3, #64	@ 0x40
 8004f58:	616b      	str	r3, [r5, #20]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f5e:	2320      	movs	r3, #32
 8004f60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f68:	2330      	movs	r3, #48	@ 0x30
 8004f6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005108 <_svfiprintf_r+0x1e4>
 8004f6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f72:	f04f 0901 	mov.w	r9, #1
 8004f76:	4623      	mov	r3, r4
 8004f78:	469a      	mov	sl, r3
 8004f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f7e:	b10a      	cbz	r2, 8004f84 <_svfiprintf_r+0x60>
 8004f80:	2a25      	cmp	r2, #37	@ 0x25
 8004f82:	d1f9      	bne.n	8004f78 <_svfiprintf_r+0x54>
 8004f84:	ebba 0b04 	subs.w	fp, sl, r4
 8004f88:	d00b      	beq.n	8004fa2 <_svfiprintf_r+0x7e>
 8004f8a:	465b      	mov	r3, fp
 8004f8c:	4622      	mov	r2, r4
 8004f8e:	4629      	mov	r1, r5
 8004f90:	4638      	mov	r0, r7
 8004f92:	f7ff ff6b 	bl	8004e6c <__ssputs_r>
 8004f96:	3001      	adds	r0, #1
 8004f98:	f000 80a7 	beq.w	80050ea <_svfiprintf_r+0x1c6>
 8004f9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f9e:	445a      	add	r2, fp
 8004fa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 809f 	beq.w	80050ea <_svfiprintf_r+0x1c6>
 8004fac:	2300      	movs	r3, #0
 8004fae:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fb6:	f10a 0a01 	add.w	sl, sl, #1
 8004fba:	9304      	str	r3, [sp, #16]
 8004fbc:	9307      	str	r3, [sp, #28]
 8004fbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fc4:	4654      	mov	r4, sl
 8004fc6:	2205      	movs	r2, #5
 8004fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fcc:	484e      	ldr	r0, [pc, #312]	@ (8005108 <_svfiprintf_r+0x1e4>)
 8004fce:	f7fb f93f 	bl	8000250 <memchr>
 8004fd2:	9a04      	ldr	r2, [sp, #16]
 8004fd4:	b9d8      	cbnz	r0, 800500e <_svfiprintf_r+0xea>
 8004fd6:	06d0      	lsls	r0, r2, #27
 8004fd8:	bf44      	itt	mi
 8004fda:	2320      	movmi	r3, #32
 8004fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fe0:	0711      	lsls	r1, r2, #28
 8004fe2:	bf44      	itt	mi
 8004fe4:	232b      	movmi	r3, #43	@ 0x2b
 8004fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fea:	f89a 3000 	ldrb.w	r3, [sl]
 8004fee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ff0:	d015      	beq.n	800501e <_svfiprintf_r+0xfa>
 8004ff2:	9a07      	ldr	r2, [sp, #28]
 8004ff4:	4654      	mov	r4, sl
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f04f 0c0a 	mov.w	ip, #10
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005002:	3b30      	subs	r3, #48	@ 0x30
 8005004:	2b09      	cmp	r3, #9
 8005006:	d94b      	bls.n	80050a0 <_svfiprintf_r+0x17c>
 8005008:	b1b0      	cbz	r0, 8005038 <_svfiprintf_r+0x114>
 800500a:	9207      	str	r2, [sp, #28]
 800500c:	e014      	b.n	8005038 <_svfiprintf_r+0x114>
 800500e:	eba0 0308 	sub.w	r3, r0, r8
 8005012:	fa09 f303 	lsl.w	r3, r9, r3
 8005016:	4313      	orrs	r3, r2
 8005018:	9304      	str	r3, [sp, #16]
 800501a:	46a2      	mov	sl, r4
 800501c:	e7d2      	b.n	8004fc4 <_svfiprintf_r+0xa0>
 800501e:	9b03      	ldr	r3, [sp, #12]
 8005020:	1d19      	adds	r1, r3, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	9103      	str	r1, [sp, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	bfbb      	ittet	lt
 800502a:	425b      	neglt	r3, r3
 800502c:	f042 0202 	orrlt.w	r2, r2, #2
 8005030:	9307      	strge	r3, [sp, #28]
 8005032:	9307      	strlt	r3, [sp, #28]
 8005034:	bfb8      	it	lt
 8005036:	9204      	strlt	r2, [sp, #16]
 8005038:	7823      	ldrb	r3, [r4, #0]
 800503a:	2b2e      	cmp	r3, #46	@ 0x2e
 800503c:	d10a      	bne.n	8005054 <_svfiprintf_r+0x130>
 800503e:	7863      	ldrb	r3, [r4, #1]
 8005040:	2b2a      	cmp	r3, #42	@ 0x2a
 8005042:	d132      	bne.n	80050aa <_svfiprintf_r+0x186>
 8005044:	9b03      	ldr	r3, [sp, #12]
 8005046:	1d1a      	adds	r2, r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	9203      	str	r2, [sp, #12]
 800504c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005050:	3402      	adds	r4, #2
 8005052:	9305      	str	r3, [sp, #20]
 8005054:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005118 <_svfiprintf_r+0x1f4>
 8005058:	7821      	ldrb	r1, [r4, #0]
 800505a:	2203      	movs	r2, #3
 800505c:	4650      	mov	r0, sl
 800505e:	f7fb f8f7 	bl	8000250 <memchr>
 8005062:	b138      	cbz	r0, 8005074 <_svfiprintf_r+0x150>
 8005064:	9b04      	ldr	r3, [sp, #16]
 8005066:	eba0 000a 	sub.w	r0, r0, sl
 800506a:	2240      	movs	r2, #64	@ 0x40
 800506c:	4082      	lsls	r2, r0
 800506e:	4313      	orrs	r3, r2
 8005070:	3401      	adds	r4, #1
 8005072:	9304      	str	r3, [sp, #16]
 8005074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005078:	4824      	ldr	r0, [pc, #144]	@ (800510c <_svfiprintf_r+0x1e8>)
 800507a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800507e:	2206      	movs	r2, #6
 8005080:	f7fb f8e6 	bl	8000250 <memchr>
 8005084:	2800      	cmp	r0, #0
 8005086:	d036      	beq.n	80050f6 <_svfiprintf_r+0x1d2>
 8005088:	4b21      	ldr	r3, [pc, #132]	@ (8005110 <_svfiprintf_r+0x1ec>)
 800508a:	bb1b      	cbnz	r3, 80050d4 <_svfiprintf_r+0x1b0>
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	3307      	adds	r3, #7
 8005090:	f023 0307 	bic.w	r3, r3, #7
 8005094:	3308      	adds	r3, #8
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800509a:	4433      	add	r3, r6
 800509c:	9309      	str	r3, [sp, #36]	@ 0x24
 800509e:	e76a      	b.n	8004f76 <_svfiprintf_r+0x52>
 80050a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80050a4:	460c      	mov	r4, r1
 80050a6:	2001      	movs	r0, #1
 80050a8:	e7a8      	b.n	8004ffc <_svfiprintf_r+0xd8>
 80050aa:	2300      	movs	r3, #0
 80050ac:	3401      	adds	r4, #1
 80050ae:	9305      	str	r3, [sp, #20]
 80050b0:	4619      	mov	r1, r3
 80050b2:	f04f 0c0a 	mov.w	ip, #10
 80050b6:	4620      	mov	r0, r4
 80050b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050bc:	3a30      	subs	r2, #48	@ 0x30
 80050be:	2a09      	cmp	r2, #9
 80050c0:	d903      	bls.n	80050ca <_svfiprintf_r+0x1a6>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0c6      	beq.n	8005054 <_svfiprintf_r+0x130>
 80050c6:	9105      	str	r1, [sp, #20]
 80050c8:	e7c4      	b.n	8005054 <_svfiprintf_r+0x130>
 80050ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ce:	4604      	mov	r4, r0
 80050d0:	2301      	movs	r3, #1
 80050d2:	e7f0      	b.n	80050b6 <_svfiprintf_r+0x192>
 80050d4:	ab03      	add	r3, sp, #12
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	462a      	mov	r2, r5
 80050da:	4b0e      	ldr	r3, [pc, #56]	@ (8005114 <_svfiprintf_r+0x1f0>)
 80050dc:	a904      	add	r1, sp, #16
 80050de:	4638      	mov	r0, r7
 80050e0:	f3af 8000 	nop.w
 80050e4:	1c42      	adds	r2, r0, #1
 80050e6:	4606      	mov	r6, r0
 80050e8:	d1d6      	bne.n	8005098 <_svfiprintf_r+0x174>
 80050ea:	89ab      	ldrh	r3, [r5, #12]
 80050ec:	065b      	lsls	r3, r3, #25
 80050ee:	f53f af2d 	bmi.w	8004f4c <_svfiprintf_r+0x28>
 80050f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050f4:	e72c      	b.n	8004f50 <_svfiprintf_r+0x2c>
 80050f6:	ab03      	add	r3, sp, #12
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	462a      	mov	r2, r5
 80050fc:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <_svfiprintf_r+0x1f0>)
 80050fe:	a904      	add	r1, sp, #16
 8005100:	4638      	mov	r0, r7
 8005102:	f000 f879 	bl	80051f8 <_printf_i>
 8005106:	e7ed      	b.n	80050e4 <_svfiprintf_r+0x1c0>
 8005108:	080057b4 	.word	0x080057b4
 800510c:	080057be 	.word	0x080057be
 8005110:	00000000 	.word	0x00000000
 8005114:	08004e6d 	.word	0x08004e6d
 8005118:	080057ba 	.word	0x080057ba

0800511c <_printf_common>:
 800511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	4616      	mov	r6, r2
 8005122:	4698      	mov	r8, r3
 8005124:	688a      	ldr	r2, [r1, #8]
 8005126:	690b      	ldr	r3, [r1, #16]
 8005128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800512c:	4293      	cmp	r3, r2
 800512e:	bfb8      	it	lt
 8005130:	4613      	movlt	r3, r2
 8005132:	6033      	str	r3, [r6, #0]
 8005134:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005138:	4607      	mov	r7, r0
 800513a:	460c      	mov	r4, r1
 800513c:	b10a      	cbz	r2, 8005142 <_printf_common+0x26>
 800513e:	3301      	adds	r3, #1
 8005140:	6033      	str	r3, [r6, #0]
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	0699      	lsls	r1, r3, #26
 8005146:	bf42      	ittt	mi
 8005148:	6833      	ldrmi	r3, [r6, #0]
 800514a:	3302      	addmi	r3, #2
 800514c:	6033      	strmi	r3, [r6, #0]
 800514e:	6825      	ldr	r5, [r4, #0]
 8005150:	f015 0506 	ands.w	r5, r5, #6
 8005154:	d106      	bne.n	8005164 <_printf_common+0x48>
 8005156:	f104 0a19 	add.w	sl, r4, #25
 800515a:	68e3      	ldr	r3, [r4, #12]
 800515c:	6832      	ldr	r2, [r6, #0]
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	42ab      	cmp	r3, r5
 8005162:	dc26      	bgt.n	80051b2 <_printf_common+0x96>
 8005164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	3b00      	subs	r3, #0
 800516c:	bf18      	it	ne
 800516e:	2301      	movne	r3, #1
 8005170:	0692      	lsls	r2, r2, #26
 8005172:	d42b      	bmi.n	80051cc <_printf_common+0xb0>
 8005174:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005178:	4641      	mov	r1, r8
 800517a:	4638      	mov	r0, r7
 800517c:	47c8      	blx	r9
 800517e:	3001      	adds	r0, #1
 8005180:	d01e      	beq.n	80051c0 <_printf_common+0xa4>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	6922      	ldr	r2, [r4, #16]
 8005186:	f003 0306 	and.w	r3, r3, #6
 800518a:	2b04      	cmp	r3, #4
 800518c:	bf02      	ittt	eq
 800518e:	68e5      	ldreq	r5, [r4, #12]
 8005190:	6833      	ldreq	r3, [r6, #0]
 8005192:	1aed      	subeq	r5, r5, r3
 8005194:	68a3      	ldr	r3, [r4, #8]
 8005196:	bf0c      	ite	eq
 8005198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800519c:	2500      	movne	r5, #0
 800519e:	4293      	cmp	r3, r2
 80051a0:	bfc4      	itt	gt
 80051a2:	1a9b      	subgt	r3, r3, r2
 80051a4:	18ed      	addgt	r5, r5, r3
 80051a6:	2600      	movs	r6, #0
 80051a8:	341a      	adds	r4, #26
 80051aa:	42b5      	cmp	r5, r6
 80051ac:	d11a      	bne.n	80051e4 <_printf_common+0xc8>
 80051ae:	2000      	movs	r0, #0
 80051b0:	e008      	b.n	80051c4 <_printf_common+0xa8>
 80051b2:	2301      	movs	r3, #1
 80051b4:	4652      	mov	r2, sl
 80051b6:	4641      	mov	r1, r8
 80051b8:	4638      	mov	r0, r7
 80051ba:	47c8      	blx	r9
 80051bc:	3001      	adds	r0, #1
 80051be:	d103      	bne.n	80051c8 <_printf_common+0xac>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c8:	3501      	adds	r5, #1
 80051ca:	e7c6      	b.n	800515a <_printf_common+0x3e>
 80051cc:	18e1      	adds	r1, r4, r3
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	2030      	movs	r0, #48	@ 0x30
 80051d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051d6:	4422      	add	r2, r4
 80051d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051e0:	3302      	adds	r3, #2
 80051e2:	e7c7      	b.n	8005174 <_printf_common+0x58>
 80051e4:	2301      	movs	r3, #1
 80051e6:	4622      	mov	r2, r4
 80051e8:	4641      	mov	r1, r8
 80051ea:	4638      	mov	r0, r7
 80051ec:	47c8      	blx	r9
 80051ee:	3001      	adds	r0, #1
 80051f0:	d0e6      	beq.n	80051c0 <_printf_common+0xa4>
 80051f2:	3601      	adds	r6, #1
 80051f4:	e7d9      	b.n	80051aa <_printf_common+0x8e>
	...

080051f8 <_printf_i>:
 80051f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051fc:	7e0f      	ldrb	r7, [r1, #24]
 80051fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005200:	2f78      	cmp	r7, #120	@ 0x78
 8005202:	4691      	mov	r9, r2
 8005204:	4680      	mov	r8, r0
 8005206:	460c      	mov	r4, r1
 8005208:	469a      	mov	sl, r3
 800520a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800520e:	d807      	bhi.n	8005220 <_printf_i+0x28>
 8005210:	2f62      	cmp	r7, #98	@ 0x62
 8005212:	d80a      	bhi.n	800522a <_printf_i+0x32>
 8005214:	2f00      	cmp	r7, #0
 8005216:	f000 80d2 	beq.w	80053be <_printf_i+0x1c6>
 800521a:	2f58      	cmp	r7, #88	@ 0x58
 800521c:	f000 80b9 	beq.w	8005392 <_printf_i+0x19a>
 8005220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005228:	e03a      	b.n	80052a0 <_printf_i+0xa8>
 800522a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800522e:	2b15      	cmp	r3, #21
 8005230:	d8f6      	bhi.n	8005220 <_printf_i+0x28>
 8005232:	a101      	add	r1, pc, #4	@ (adr r1, 8005238 <_printf_i+0x40>)
 8005234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005238:	08005291 	.word	0x08005291
 800523c:	080052a5 	.word	0x080052a5
 8005240:	08005221 	.word	0x08005221
 8005244:	08005221 	.word	0x08005221
 8005248:	08005221 	.word	0x08005221
 800524c:	08005221 	.word	0x08005221
 8005250:	080052a5 	.word	0x080052a5
 8005254:	08005221 	.word	0x08005221
 8005258:	08005221 	.word	0x08005221
 800525c:	08005221 	.word	0x08005221
 8005260:	08005221 	.word	0x08005221
 8005264:	080053a5 	.word	0x080053a5
 8005268:	080052cf 	.word	0x080052cf
 800526c:	0800535f 	.word	0x0800535f
 8005270:	08005221 	.word	0x08005221
 8005274:	08005221 	.word	0x08005221
 8005278:	080053c7 	.word	0x080053c7
 800527c:	08005221 	.word	0x08005221
 8005280:	080052cf 	.word	0x080052cf
 8005284:	08005221 	.word	0x08005221
 8005288:	08005221 	.word	0x08005221
 800528c:	08005367 	.word	0x08005367
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	1d1a      	adds	r2, r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6032      	str	r2, [r6, #0]
 8005298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800529c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052a0:	2301      	movs	r3, #1
 80052a2:	e09d      	b.n	80053e0 <_printf_i+0x1e8>
 80052a4:	6833      	ldr	r3, [r6, #0]
 80052a6:	6820      	ldr	r0, [r4, #0]
 80052a8:	1d19      	adds	r1, r3, #4
 80052aa:	6031      	str	r1, [r6, #0]
 80052ac:	0606      	lsls	r6, r0, #24
 80052ae:	d501      	bpl.n	80052b4 <_printf_i+0xbc>
 80052b0:	681d      	ldr	r5, [r3, #0]
 80052b2:	e003      	b.n	80052bc <_printf_i+0xc4>
 80052b4:	0645      	lsls	r5, r0, #25
 80052b6:	d5fb      	bpl.n	80052b0 <_printf_i+0xb8>
 80052b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052bc:	2d00      	cmp	r5, #0
 80052be:	da03      	bge.n	80052c8 <_printf_i+0xd0>
 80052c0:	232d      	movs	r3, #45	@ 0x2d
 80052c2:	426d      	negs	r5, r5
 80052c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052c8:	4859      	ldr	r0, [pc, #356]	@ (8005430 <_printf_i+0x238>)
 80052ca:	230a      	movs	r3, #10
 80052cc:	e011      	b.n	80052f2 <_printf_i+0xfa>
 80052ce:	6821      	ldr	r1, [r4, #0]
 80052d0:	6833      	ldr	r3, [r6, #0]
 80052d2:	0608      	lsls	r0, r1, #24
 80052d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80052d8:	d402      	bmi.n	80052e0 <_printf_i+0xe8>
 80052da:	0649      	lsls	r1, r1, #25
 80052dc:	bf48      	it	mi
 80052de:	b2ad      	uxthmi	r5, r5
 80052e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80052e2:	4853      	ldr	r0, [pc, #332]	@ (8005430 <_printf_i+0x238>)
 80052e4:	6033      	str	r3, [r6, #0]
 80052e6:	bf14      	ite	ne
 80052e8:	230a      	movne	r3, #10
 80052ea:	2308      	moveq	r3, #8
 80052ec:	2100      	movs	r1, #0
 80052ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052f2:	6866      	ldr	r6, [r4, #4]
 80052f4:	60a6      	str	r6, [r4, #8]
 80052f6:	2e00      	cmp	r6, #0
 80052f8:	bfa2      	ittt	ge
 80052fa:	6821      	ldrge	r1, [r4, #0]
 80052fc:	f021 0104 	bicge.w	r1, r1, #4
 8005300:	6021      	strge	r1, [r4, #0]
 8005302:	b90d      	cbnz	r5, 8005308 <_printf_i+0x110>
 8005304:	2e00      	cmp	r6, #0
 8005306:	d04b      	beq.n	80053a0 <_printf_i+0x1a8>
 8005308:	4616      	mov	r6, r2
 800530a:	fbb5 f1f3 	udiv	r1, r5, r3
 800530e:	fb03 5711 	mls	r7, r3, r1, r5
 8005312:	5dc7      	ldrb	r7, [r0, r7]
 8005314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005318:	462f      	mov	r7, r5
 800531a:	42bb      	cmp	r3, r7
 800531c:	460d      	mov	r5, r1
 800531e:	d9f4      	bls.n	800530a <_printf_i+0x112>
 8005320:	2b08      	cmp	r3, #8
 8005322:	d10b      	bne.n	800533c <_printf_i+0x144>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	07df      	lsls	r7, r3, #31
 8005328:	d508      	bpl.n	800533c <_printf_i+0x144>
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	6861      	ldr	r1, [r4, #4]
 800532e:	4299      	cmp	r1, r3
 8005330:	bfde      	ittt	le
 8005332:	2330      	movle	r3, #48	@ 0x30
 8005334:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005338:	f106 36ff 	addle.w	r6, r6, #4294967295
 800533c:	1b92      	subs	r2, r2, r6
 800533e:	6122      	str	r2, [r4, #16]
 8005340:	f8cd a000 	str.w	sl, [sp]
 8005344:	464b      	mov	r3, r9
 8005346:	aa03      	add	r2, sp, #12
 8005348:	4621      	mov	r1, r4
 800534a:	4640      	mov	r0, r8
 800534c:	f7ff fee6 	bl	800511c <_printf_common>
 8005350:	3001      	adds	r0, #1
 8005352:	d14a      	bne.n	80053ea <_printf_i+0x1f2>
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	b004      	add	sp, #16
 800535a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	f043 0320 	orr.w	r3, r3, #32
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	4833      	ldr	r0, [pc, #204]	@ (8005434 <_printf_i+0x23c>)
 8005368:	2778      	movs	r7, #120	@ 0x78
 800536a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	6831      	ldr	r1, [r6, #0]
 8005372:	061f      	lsls	r7, r3, #24
 8005374:	f851 5b04 	ldr.w	r5, [r1], #4
 8005378:	d402      	bmi.n	8005380 <_printf_i+0x188>
 800537a:	065f      	lsls	r7, r3, #25
 800537c:	bf48      	it	mi
 800537e:	b2ad      	uxthmi	r5, r5
 8005380:	6031      	str	r1, [r6, #0]
 8005382:	07d9      	lsls	r1, r3, #31
 8005384:	bf44      	itt	mi
 8005386:	f043 0320 	orrmi.w	r3, r3, #32
 800538a:	6023      	strmi	r3, [r4, #0]
 800538c:	b11d      	cbz	r5, 8005396 <_printf_i+0x19e>
 800538e:	2310      	movs	r3, #16
 8005390:	e7ac      	b.n	80052ec <_printf_i+0xf4>
 8005392:	4827      	ldr	r0, [pc, #156]	@ (8005430 <_printf_i+0x238>)
 8005394:	e7e9      	b.n	800536a <_printf_i+0x172>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	f023 0320 	bic.w	r3, r3, #32
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	e7f6      	b.n	800538e <_printf_i+0x196>
 80053a0:	4616      	mov	r6, r2
 80053a2:	e7bd      	b.n	8005320 <_printf_i+0x128>
 80053a4:	6833      	ldr	r3, [r6, #0]
 80053a6:	6825      	ldr	r5, [r4, #0]
 80053a8:	6961      	ldr	r1, [r4, #20]
 80053aa:	1d18      	adds	r0, r3, #4
 80053ac:	6030      	str	r0, [r6, #0]
 80053ae:	062e      	lsls	r6, r5, #24
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	d501      	bpl.n	80053b8 <_printf_i+0x1c0>
 80053b4:	6019      	str	r1, [r3, #0]
 80053b6:	e002      	b.n	80053be <_printf_i+0x1c6>
 80053b8:	0668      	lsls	r0, r5, #25
 80053ba:	d5fb      	bpl.n	80053b4 <_printf_i+0x1bc>
 80053bc:	8019      	strh	r1, [r3, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	6123      	str	r3, [r4, #16]
 80053c2:	4616      	mov	r6, r2
 80053c4:	e7bc      	b.n	8005340 <_printf_i+0x148>
 80053c6:	6833      	ldr	r3, [r6, #0]
 80053c8:	1d1a      	adds	r2, r3, #4
 80053ca:	6032      	str	r2, [r6, #0]
 80053cc:	681e      	ldr	r6, [r3, #0]
 80053ce:	6862      	ldr	r2, [r4, #4]
 80053d0:	2100      	movs	r1, #0
 80053d2:	4630      	mov	r0, r6
 80053d4:	f7fa ff3c 	bl	8000250 <memchr>
 80053d8:	b108      	cbz	r0, 80053de <_printf_i+0x1e6>
 80053da:	1b80      	subs	r0, r0, r6
 80053dc:	6060      	str	r0, [r4, #4]
 80053de:	6863      	ldr	r3, [r4, #4]
 80053e0:	6123      	str	r3, [r4, #16]
 80053e2:	2300      	movs	r3, #0
 80053e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053e8:	e7aa      	b.n	8005340 <_printf_i+0x148>
 80053ea:	6923      	ldr	r3, [r4, #16]
 80053ec:	4632      	mov	r2, r6
 80053ee:	4649      	mov	r1, r9
 80053f0:	4640      	mov	r0, r8
 80053f2:	47d0      	blx	sl
 80053f4:	3001      	adds	r0, #1
 80053f6:	d0ad      	beq.n	8005354 <_printf_i+0x15c>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	079b      	lsls	r3, r3, #30
 80053fc:	d413      	bmi.n	8005426 <_printf_i+0x22e>
 80053fe:	68e0      	ldr	r0, [r4, #12]
 8005400:	9b03      	ldr	r3, [sp, #12]
 8005402:	4298      	cmp	r0, r3
 8005404:	bfb8      	it	lt
 8005406:	4618      	movlt	r0, r3
 8005408:	e7a6      	b.n	8005358 <_printf_i+0x160>
 800540a:	2301      	movs	r3, #1
 800540c:	4632      	mov	r2, r6
 800540e:	4649      	mov	r1, r9
 8005410:	4640      	mov	r0, r8
 8005412:	47d0      	blx	sl
 8005414:	3001      	adds	r0, #1
 8005416:	d09d      	beq.n	8005354 <_printf_i+0x15c>
 8005418:	3501      	adds	r5, #1
 800541a:	68e3      	ldr	r3, [r4, #12]
 800541c:	9903      	ldr	r1, [sp, #12]
 800541e:	1a5b      	subs	r3, r3, r1
 8005420:	42ab      	cmp	r3, r5
 8005422:	dcf2      	bgt.n	800540a <_printf_i+0x212>
 8005424:	e7eb      	b.n	80053fe <_printf_i+0x206>
 8005426:	2500      	movs	r5, #0
 8005428:	f104 0619 	add.w	r6, r4, #25
 800542c:	e7f5      	b.n	800541a <_printf_i+0x222>
 800542e:	bf00      	nop
 8005430:	080057c5 	.word	0x080057c5
 8005434:	080057d6 	.word	0x080057d6

08005438 <memmove>:
 8005438:	4288      	cmp	r0, r1
 800543a:	b510      	push	{r4, lr}
 800543c:	eb01 0402 	add.w	r4, r1, r2
 8005440:	d902      	bls.n	8005448 <memmove+0x10>
 8005442:	4284      	cmp	r4, r0
 8005444:	4623      	mov	r3, r4
 8005446:	d807      	bhi.n	8005458 <memmove+0x20>
 8005448:	1e43      	subs	r3, r0, #1
 800544a:	42a1      	cmp	r1, r4
 800544c:	d008      	beq.n	8005460 <memmove+0x28>
 800544e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005456:	e7f8      	b.n	800544a <memmove+0x12>
 8005458:	4402      	add	r2, r0
 800545a:	4601      	mov	r1, r0
 800545c:	428a      	cmp	r2, r1
 800545e:	d100      	bne.n	8005462 <memmove+0x2a>
 8005460:	bd10      	pop	{r4, pc}
 8005462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800546a:	e7f7      	b.n	800545c <memmove+0x24>

0800546c <_sbrk_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d06      	ldr	r5, [pc, #24]	@ (8005488 <_sbrk_r+0x1c>)
 8005470:	2300      	movs	r3, #0
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	f7fb ffae 	bl	80013d8 <_sbrk>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_sbrk_r+0x1a>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b103      	cbz	r3, 8005486 <_sbrk_r+0x1a>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	20000308 	.word	0x20000308

0800548c <memcpy>:
 800548c:	440a      	add	r2, r1
 800548e:	4291      	cmp	r1, r2
 8005490:	f100 33ff 	add.w	r3, r0, #4294967295
 8005494:	d100      	bne.n	8005498 <memcpy+0xc>
 8005496:	4770      	bx	lr
 8005498:	b510      	push	{r4, lr}
 800549a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800549e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a2:	4291      	cmp	r1, r2
 80054a4:	d1f9      	bne.n	800549a <memcpy+0xe>
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <_realloc_r>:
 80054a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ac:	4680      	mov	r8, r0
 80054ae:	4615      	mov	r5, r2
 80054b0:	460c      	mov	r4, r1
 80054b2:	b921      	cbnz	r1, 80054be <_realloc_r+0x16>
 80054b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054b8:	4611      	mov	r1, r2
 80054ba:	f7ff bc4b 	b.w	8004d54 <_malloc_r>
 80054be:	b92a      	cbnz	r2, 80054cc <_realloc_r+0x24>
 80054c0:	f7ff fbdc 	bl	8004c7c <_free_r>
 80054c4:	2400      	movs	r4, #0
 80054c6:	4620      	mov	r0, r4
 80054c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054cc:	f000 f81a 	bl	8005504 <_malloc_usable_size_r>
 80054d0:	4285      	cmp	r5, r0
 80054d2:	4606      	mov	r6, r0
 80054d4:	d802      	bhi.n	80054dc <_realloc_r+0x34>
 80054d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054da:	d8f4      	bhi.n	80054c6 <_realloc_r+0x1e>
 80054dc:	4629      	mov	r1, r5
 80054de:	4640      	mov	r0, r8
 80054e0:	f7ff fc38 	bl	8004d54 <_malloc_r>
 80054e4:	4607      	mov	r7, r0
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d0ec      	beq.n	80054c4 <_realloc_r+0x1c>
 80054ea:	42b5      	cmp	r5, r6
 80054ec:	462a      	mov	r2, r5
 80054ee:	4621      	mov	r1, r4
 80054f0:	bf28      	it	cs
 80054f2:	4632      	movcs	r2, r6
 80054f4:	f7ff ffca 	bl	800548c <memcpy>
 80054f8:	4621      	mov	r1, r4
 80054fa:	4640      	mov	r0, r8
 80054fc:	f7ff fbbe 	bl	8004c7c <_free_r>
 8005500:	463c      	mov	r4, r7
 8005502:	e7e0      	b.n	80054c6 <_realloc_r+0x1e>

08005504 <_malloc_usable_size_r>:
 8005504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005508:	1f18      	subs	r0, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	bfbc      	itt	lt
 800550e:	580b      	ldrlt	r3, [r1, r0]
 8005510:	18c0      	addlt	r0, r0, r3
 8005512:	4770      	bx	lr

08005514 <_init>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr

08005520 <_fini>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr
