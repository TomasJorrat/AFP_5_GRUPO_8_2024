
AFP_5_GRUPO_8_Alarma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f0c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080050ec  080050ec  000060ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d8  080053d8  000070a0  2**0
                  CONTENTS
  4 .ARM          00000008  080053d8  080053d8  000063d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e0  080053e0  000070a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e0  080053e0  000063e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053e4  080053e4  000063e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080053e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200000a0  08005488  000070a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005488  00007310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d670  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a0  00000000  00000000  00014740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00016be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000911  00000000  00000000  00017798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002197d  00000000  00000000  000180a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111ab  00000000  00000000  00039a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8b33  00000000  00000000  0004abd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034cc  00000000  00000000  00113748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00116c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080050d4 	.word	0x080050d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	080050d4 	.word	0x080050d4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 fb36 	bl	8001c54 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_GPIO_Init();
 80005e8:	f001 f82c 	bl	8001644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 ff82 	bl	80014f4 <MX_USART2_UART_Init>
  keypad_init();
 80005f0:	f001 f966 	bl	80018c0 <keypad_init>
  BT_Test();
 80005f4:	f000 ffbe 	bl	8001574 <BT_Test>

  MX_I2C2_Init();
 80005f8:	f001 fafe 	bl	8001bf8 <MX_I2C2_Init>
  HAL_Delay(30);
 80005fc:	201e      	movs	r0, #30
 80005fe:	f001 fb9b 	bl	8001d38 <HAL_Delay>
  lcd_init();
 8000602:	f001 fa25 	bl	8001a50 <lcd_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f84f 	bl	80006a8 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  DisplayMainMenu();
 800060a:	f000 f8b9 	bl	8000780 <DisplayMainMenu>
  delayInit(&DelayGRAL_1,20000);
 800060e:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000612:	481f      	ldr	r0, [pc, #124]	@ (8000690 <main+0xb0>)
 8000614:	f000 ffd8 	bl	80015c8 <delayInit>
  delayInit(&DelayGRAL_2,10000);
 8000618:	f242 7110 	movw	r1, #10000	@ 0x2710
 800061c:	481d      	ldr	r0, [pc, #116]	@ (8000694 <main+0xb4>)
 800061e:	f000 ffd3 	bl	80015c8 <delayInit>
  delayInit(&LCD_Muestro,2000);
 8000622:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000626:	481c      	ldr	r0, [pc, #112]	@ (8000698 <main+0xb8>)
 8000628:	f000 ffce 	bl	80015c8 <delayInit>
  delayInit(&Delay_Sirena,500);
 800062c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000630:	481a      	ldr	r0, [pc, #104]	@ (800069c <main+0xbc>)
 8000632:	f000 ffc9 	bl	80015c8 <delayInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  key = keypad_getkey(); // Modificacion del if dentro del switch
 8000636:	f001 f99f 	bl	8001978 <keypad_getkey>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <main+0xc0>)
 8000640:	701a      	strb	r2, [r3, #0]
	  switch (currentState){
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <main+0xc4>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b04      	cmp	r3, #4
 8000648:	dcf5      	bgt.n	8000636 <main+0x56>
 800064a:	2b02      	cmp	r3, #2
 800064c:	da18      	bge.n	8000680 <main+0xa0>
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <main+0x78>
 8000652:	2b01      	cmp	r3, #1
 8000654:	d00a      	beq.n	800066c <main+0x8c>
 8000656:	e019      	b.n	800068c <main+0xac>
		  case MAIN_MENU:
			  	  if (key != '\0') HandleMainMenuInput(key);
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <main+0xc0>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d012      	beq.n	8000686 <main+0xa6>
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <main+0xc0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f8a9 	bl	80007bc <HandleMainMenuInput>
			  	  break;
 800066a:	e00c      	b.n	8000686 <main+0xa6>
		  case ALARM_MENU:
			  	  if (key != '\0') HandleAlarmMenuInput(key);
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <main+0xc0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <main+0xaa>
 8000674:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <main+0xc0>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f8d9 	bl	8000830 <HandleAlarmMenuInput>
			  	  break;
 800067e:	e004      	b.n	800068a <main+0xaa>
		  case CHANGE_PASS_MENU:
		  case TEST_ALARM_MENU:
		  case ACTIVE_ALARM:
			  	  CheckSensors();
 8000680:	f000 fd36 	bl	80010f0 <CheckSensors>
			  	  break;
 8000684:	e002      	b.n	800068c <main+0xac>
			  	  break;
 8000686:	bf00      	nop
 8000688:	e7d5      	b.n	8000636 <main+0x56>
			  	  break;
 800068a:	bf00      	nop
	  key = keypad_getkey(); // Modificacion del if dentro del switch
 800068c:	e7d3      	b.n	8000636 <main+0x56>
 800068e:	bf00      	nop
 8000690:	2000016c 	.word	0x2000016c
 8000694:	20000178 	.word	0x20000178
 8000698:	20000184 	.word	0x20000184
 800069c:	20000190 	.word	0x20000190
 80006a0:	2000015d 	.word	0x2000015d
 80006a4:	2000015e 	.word	0x2000015e

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2234      	movs	r2, #52	@ 0x34
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 f884 	bl	80047c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <SystemClock_Config+0xd0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a28      	ldr	r2, [pc, #160]	@ (8000778 <SystemClock_Config+0xd0>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
 80006dc:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <SystemClock_Config+0xd0>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	4b23      	ldr	r3, [pc, #140]	@ (800077c <SystemClock_Config+0xd4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a22      	ldr	r2, [pc, #136]	@ (800077c <SystemClock_Config+0xd4>)
 80006f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b20      	ldr	r3, [pc, #128]	@ (800077c <SystemClock_Config+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000704:	2301      	movs	r3, #1
 8000706:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000708:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800070c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000716:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 800071c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000720:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000722:	2304      	movs	r3, #4
 8000724:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000726:	2308      	movs	r3, #8
 8000728:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fd66 	bl	8003204 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073e:	f000 fd67 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2103      	movs	r1, #3
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fb30 	bl	8002dc4 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800076a:	f000 fd51 	bl	8001210 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	@ 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <DisplayMainMenu>:
/*****************************************************************************************************************
 * @brief: Función para mostrar el menú principal
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayMainMenu() {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    lcd_clear();
 8000784:	f001 f98f 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000788:	2100      	movs	r1, #0
 800078a:	2000      	movs	r0, #0
 800078c:	f001 f995 	bl	8001aba <lcd_set_cursor>
    lcd_print("1.Activar *.Mas");
 8000790:	4807      	ldr	r0, [pc, #28]	@ (80007b0 <DisplayMainMenu+0x30>)
 8000792:	f001 f9ac 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 8000796:	2100      	movs	r1, #0
 8000798:	2001      	movs	r0, #1
 800079a:	f001 f98e 	bl	8001aba <lcd_set_cursor>
    lcd_print("2.Cambiar Pass");
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <DisplayMainMenu+0x34>)
 80007a0:	f001 f9a5 	bl	8001aee <lcd_print>
    currentState = MAIN_MENU;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <DisplayMainMenu+0x38>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	080050ec 	.word	0x080050ec
 80007b4:	080050fc 	.word	0x080050fc
 80007b8:	2000015e 	.word	0x2000015e

080007bc <HandleMainMenuInput>:
/*****************************************************************************************************************
 * @brief: Manejo de la entrada del menú principal
 * @param: recibe una variable tipo caracter para entrar en las distintas opciones de menu
 * @retval: void
******************************************************************************************************************/
void HandleMainMenuInput(char key) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b32      	cmp	r3, #50	@ 0x32
 80007ca:	d008      	beq.n	80007de <HandleMainMenuInput+0x22>
 80007cc:	2b32      	cmp	r3, #50	@ 0x32
 80007ce:	dc0c      	bgt.n	80007ea <HandleMainMenuInput+0x2e>
 80007d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80007d2:	d007      	beq.n	80007e4 <HandleMainMenuInput+0x28>
 80007d4:	2b31      	cmp	r3, #49	@ 0x31
 80007d6:	d108      	bne.n	80007ea <HandleMainMenuInput+0x2e>
        case '1':
            DisplayAlarmMenu();
 80007d8:	f000 f80c 	bl	80007f4 <DisplayAlarmMenu>
            break;
 80007dc:	e005      	b.n	80007ea <HandleMainMenuInput+0x2e>
        case '2':
            DisplayChangePassMenu();
 80007de:	f000 fab9 	bl	8000d54 <DisplayChangePassMenu>
            break;
 80007e2:	e002      	b.n	80007ea <HandleMainMenuInput+0x2e>
        case '*':
            HandleSubMenu();
 80007e4:	f000 fc1e 	bl	8001024 <HandleSubMenu>
            break;
 80007e8:	bf00      	nop
    }
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <DisplayAlarmMenu>:
/*****************************************************************************************************************
 * @brief: Mostrar menú para activar alarma
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayAlarmMenu(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    lcd_clear();
 80007f8:	f001 f955 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 80007fc:	2100      	movs	r1, #0
 80007fe:	2000      	movs	r0, #0
 8000800:	f001 f95b 	bl	8001aba <lcd_set_cursor>
    lcd_print("1.Sist Completo");
 8000804:	4807      	ldr	r0, [pc, #28]	@ (8000824 <DisplayAlarmMenu+0x30>)
 8000806:	f001 f972 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 800080a:	2100      	movs	r1, #0
 800080c:	2001      	movs	r0, #1
 800080e:	f001 f954 	bl	8001aba <lcd_set_cursor>
    lcd_print("2.Sin Sensor Mov");
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <DisplayAlarmMenu+0x34>)
 8000814:	f001 f96b 	bl	8001aee <lcd_print>
    currentState = ALARM_MENU;
 8000818:	4b04      	ldr	r3, [pc, #16]	@ (800082c <DisplayAlarmMenu+0x38>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	0800510c 	.word	0x0800510c
 8000828:	0800511c 	.word	0x0800511c
 800082c:	2000015e 	.word	0x2000015e

08000830 <HandleAlarmMenuInput>:
/*****************************************************************************************************************
 * @brief: Manejo de la entrada del menú de alarma
 * @param: Recibe variable tipo caracter
 * @retval:
******************************************************************************************************************/
void HandleAlarmMenuInput(char key) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b32      	cmp	r3, #50	@ 0x32
 800083e:	d00d      	beq.n	800085c <HandleAlarmMenuInput+0x2c>
 8000840:	2b32      	cmp	r3, #50	@ 0x32
 8000842:	dc30      	bgt.n	80008a6 <HandleAlarmMenuInput+0x76>
 8000844:	2b2a      	cmp	r3, #42	@ 0x2a
 8000846:	d011      	beq.n	800086c <HandleAlarmMenuInput+0x3c>
 8000848:	2b31      	cmp	r3, #49	@ 0x31
 800084a:	d12c      	bne.n	80008a6 <HandleAlarmMenuInput+0x76>
        case '1':  // Modo "Sistema Completo"
            includeMotionSensor = true;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <HandleAlarmMenuInput+0x80>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000852:	4918      	ldr	r1, [pc, #96]	@ (80008b4 <HandleAlarmMenuInput+0x84>)
 8000854:	4818      	ldr	r0, [pc, #96]	@ (80008b8 <HandleAlarmMenuInput+0x88>)
 8000856:	f000 f837 	bl	80008c8 <RequestPassword>
            break;
 800085a:	e024      	b.n	80008a6 <HandleAlarmMenuInput+0x76>
        case '2':  // Modo "Sin Sensor de Movimiento"
            includeMotionSensor = false;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <HandleAlarmMenuInput+0x80>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000862:	4914      	ldr	r1, [pc, #80]	@ (80008b4 <HandleAlarmMenuInput+0x84>)
 8000864:	4814      	ldr	r0, [pc, #80]	@ (80008b8 <HandleAlarmMenuInput+0x88>)
 8000866:	f000 f82f 	bl	80008c8 <RequestPassword>
            break;
 800086a:	e01c      	b.n	80008a6 <HandleAlarmMenuInput+0x76>
        case '*':  // Si el usuario presiona "*", volver al menú principal
            lcd_clear();
 800086c:	f001 f91b 	bl	8001aa6 <lcd_clear>
            lcd_set_cursor(0, 0);
 8000870:	2100      	movs	r1, #0
 8000872:	2000      	movs	r0, #0
 8000874:	f001 f921 	bl	8001aba <lcd_set_cursor>
            lcd_print("Operacion");
 8000878:	4810      	ldr	r0, [pc, #64]	@ (80008bc <HandleAlarmMenuInput+0x8c>)
 800087a:	f001 f938 	bl	8001aee <lcd_print>
            lcd_set_cursor(1, 0);
 800087e:	2100      	movs	r1, #0
 8000880:	2001      	movs	r0, #1
 8000882:	f001 f91a 	bl	8001aba <lcd_set_cursor>
            lcd_print("Cancelada");
 8000886:	480e      	ldr	r0, [pc, #56]	@ (80008c0 <HandleAlarmMenuInput+0x90>)
 8000888:	f001 f931 	bl	8001aee <lcd_print>
            while(!delayRead(&LCD_Muestro)){
 800088c:	bf00      	nop
 800088e:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <HandleAlarmMenuInput+0x94>)
 8000890:	f000 feae 	bl	80015f0 <delayRead>
 8000894:	4603      	mov	r3, r0
 8000896:	f083 0301 	eor.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f6      	bne.n	800088e <HandleAlarmMenuInput+0x5e>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();  		// Volver al menú principal
 80008a0:	f7ff ff6e 	bl	8000780 <DisplayMainMenu>
            break;
 80008a4:	bf00      	nop
    }
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000015f 	.word	0x2000015f
 80008b4:	080007f5 	.word	0x080007f5
 80008b8:	08000a81 	.word	0x08000a81
 80008bc:	08005130 	.word	0x08005130
 80008c0:	0800513c 	.word	0x0800513c
 80008c4:	20000184 	.word	0x20000184

080008c8 <RequestPassword>:
/********************************************************************************************************************************
 * @brief: Solicitud de contraseña al usuario
 * @param: Recibe funciones, posibilidades: opc1 =(Activate Alarm, DisplayAlarmMenu), opc2= (DeactivateAlarm, IncorrectPassword)
 * @retval: void
********************************************************************************************************************************/
void RequestPassword(void (*onSuccess)(void), void (*onFailure)(void)) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
    while (1) { 											// Bucle para reintentar si la contraseña es incorrecta
        lcd_clear();
 80008d2:	f001 f8e8 	bl	8001aa6 <lcd_clear>
        lcd_set_cursor(0, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 f8ee 	bl	8001aba <lcd_set_cursor>
        lcd_print("Contrasena:____");
 80008de:	485a      	ldr	r0, [pc, #360]	@ (8000a48 <RequestPassword+0x180>)
 80008e0:	f001 f905 	bl	8001aee <lcd_print>
        memset(inputBuffer, 0, sizeof(inputBuffer));		// Re-incializa la variable en [0000]
 80008e4:	2205      	movs	r2, #5
 80008e6:	2100      	movs	r1, #0
 80008e8:	4858      	ldr	r0, [pc, #352]	@ (8000a4c <RequestPassword+0x184>)
 80008ea:	f003 ff6b 	bl	80047c4 <memset>
        inputIndex = 0;
 80008ee:	4b58      	ldr	r3, [pc, #352]	@ (8000a50 <RequestPassword+0x188>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]

        delayInit(&DelayGRAL_1, 20000);
 80008f4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80008f8:	4856      	ldr	r0, [pc, #344]	@ (8000a54 <RequestPassword+0x18c>)
 80008fa:	f000 fe65 	bl	80015c8 <delayInit>
        while (1) {

            if (delayRead(&DelayGRAL_1)) { 					// Si pasan más de 20 segundos sin entrada
 80008fe:	4855      	ldr	r0, [pc, #340]	@ (8000a54 <RequestPassword+0x18c>)
 8000900:	f000 fe76 	bl	80015f0 <delayRead>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d01c      	beq.n	8000944 <RequestPassword+0x7c>
                lcd_clear();
 800090a:	f001 f8cc 	bl	8001aa6 <lcd_clear>
                lcd_set_cursor(0, 0);
 800090e:	2100      	movs	r1, #0
 8000910:	2000      	movs	r0, #0
 8000912:	f001 f8d2 	bl	8001aba <lcd_set_cursor>
                lcd_print("Tiempo agotado");
 8000916:	4850      	ldr	r0, [pc, #320]	@ (8000a58 <RequestPassword+0x190>)
 8000918:	f001 f8e9 	bl	8001aee <lcd_print>
                lcd_set_cursor(1, 0);
 800091c:	2100      	movs	r1, #0
 800091e:	2001      	movs	r0, #1
 8000920:	f001 f8cb 	bl	8001aba <lcd_set_cursor>
                lcd_print("Volviendo...");
 8000924:	484d      	ldr	r0, [pc, #308]	@ (8000a5c <RequestPassword+0x194>)
 8000926:	f001 f8e2 	bl	8001aee <lcd_print>
                while(!delayRead(&LCD_Muestro)){			//Delay 2 segundos
 800092a:	bf00      	nop
 800092c:	484c      	ldr	r0, [pc, #304]	@ (8000a60 <RequestPassword+0x198>)
 800092e:	f000 fe5f 	bl	80015f0 <delayRead>
 8000932:	4603      	mov	r3, r0
 8000934:	f083 0301 	eor.w	r3, r3, #1
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1f6      	bne.n	800092c <RequestPassword+0x64>
                	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                }
                DisplayMainMenu();  						// Volver al menú principal
 800093e:	f7ff ff1f 	bl	8000780 <DisplayMainMenu>
                return;
 8000942:	e07e      	b.n	8000a42 <RequestPassword+0x17a>
            }

            key = keypad_getkey();
 8000944:	f001 f818 	bl	8001978 <keypad_getkey>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4b45      	ldr	r3, [pc, #276]	@ (8000a64 <RequestPassword+0x19c>)
 800094e:	701a      	strb	r2, [r3, #0]


            if (key != '\0') {
 8000950:	4b44      	ldr	r3, [pc, #272]	@ (8000a64 <RequestPassword+0x19c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0d2      	beq.n	80008fe <RequestPassword+0x36>

                if (key == '*') {  							// Si presiona "*", vuelve al menú principal
 8000958:	4b42      	ldr	r3, [pc, #264]	@ (8000a64 <RequestPassword+0x19c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b2a      	cmp	r3, #42	@ 0x2a
 800095e:	d11c      	bne.n	800099a <RequestPassword+0xd2>
                    lcd_clear();
 8000960:	f001 f8a1 	bl	8001aa6 <lcd_clear>
                    lcd_set_cursor(0, 0);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f001 f8a7 	bl	8001aba <lcd_set_cursor>
                    lcd_print("Operacion");
 800096c:	483e      	ldr	r0, [pc, #248]	@ (8000a68 <RequestPassword+0x1a0>)
 800096e:	f001 f8be 	bl	8001aee <lcd_print>
                    lcd_set_cursor(1, 0);
 8000972:	2100      	movs	r1, #0
 8000974:	2001      	movs	r0, #1
 8000976:	f001 f8a0 	bl	8001aba <lcd_set_cursor>
                    lcd_print("Cancelada");
 800097a:	483c      	ldr	r0, [pc, #240]	@ (8000a6c <RequestPassword+0x1a4>)
 800097c:	f001 f8b7 	bl	8001aee <lcd_print>
                    while(!delayRead(&LCD_Muestro)){
 8000980:	bf00      	nop
 8000982:	4837      	ldr	r0, [pc, #220]	@ (8000a60 <RequestPassword+0x198>)
 8000984:	f000 fe34 	bl	80015f0 <delayRead>
 8000988:	4603      	mov	r3, r0
 800098a:	f083 0301 	eor.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1f6      	bne.n	8000982 <RequestPassword+0xba>
                    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                    }
                    DisplayMainMenu();  					// Volver al menú principal
 8000994:	f7ff fef4 	bl	8000780 <DisplayMainMenu>
                    return;
 8000998:	e053      	b.n	8000a42 <RequestPassword+0x17a>
                }

                if (key >= '0' && key <= '9' && inputIndex < 4) {
 800099a:	4b32      	ldr	r3, [pc, #200]	@ (8000a64 <RequestPassword+0x19c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b2f      	cmp	r3, #47	@ 0x2f
 80009a0:	d91e      	bls.n	80009e0 <RequestPassword+0x118>
 80009a2:	4b30      	ldr	r3, [pc, #192]	@ (8000a64 <RequestPassword+0x19c>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b39      	cmp	r3, #57	@ 0x39
 80009a8:	d81a      	bhi.n	80009e0 <RequestPassword+0x118>
 80009aa:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <RequestPassword+0x188>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d816      	bhi.n	80009e0 <RequestPassword+0x118>
                    inputBuffer[inputIndex++] = key;
 80009b2:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <RequestPassword+0x188>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	b2d1      	uxtb	r1, r2
 80009ba:	4a25      	ldr	r2, [pc, #148]	@ (8000a50 <RequestPassword+0x188>)
 80009bc:	7011      	strb	r1, [r2, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <RequestPassword+0x19c>)
 80009c2:	7819      	ldrb	r1, [r3, #0]
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <RequestPassword+0x184>)
 80009c6:	5499      	strb	r1, [r3, r2]
                    lcd_set_cursor(1, 10 + inputIndex - 1);
 80009c8:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <RequestPassword+0x188>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	3309      	adds	r3, #9
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	2001      	movs	r0, #1
 80009d4:	f001 f871 	bl	8001aba <lcd_set_cursor>
                    lcd_print("*");
 80009d8:	4825      	ldr	r0, [pc, #148]	@ (8000a70 <RequestPassword+0x1a8>)
 80009da:	f001 f888 	bl	8001aee <lcd_print>
 80009de:	e02e      	b.n	8000a3e <RequestPassword+0x176>
                }else if (key == '#') { 					//  Cuando se presiona "#", verifica la clave
 80009e0:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <RequestPassword+0x19c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b23      	cmp	r3, #35	@ 0x23
 80009e6:	d18a      	bne.n	80008fe <RequestPassword+0x36>
                    inputBuffer[inputIndex] = '\0';
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <RequestPassword+0x188>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <RequestPassword+0x184>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	5499      	strb	r1, [r3, r2]
                    if (strcmp(inputBuffer, currentPassword) == 0) {// strcmp compara 2 cadenas de caractares y devuelve un entero =0 si son iguales
 80009f4:	491f      	ldr	r1, [pc, #124]	@ (8000a74 <RequestPassword+0x1ac>)
 80009f6:	4815      	ldr	r0, [pc, #84]	@ (8000a4c <RequestPassword+0x184>)
 80009f8:	f7ff fc12 	bl	8000220 <strcmp>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d102      	bne.n	8000a08 <RequestPassword+0x140>
                        onSuccess(); // Si la clave es correcta, sale de la función y retorna a la funcion ActivateAlarm
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4798      	blx	r3
                        return;
 8000a06:	e01c      	b.n	8000a42 <RequestPassword+0x17a>
                    } else {
                        //  Si la contraseña es incorrecta, mostrar mensaje y volver a pedirla
                        lcd_clear();
 8000a08:	f001 f84d 	bl	8001aa6 <lcd_clear>
                        lcd_set_cursor(0, 0);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f001 f853 	bl	8001aba <lcd_set_cursor>
                        lcd_print("Contrasena");
 8000a14:	4818      	ldr	r0, [pc, #96]	@ (8000a78 <RequestPassword+0x1b0>)
 8000a16:	f001 f86a 	bl	8001aee <lcd_print>
                        lcd_set_cursor(1, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f001 f84c 	bl	8001aba <lcd_set_cursor>
                        lcd_print("Incorrecta");
 8000a22:	4816      	ldr	r0, [pc, #88]	@ (8000a7c <RequestPassword+0x1b4>)
 8000a24:	f001 f863 	bl	8001aee <lcd_print>
                        while(!delayRead(&LCD_Muestro)){
 8000a28:	bf00      	nop
 8000a2a:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <RequestPassword+0x198>)
 8000a2c:	f000 fde0 	bl	80015f0 <delayRead>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f083 0301 	eor.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f6      	bne.n	8000a2a <RequestPassword+0x162>
                        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                        }
                        break;  //  Sale de este while pero vuelve al inicio del while externo dentro de RequestPassword
 8000a3c:	e000      	b.n	8000a40 <RequestPassword+0x178>
            if (delayRead(&DelayGRAL_1)) { 					// Si pasan más de 20 segundos sin entrada
 8000a3e:	e75e      	b.n	80008fe <RequestPassword+0x36>
        lcd_clear();
 8000a40:	e747      	b.n	80008d2 <RequestPassword+0xa>
                    }
                }
            }
        }
    }
}
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	08005148 	.word	0x08005148
 8000a4c:	20000164 	.word	0x20000164
 8000a50:	20000169 	.word	0x20000169
 8000a54:	2000016c 	.word	0x2000016c
 8000a58:	08005158 	.word	0x08005158
 8000a5c:	08005168 	.word	0x08005168
 8000a60:	20000184 	.word	0x20000184
 8000a64:	2000015d 	.word	0x2000015d
 8000a68:	08005130 	.word	0x08005130
 8000a6c:	0800513c 	.word	0x0800513c
 8000a70:	08005178 	.word	0x08005178
 8000a74:	20000000 	.word	0x20000000
 8000a78:	0800517c 	.word	0x0800517c
 8000a7c:	08005188 	.word	0x08005188

08000a80 <ActivateAlarm>:
/*****************************************************************************************************************
 * @brief: Activar la alarma
 * @param: void
 * @retval: void
******************************************************************************************************************/
void ActivateAlarm() {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b090      	sub	sp, #64	@ 0x40
 8000a84:	af00      	add	r7, sp, #0
    lcd_clear();
 8000a86:	f001 f80e 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f001 f814 	bl	8001aba <lcd_set_cursor>
    lcd_print("Alarma Activada");
 8000a92:	483c      	ldr	r0, [pc, #240]	@ (8000b84 <ActivateAlarm+0x104>)
 8000a94:	f001 f82b 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f001 f80d 	bl	8001aba <lcd_set_cursor>
    lcd_print("Corran: 20 seg");
 8000aa0:	4839      	ldr	r0, [pc, #228]	@ (8000b88 <ActivateAlarm+0x108>)
 8000aa2:	f001 f824 	bl	8001aee <lcd_print>

    BT_SendMessage("⚠️ Alarma activada. Corran 20s... \r\n");
 8000aa6:	4839      	ldr	r0, [pc, #228]	@ (8000b8c <ActivateAlarm+0x10c>)
 8000aa8:	f000 fd4e 	bl	8001548 <BT_SendMessage>

    uint32_t countdownStart = HAL_GetTick();
 8000aac:	f001 f938 	bl	8001d20 <HAL_GetTick>
 8000ab0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    uint32_t remainingTime = 20;
 8000ab2:	2314      	movs	r3, #20
 8000ab4:	63bb      	str	r3, [r7, #56]	@ 0x38

    while (remainingTime > 0) {
 8000ab6:	e02e      	b.n	8000b16 <ActivateAlarm+0x96>
        if (HAL_GetTick() - countdownStart >= 1000) {
 8000ab8:	f001 f932 	bl	8001d20 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ac6:	d326      	bcc.n	8000b16 <ActivateAlarm+0x96>
            countdownStart = HAL_GetTick();
 8000ac8:	f001 f92a 	bl	8001d20 <HAL_GetTick>
 8000acc:	63f8      	str	r0, [r7, #60]	@ 0x3c
            remainingTime--;
 8000ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	63bb      	str	r3, [r7, #56]	@ 0x38

            lcd_set_cursor(1, 7);
 8000ad4:	2107      	movs	r1, #7
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 ffef 	bl	8001aba <lcd_set_cursor>
            lcd_print("   ");
 8000adc:	482c      	ldr	r0, [pc, #176]	@ (8000b90 <ActivateAlarm+0x110>)
 8000ade:	f001 f806 	bl	8001aee <lcd_print>
            lcd_set_cursor(1, 7);
 8000ae2:	2107      	movs	r1, #7
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f000 ffe8 	bl	8001aba <lcd_set_cursor>
            char buffer[3];
            sprintf(buffer, "%2lu", (unsigned long)remainingTime);
 8000aea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000af0:	4928      	ldr	r1, [pc, #160]	@ (8000b94 <ActivateAlarm+0x114>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 fe46 	bl	8004784 <siprintf>
            lcd_print(buffer);
 8000af8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 fff6 	bl	8001aee <lcd_print>

            // Envía el valor del contador por Bluetooth
              char btBuffer[50];
              snprintf(btBuffer, sizeof(btBuffer), "Corran: %02lu seg restantes\r\n", (unsigned long)remainingTime);
 8000b02:	4638      	mov	r0, r7
 8000b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b06:	4a24      	ldr	r2, [pc, #144]	@ (8000b98 <ActivateAlarm+0x118>)
 8000b08:	2132      	movs	r1, #50	@ 0x32
 8000b0a:	f003 fe07 	bl	800471c <sniprintf>
              BT_SendMessage(btBuffer);
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fd19 	bl	8001548 <BT_SendMessage>
    while (remainingTime > 0) {
 8000b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1cd      	bne.n	8000ab8 <ActivateAlarm+0x38>
        }
    }

    lcd_clear();
 8000b1c:	f000 ffc3 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 ffc9 	bl	8001aba <lcd_set_cursor>
    lcd_print("Alarma");
 8000b28:	481c      	ldr	r0, [pc, #112]	@ (8000b9c <ActivateAlarm+0x11c>)
 8000b2a:	f000 ffe0 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2001      	movs	r0, #1
 8000b32:	f000 ffc2 	bl	8001aba <lcd_set_cursor>
    lcd_print("Activa!");
 8000b36:	481a      	ldr	r0, [pc, #104]	@ (8000ba0 <ActivateAlarm+0x120>)
 8000b38:	f000 ffd9 	bl	8001aee <lcd_print>

    BT_SendMessage("🚨 Alarma activada! \r\n");
 8000b3c:	4819      	ldr	r0, [pc, #100]	@ (8000ba4 <ActivateAlarm+0x124>)
 8000b3e:	f000 fd03 	bl	8001548 <BT_SendMessage>

    alarmActivated = true;
 8000b42:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <ActivateAlarm+0x128>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
    currentState = ACTIVE_ALARM;
 8000b48:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <ActivateAlarm+0x12c>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	701a      	strb	r2, [r3, #0]

    while (alarmActivated) {
 8000b4e:	e010      	b.n	8000b72 <ActivateAlarm+0xf2>
        key = keypad_getkey();
 8000b50:	f000 ff12 	bl	8001978 <keypad_getkey>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <ActivateAlarm+0x130>)
 8000b5a:	701a      	strb	r2, [r3, #0]
        if (key != '\0') {
 8000b5c:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <ActivateAlarm+0x130>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d004      	beq.n	8000b6e <ActivateAlarm+0xee>
            CheckAlarmDeactivation(key);  // Nueva función para manejar la desactivación con temporizador
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <ActivateAlarm+0x130>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 fb25 	bl	80011b8 <CheckAlarmDeactivation>
        }
        CheckSensors();
 8000b6e:	f000 fabf 	bl	80010f0 <CheckSensors>
    while (alarmActivated) {
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <ActivateAlarm+0x128>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1ea      	bne.n	8000b50 <ActivateAlarm+0xd0>
    }
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	3740      	adds	r7, #64	@ 0x40
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	08005194 	.word	0x08005194
 8000b88:	080051a4 	.word	0x080051a4
 8000b8c:	080051b4 	.word	0x080051b4
 8000b90:	080051e0 	.word	0x080051e0
 8000b94:	080051e4 	.word	0x080051e4
 8000b98:	080051ec 	.word	0x080051ec
 8000b9c:	0800520c 	.word	0x0800520c
 8000ba0:	08005214 	.word	0x08005214
 8000ba4:	0800521c 	.word	0x0800521c
 8000ba8:	20000163 	.word	0x20000163
 8000bac:	2000015e 	.word	0x2000015e
 8000bb0:	2000015d 	.word	0x2000015d

08000bb4 <DeactivateAlarm>:
/*****************************************************************************************************************
 * @brief: Desactivar la alarma si la contraseña es correcta
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DeactivateAlarm(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    lcd_clear();
 8000bb8:	f000 ff75 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 ff7b 	bl	8001aba <lcd_set_cursor>
    lcd_print("Alarma");
 8000bc4:	4811      	ldr	r0, [pc, #68]	@ (8000c0c <DeactivateAlarm+0x58>)
 8000bc6:	f000 ff92 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f000 ff74 	bl	8001aba <lcd_set_cursor>
    lcd_print("Desactivada");
 8000bd2:	480f      	ldr	r0, [pc, #60]	@ (8000c10 <DeactivateAlarm+0x5c>)
 8000bd4:	f000 ff8b 	bl	8001aee <lcd_print>

    BT_SendMessage("✅ Alarma desactivada. Todo en orden. \r\n"); // 🔹 Notificación de desactivación
 8000bd8:	480e      	ldr	r0, [pc, #56]	@ (8000c14 <DeactivateAlarm+0x60>)
 8000bda:	f000 fcb5 	bl	8001548 <BT_SendMessage>

    alarmActivated = false;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <DeactivateAlarm+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]

    // Asegurar que el buzzer se apaga
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2120      	movs	r1, #32
 8000be8:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <DeactivateAlarm+0x68>)
 8000bea:	f001 fc19 	bl	8002420 <HAL_GPIO_WritePin>
    while(!delayRead(&LCD_Muestro)){
 8000bee:	bf00      	nop
 8000bf0:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <DeactivateAlarm+0x6c>)
 8000bf2:	f000 fcfd 	bl	80015f0 <delayRead>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f083 0301 	eor.w	r3, r3, #1
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f6      	bne.n	8000bf0 <DeactivateAlarm+0x3c>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8000c02:	f7ff fdbd 	bl	8000780 <DisplayMainMenu>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	0800520c 	.word	0x0800520c
 8000c10:	0800524c 	.word	0x0800524c
 8000c14:	08005258 	.word	0x08005258
 8000c18:	20000163 	.word	0x20000163
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	20000184 	.word	0x20000184

08000c24 <IncorrectPassword>:
/*****************************************************************************************************************
 * @brief: Contraseña incorrecta: mensaje y reinicio de intento
 * @param: void
 * @retval: void
******************************************************************************************************************/
void IncorrectPassword(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    lcd_clear();
 8000c28:	f000 ff3d 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 ff43 	bl	8001aba <lcd_set_cursor>
    lcd_print("Contrasena");
 8000c34:	481a      	ldr	r0, [pc, #104]	@ (8000ca0 <IncorrectPassword+0x7c>)
 8000c36:	f000 ff5a 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f000 ff3c 	bl	8001aba <lcd_set_cursor>
    lcd_print("Incorrecta");
 8000c42:	4818      	ldr	r0, [pc, #96]	@ (8000ca4 <IncorrectPassword+0x80>)
 8000c44:	f000 ff53 	bl	8001aee <lcd_print>
    while(!delayRead(&LCD_Muestro)){ 	// Mostrar mensaje durante 2 segundos
 8000c48:	e00e      	b.n	8000c68 <IncorrectPassword+0x44>
    */
    // Iniciar temporizador de 31 segundos si aún no está activo
    	static delay_t countdownDelay;  // Variable estática para mantener el estado del temporizador
    	static bool countdownStarted = false;

    	if (!countdownStarted) {
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <IncorrectPassword+0x84>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f083 0301 	eor.w	r3, r3, #1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d007      	beq.n	8000c68 <IncorrectPassword+0x44>
    		countdownStarted = true;
 8000c58:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <IncorrectPassword+0x84>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
    		delayInit(&countdownDelay, 31000); // Iniciar temporizador de 31 segundos
 8000c5e:	f647 1118 	movw	r1, #31000	@ 0x7918
 8000c62:	4812      	ldr	r0, [pc, #72]	@ (8000cac <IncorrectPassword+0x88>)
 8000c64:	f000 fcb0 	bl	80015c8 <delayInit>
    while(!delayRead(&LCD_Muestro)){ 	// Mostrar mensaje durante 2 segundos
 8000c68:	4811      	ldr	r0, [pc, #68]	@ (8000cb0 <IncorrectPassword+0x8c>)
 8000c6a:	f000 fcc1 	bl	80015f0 <delayRead>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f083 0301 	eor.w	r3, r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1e7      	bne.n	8000c4a <IncorrectPassword+0x26>
    	}
    }
    // Solicitar nuevamente la contraseña
    lcd_clear();
 8000c7a:	f000 ff14 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 ff1a 	bl	8001aba <lcd_set_cursor>
    lcd_print("Ingrese");
 8000c86:	480b      	ldr	r0, [pc, #44]	@ (8000cb4 <IncorrectPassword+0x90>)
 8000c88:	f000 ff31 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 ff13 	bl	8001aba <lcd_set_cursor>
    lcd_print("Contrasena:");
 8000c94:	4808      	ldr	r0, [pc, #32]	@ (8000cb8 <IncorrectPassword+0x94>)
 8000c96:	f000 ff2a 	bl	8001aee <lcd_print>
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	0800517c 	.word	0x0800517c
 8000ca4:	08005188 	.word	0x08005188
 8000ca8:	2000019c 	.word	0x2000019c
 8000cac:	200001a0 	.word	0x200001a0
 8000cb0:	20000184 	.word	0x20000184
 8000cb4:	08005238 	.word	0x08005238
 8000cb8:	08005240 	.word	0x08005240

08000cbc <AlarmTriggered>:
/*****************************************************************************************************************
 * @brief: Activar alarma sonora
 * @param: void
 * @retval: void
******************************************************************************************************************/
void AlarmTriggered(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
    lcd_clear();
 8000cc0:	f000 fef1 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 fef7 	bl	8001aba <lcd_set_cursor>
    lcd_print("ALERTA!!!");
 8000ccc:	4818      	ldr	r0, [pc, #96]	@ (8000d30 <AlarmTriggered+0x74>)
 8000cce:	f000 ff0e 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fef0 	bl	8001aba <lcd_set_cursor>
    lcd_print("Ingrese clave");
 8000cda:	4816      	ldr	r0, [pc, #88]	@ (8000d34 <AlarmTriggered+0x78>)
 8000cdc:	f000 ff07 	bl	8001aee <lcd_print>

    BT_SendMessage("⚠️ Alarma Disparada! \r\n"); // Enviar mensaje por Bluetooth
 8000ce0:	4815      	ldr	r0, [pc, #84]	@ (8000d38 <AlarmTriggered+0x7c>)
 8000ce2:	f000 fc31 	bl	8001548 <BT_SendMessage>

    while (alarmActivated) {
 8000ce6:	e017      	b.n	8000d18 <AlarmTriggered+0x5c>
     /*   // Alternar el buzzer cada 500 ms sin bloquear el sistema
    	if (HAL_GetTick() - lastToggleTime >= 500) {
    	    lastToggleTime = HAL_GetTick();
    	    HAL_GPIO_TogglePin(Sirena_GPIO_Port, Sirena_Pin);
    	}*/
    	if (delayRead(&Delay_Sirena)){
 8000ce8:	4814      	ldr	r0, [pc, #80]	@ (8000d3c <AlarmTriggered+0x80>)
 8000cea:	f000 fc81 	bl	80015f0 <delayRead>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <AlarmTriggered+0x40>
    		HAL_GPIO_TogglePin(Sirena_GPIO_Port, Sirena_Pin);
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4812      	ldr	r0, [pc, #72]	@ (8000d40 <AlarmTriggered+0x84>)
 8000cf8:	f001 fbab 	bl	8002452 <HAL_GPIO_TogglePin>
    	}

        // Permitir que el usuario intente apagar la alarma
        key = keypad_getkey();
 8000cfc:	f000 fe3c 	bl	8001978 <keypad_getkey>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <AlarmTriggered+0x88>)
 8000d06:	701a      	strb	r2, [r3, #0]
        if (key != '\0') {
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <AlarmTriggered+0x88>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <AlarmTriggered+0x5c>
            RequestPassword(DeactivateAlarm, IncorrectPassword);
 8000d10:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <AlarmTriggered+0x8c>)
 8000d12:	480e      	ldr	r0, [pc, #56]	@ (8000d4c <AlarmTriggered+0x90>)
 8000d14:	f7ff fdd8 	bl	80008c8 <RequestPassword>
    while (alarmActivated) {
 8000d18:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <AlarmTriggered+0x94>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e3      	bne.n	8000ce8 <AlarmTriggered+0x2c>
        }
    }

    // Apagar el buzzer cuando la alarma se desactiva
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2120      	movs	r1, #32
 8000d24:	4806      	ldr	r0, [pc, #24]	@ (8000d40 <AlarmTriggered+0x84>)
 8000d26:	f001 fb7b 	bl	8002420 <HAL_GPIO_WritePin>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	08005284 	.word	0x08005284
 8000d34:	08005290 	.word	0x08005290
 8000d38:	080052a0 	.word	0x080052a0
 8000d3c:	20000190 	.word	0x20000190
 8000d40:	40020000 	.word	0x40020000
 8000d44:	2000015d 	.word	0x2000015d
 8000d48:	08000c25 	.word	0x08000c25
 8000d4c:	08000bb5 	.word	0x08000bb5
 8000d50:	20000163 	.word	0x20000163

08000d54 <DisplayChangePassMenu>:
/*****************************************************************************************************************
 * @brief: Cambiar contraseña
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayChangePassMenu() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    lcd_clear();
 8000d58:	f000 fea5 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 feab 	bl	8001aba <lcd_set_cursor>
    lcd_print("Contrasena");
 8000d64:	482b      	ldr	r0, [pc, #172]	@ (8000e14 <DisplayChangePassMenu+0xc0>)
 8000d66:	f000 fec2 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f000 fea4 	bl	8001aba <lcd_set_cursor>
    lcd_print("Actual:");
 8000d72:	4829      	ldr	r0, [pc, #164]	@ (8000e18 <DisplayChangePassMenu+0xc4>)
 8000d74:	f000 febb 	bl	8001aee <lcd_print>

    while (1) {  // Bucle para capturar la tecla antes de solicitar la contraseña
        key = keypad_getkey();
 8000d78:	f000 fdfe 	bl	8001978 <keypad_getkey>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <DisplayChangePassMenu+0xc8>)
 8000d82:	701a      	strb	r2, [r3, #0]

        //  Si pasan más de 20 segundos sin tocar una tecla, vuelve al menú principal
        if (delayRead(&DelayGRAL_1)){
 8000d84:	4826      	ldr	r0, [pc, #152]	@ (8000e20 <DisplayChangePassMenu+0xcc>)
 8000d86:	f000 fc33 	bl	80015f0 <delayRead>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d015      	beq.n	8000dbc <DisplayChangePassMenu+0x68>
            lcd_clear();
 8000d90:	f000 fe89 	bl	8001aa6 <lcd_clear>
            lcd_set_cursor(0, 0);
 8000d94:	2100      	movs	r1, #0
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 fe8f 	bl	8001aba <lcd_set_cursor>
            lcd_print("Tiempo Expirado");
 8000d9c:	4821      	ldr	r0, [pc, #132]	@ (8000e24 <DisplayChangePassMenu+0xd0>)
 8000d9e:	f000 fea6 	bl	8001aee <lcd_print>
            while(!delayRead(&LCD_Muestro)){		//Delay 2 segundos
 8000da2:	bf00      	nop
 8000da4:	4820      	ldr	r0, [pc, #128]	@ (8000e28 <DisplayChangePassMenu+0xd4>)
 8000da6:	f000 fc23 	bl	80015f0 <delayRead>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f083 0301 	eor.w	r3, r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f6      	bne.n	8000da4 <DisplayChangePassMenu+0x50>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();
 8000db6:	f7ff fce3 	bl	8000780 <DisplayMainMenu>
            return;
 8000dba:	e02a      	b.n	8000e12 <DisplayChangePassMenu+0xbe>
        }

        if (key == '*') {  //  Si el usuario presiona "*", volver al menú principal
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <DisplayChangePassMenu+0xc8>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dc2:	d11c      	bne.n	8000dfe <DisplayChangePassMenu+0xaa>
            lcd_clear();
 8000dc4:	f000 fe6f 	bl	8001aa6 <lcd_clear>
            lcd_set_cursor(0, 0);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 fe75 	bl	8001aba <lcd_set_cursor>
            lcd_print("Operacion");
 8000dd0:	4816      	ldr	r0, [pc, #88]	@ (8000e2c <DisplayChangePassMenu+0xd8>)
 8000dd2:	f000 fe8c 	bl	8001aee <lcd_print>
            lcd_set_cursor(1, 0);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 fe6e 	bl	8001aba <lcd_set_cursor>
            lcd_print("Cancelada");
 8000dde:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <DisplayChangePassMenu+0xdc>)
 8000de0:	f000 fe85 	bl	8001aee <lcd_print>
            while(!delayRead(&LCD_Muestro)){		//Delay 2 segundos
 8000de4:	bf00      	nop
 8000de6:	4810      	ldr	r0, [pc, #64]	@ (8000e28 <DisplayChangePassMenu+0xd4>)
 8000de8:	f000 fc02 	bl	80015f0 <delayRead>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f083 0301 	eor.w	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f6      	bne.n	8000de6 <DisplayChangePassMenu+0x92>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();
 8000df8:	f7ff fcc2 	bl	8000780 <DisplayMainMenu>
            return;
 8000dfc:	e009      	b.n	8000e12 <DisplayChangePassMenu+0xbe>
        }

        if (key != '\0') {  // 🔹 Si presiona otra tecla, salir del bucle y continuar con la contraseña
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <DisplayChangePassMenu+0xc8>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <DisplayChangePassMenu+0xb4>
        key = keypad_getkey();
 8000e06:	e7b7      	b.n	8000d78 <DisplayChangePassMenu+0x24>
            break;
 8000e08:	bf00      	nop
        }
    }

    RequestPassword(ConfirmNewPassword, DisplayChangePassMenu);  // Solicitar la contraseña actual
 8000e0a:	490a      	ldr	r1, [pc, #40]	@ (8000e34 <DisplayChangePassMenu+0xe0>)
 8000e0c:	480a      	ldr	r0, [pc, #40]	@ (8000e38 <DisplayChangePassMenu+0xe4>)
 8000e0e:	f7ff fd5b 	bl	80008c8 <RequestPassword>
}
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	0800517c 	.word	0x0800517c
 8000e18:	080052bc 	.word	0x080052bc
 8000e1c:	2000015d 	.word	0x2000015d
 8000e20:	2000016c 	.word	0x2000016c
 8000e24:	080052c4 	.word	0x080052c4
 8000e28:	20000184 	.word	0x20000184
 8000e2c:	08005130 	.word	0x08005130
 8000e30:	0800513c 	.word	0x0800513c
 8000e34:	08000d55 	.word	0x08000d55
 8000e38:	08000e3d 	.word	0x08000e3d

08000e3c <ConfirmNewPassword>:
/*****************************************************************************************************************
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
void ConfirmNewPassword(){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
    lcd_clear();
 8000e42:	f000 fe30 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000e46:	2100      	movs	r1, #0
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 fe36 	bl	8001aba <lcd_set_cursor>
    lcd_print("Nueva Clave:");
 8000e4e:	4864      	ldr	r0, [pc, #400]	@ (8000fe0 <ConfirmNewPassword+0x1a4>)
 8000e50:	f000 fe4d 	bl	8001aee <lcd_print>

    memset(inputBuffer, 0, sizeof(inputBuffer));
 8000e54:	2205      	movs	r2, #5
 8000e56:	2100      	movs	r1, #0
 8000e58:	4862      	ldr	r0, [pc, #392]	@ (8000fe4 <ConfirmNewPassword+0x1a8>)
 8000e5a:	f003 fcb3 	bl	80047c4 <memset>
    inputIndex = 0;
 8000e5e:	4b62      	ldr	r3, [pc, #392]	@ (8000fe8 <ConfirmNewPassword+0x1ac>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]

    while (delayRead(&DelayGRAL_1)) {  // Tiempo límite de 20 segundos
 8000e64:	e096      	b.n	8000f94 <ConfirmNewPassword+0x158>
        key = keypad_getkey();
 8000e66:	f000 fd87 	bl	8001978 <keypad_getkey>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000fec <ConfirmNewPassword+0x1b0>)
 8000e70:	701a      	strb	r2, [r3, #0]

        if (key >= '0' && key <= '9' && inputIndex < 4) {
 8000e72:	4b5e      	ldr	r3, [pc, #376]	@ (8000fec <ConfirmNewPassword+0x1b0>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e78:	d91e      	bls.n	8000eb8 <ConfirmNewPassword+0x7c>
 8000e7a:	4b5c      	ldr	r3, [pc, #368]	@ (8000fec <ConfirmNewPassword+0x1b0>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b39      	cmp	r3, #57	@ 0x39
 8000e80:	d81a      	bhi.n	8000eb8 <ConfirmNewPassword+0x7c>
 8000e82:	4b59      	ldr	r3, [pc, #356]	@ (8000fe8 <ConfirmNewPassword+0x1ac>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d816      	bhi.n	8000eb8 <ConfirmNewPassword+0x7c>
            inputBuffer[inputIndex++] = key;
 8000e8a:	4b57      	ldr	r3, [pc, #348]	@ (8000fe8 <ConfirmNewPassword+0x1ac>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	b2d1      	uxtb	r1, r2
 8000e92:	4a55      	ldr	r2, [pc, #340]	@ (8000fe8 <ConfirmNewPassword+0x1ac>)
 8000e94:	7011      	strb	r1, [r2, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b54      	ldr	r3, [pc, #336]	@ (8000fec <ConfirmNewPassword+0x1b0>)
 8000e9a:	7819      	ldrb	r1, [r3, #0]
 8000e9c:	4b51      	ldr	r3, [pc, #324]	@ (8000fe4 <ConfirmNewPassword+0x1a8>)
 8000e9e:	5499      	strb	r1, [r3, r2]
            lcd_set_cursor(1, inputIndex - 1);
 8000ea0:	4b51      	ldr	r3, [pc, #324]	@ (8000fe8 <ConfirmNewPassword+0x1ac>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f000 fe05 	bl	8001aba <lcd_set_cursor>
            lcd_print("*");
 8000eb0:	484f      	ldr	r0, [pc, #316]	@ (8000ff0 <ConfirmNewPassword+0x1b4>)
 8000eb2:	f000 fe1c 	bl	8001aee <lcd_print>
 8000eb6:	e06d      	b.n	8000f94 <ConfirmNewPassword+0x158>
        } else if (key == '#') {
 8000eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8000fec <ConfirmNewPassword+0x1b0>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b23      	cmp	r3, #35	@ 0x23
 8000ebe:	d169      	bne.n	8000f94 <ConfirmNewPassword+0x158>
            if (inputIndex == 4) {  // Validar que la clave tenga 4 dígitos
 8000ec0:	4b49      	ldr	r3, [pc, #292]	@ (8000fe8 <ConfirmNewPassword+0x1ac>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d148      	bne.n	8000f5a <ConfirmNewPassword+0x11e>
                inputBuffer[inputIndex] = '\0';
 8000ec8:	4b47      	ldr	r3, [pc, #284]	@ (8000fe8 <ConfirmNewPassword+0x1ac>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b45      	ldr	r3, [pc, #276]	@ (8000fe4 <ConfirmNewPassword+0x1a8>)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	5499      	strb	r1, [r3, r2]
                strcpy(newPassword, inputBuffer);
 8000ed4:	4943      	ldr	r1, [pc, #268]	@ (8000fe4 <ConfirmNewPassword+0x1a8>)
 8000ed6:	4847      	ldr	r0, [pc, #284]	@ (8000ff4 <ConfirmNewPassword+0x1b8>)
 8000ed8:	f003 fca8 	bl	800482c <strcpy>

                lcd_clear();
 8000edc:	f000 fde3 	bl	8001aa6 <lcd_clear>
                lcd_set_cursor(0, 0);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fde9 	bl	8001aba <lcd_set_cursor>
                lcd_print("Confirmar: ");
 8000ee8:	4843      	ldr	r0, [pc, #268]	@ (8000ff8 <ConfirmNewPassword+0x1bc>)
 8000eea:	f000 fe00 	bl	8001aee <lcd_print>
                lcd_set_cursor(1, 0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 fde2 	bl	8001aba <lcd_set_cursor>
                lcd_print("*.Si   #.No");
 8000ef6:	4841      	ldr	r0, [pc, #260]	@ (8000ffc <ConfirmNewPassword+0x1c0>)
 8000ef8:	f000 fdf9 	bl	8001aee <lcd_print>

                while (delayRead(&DelayGRAL_2)) {  			// Espera 10 segundos para confirmar
 8000efc:	e026      	b.n	8000f4c <ConfirmNewPassword+0x110>
                    char confirmKey = keypad_getkey();
 8000efe:	f000 fd3b 	bl	8001978 <keypad_getkey>
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
                    if (confirmKey == '*') {
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f0a:	d119      	bne.n	8000f40 <ConfirmNewPassword+0x104>
                        strcpy(currentPassword, newPassword);
 8000f0c:	4939      	ldr	r1, [pc, #228]	@ (8000ff4 <ConfirmNewPassword+0x1b8>)
 8000f0e:	483c      	ldr	r0, [pc, #240]	@ (8001000 <ConfirmNewPassword+0x1c4>)
 8000f10:	f003 fc8c 	bl	800482c <strcpy>
                        lcd_clear();
 8000f14:	f000 fdc7 	bl	8001aa6 <lcd_clear>
                        lcd_set_cursor(0, 0);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f000 fdcd 	bl	8001aba <lcd_set_cursor>
                        lcd_print("Clave Actualizada");
 8000f20:	4838      	ldr	r0, [pc, #224]	@ (8001004 <ConfirmNewPassword+0x1c8>)
 8000f22:	f000 fde4 	bl	8001aee <lcd_print>
                        while(!delayRead(&LCD_Muestro)){
 8000f26:	bf00      	nop
 8000f28:	4837      	ldr	r0, [pc, #220]	@ (8001008 <ConfirmNewPassword+0x1cc>)
 8000f2a:	f000 fb61 	bl	80015f0 <delayRead>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f6      	bne.n	8000f28 <ConfirmNewPassword+0xec>
                                 // Espacio para ejecutar tareas mientras muestra el mensaje anterior
                        }
                        DisplayMainMenu();
 8000f3a:	f7ff fc21 	bl	8000780 <DisplayMainMenu>
                        return;
 8000f3e:	e04c      	b.n	8000fda <ConfirmNewPassword+0x19e>
                    } else if (confirmKey == '#') {
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b23      	cmp	r3, #35	@ 0x23
 8000f44:	d102      	bne.n	8000f4c <ConfirmNewPassword+0x110>
                        ConfirmNewPassword();  				// Volver a solicitar la clave
 8000f46:	f7ff ff79 	bl	8000e3c <ConfirmNewPassword>
                        return;
 8000f4a:	e046      	b.n	8000fda <ConfirmNewPassword+0x19e>
                while (delayRead(&DelayGRAL_2)) {  			// Espera 10 segundos para confirmar
 8000f4c:	482f      	ldr	r0, [pc, #188]	@ (800100c <ConfirmNewPassword+0x1d0>)
 8000f4e:	f000 fb4f 	bl	80015f0 <delayRead>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1d2      	bne.n	8000efe <ConfirmNewPassword+0xc2>
 8000f58:	e01c      	b.n	8000f94 <ConfirmNewPassword+0x158>
                    }
                }
            } else {
                lcd_clear();
 8000f5a:	f000 fda4 	bl	8001aa6 <lcd_clear>
                lcd_set_cursor(0, 0);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2000      	movs	r0, #0
 8000f62:	f000 fdaa 	bl	8001aba <lcd_set_cursor>
                lcd_print("Debe ser 4 ");
 8000f66:	482a      	ldr	r0, [pc, #168]	@ (8001010 <ConfirmNewPassword+0x1d4>)
 8000f68:	f000 fdc1 	bl	8001aee <lcd_print>
                lcd_set_cursor(1, 0);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f000 fda3 	bl	8001aba <lcd_set_cursor>
                lcd_print("digitos ");
 8000f74:	4827      	ldr	r0, [pc, #156]	@ (8001014 <ConfirmNewPassword+0x1d8>)
 8000f76:	f000 fdba 	bl	8001aee <lcd_print>
                while(!delayRead(&LCD_Muestro)){
 8000f7a:	bf00      	nop
 8000f7c:	4822      	ldr	r0, [pc, #136]	@ (8001008 <ConfirmNewPassword+0x1cc>)
 8000f7e:	f000 fb37 	bl	80015f0 <delayRead>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f6      	bne.n	8000f7c <ConfirmNewPassword+0x140>
                                	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                }
                ConfirmNewPassword();  // Reiniciar el proceso
 8000f8e:	f7ff ff55 	bl	8000e3c <ConfirmNewPassword>
                return;  // Reiniciar el proceso
 8000f92:	e022      	b.n	8000fda <ConfirmNewPassword+0x19e>
    while (delayRead(&DelayGRAL_1)) {  // Tiempo límite de 20 segundos
 8000f94:	4820      	ldr	r0, [pc, #128]	@ (8001018 <ConfirmNewPassword+0x1dc>)
 8000f96:	f000 fb2b 	bl	80015f0 <delayRead>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f47f af62 	bne.w	8000e66 <ConfirmNewPassword+0x2a>
            }
        }
    }

    // Si el usuario no ingresa nada en 20 segundos, volver al menú principal
    lcd_clear();
 8000fa2:	f000 fd80 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 fd86 	bl	8001aba <lcd_set_cursor>
    lcd_print("Tiempo ");
 8000fae:	481b      	ldr	r0, [pc, #108]	@ (800101c <ConfirmNewPassword+0x1e0>)
 8000fb0:	f000 fd9d 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 fd7f 	bl	8001aba <lcd_set_cursor>
    lcd_print("Excedido ");
 8000fbc:	4818      	ldr	r0, [pc, #96]	@ (8001020 <ConfirmNewPassword+0x1e4>)
 8000fbe:	f000 fd96 	bl	8001aee <lcd_print>
    while(!delayRead(&LCD_Muestro)){
 8000fc2:	bf00      	nop
 8000fc4:	4810      	ldr	r0, [pc, #64]	@ (8001008 <ConfirmNewPassword+0x1cc>)
 8000fc6:	f000 fb13 	bl	80015f0 <delayRead>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f6      	bne.n	8000fc4 <ConfirmNewPassword+0x188>
        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8000fd6:	f7ff fbd3 	bl	8000780 <DisplayMainMenu>
}
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	080052d4 	.word	0x080052d4
 8000fe4:	20000164 	.word	0x20000164
 8000fe8:	20000169 	.word	0x20000169
 8000fec:	2000015d 	.word	0x2000015d
 8000ff0:	08005178 	.word	0x08005178
 8000ff4:	20000158 	.word	0x20000158
 8000ff8:	080052e4 	.word	0x080052e4
 8000ffc:	080052f0 	.word	0x080052f0
 8001000:	20000000 	.word	0x20000000
 8001004:	080052fc 	.word	0x080052fc
 8001008:	20000184 	.word	0x20000184
 800100c:	20000178 	.word	0x20000178
 8001010:	08005310 	.word	0x08005310
 8001014:	0800531c 	.word	0x0800531c
 8001018:	2000016c 	.word	0x2000016c
 800101c:	08005328 	.word	0x08005328
 8001020:	08005330 	.word	0x08005330

08001024 <HandleSubMenu>:
/*****************************************************************************************************************
 * @brief: Submenú "Más"
 * @param:
 * @retval:
******************************************************************************************************************/
void HandleSubMenu() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    lcd_clear();
 8001028:	f000 fd3d 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 800102c:	2100      	movs	r1, #0
 800102e:	2000      	movs	r0, #0
 8001030:	f000 fd43 	bl	8001aba <lcd_set_cursor>
    lcd_print("#.Volver ");
 8001034:	4810      	ldr	r0, [pc, #64]	@ (8001078 <HandleSubMenu+0x54>)
 8001036:	f000 fd5a 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 800103a:	2100      	movs	r1, #0
 800103c:	2001      	movs	r0, #1
 800103e:	f000 fd3c 	bl	8001aba <lcd_set_cursor>
    lcd_print("3.Prueba");
 8001042:	480e      	ldr	r0, [pc, #56]	@ (800107c <HandleSubMenu+0x58>)
 8001044:	f000 fd53 	bl	8001aee <lcd_print>

    while (1) {
        key = keypad_getkey();
 8001048:	f000 fc96 	bl	8001978 <keypad_getkey>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <HandleSubMenu+0x5c>)
 8001052:	701a      	strb	r2, [r3, #0]

        if (key != '\0') {
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HandleSubMenu+0x5c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f5      	beq.n	8001048 <HandleSubMenu+0x24>
            if (key == '#') {
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HandleSubMenu+0x5c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b23      	cmp	r3, #35	@ 0x23
 8001062:	d102      	bne.n	800106a <HandleSubMenu+0x46>
                DisplayMainMenu();
 8001064:	f7ff fb8c 	bl	8000780 <DisplayMainMenu>
                return;
 8001068:	e005      	b.n	8001076 <HandleSubMenu+0x52>
            } else if (key == '3') {
 800106a:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <HandleSubMenu+0x5c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b33      	cmp	r3, #51	@ 0x33
 8001070:	d1ea      	bne.n	8001048 <HandleSubMenu+0x24>
                TestAlarm();
 8001072:	f000 f807 	bl	8001084 <TestAlarm>
                return;
            }
        }
    }
}
 8001076:	bd80      	pop	{r7, pc}
 8001078:	0800533c 	.word	0x0800533c
 800107c:	08005348 	.word	0x08005348
 8001080:	2000015d 	.word	0x2000015d

08001084 <TestAlarm>:
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
// Prueba de alarma
void TestAlarm() {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    lcd_clear();
 8001088:	f000 fd0d 	bl	8001aa6 <lcd_clear>
    lcd_set_cursor(0, 0);
 800108c:	2100      	movs	r1, #0
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fd13 	bl	8001aba <lcd_set_cursor>
    lcd_print("Prueba de");
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <TestAlarm+0x5c>)
 8001096:	f000 fd2a 	bl	8001aee <lcd_print>
    lcd_set_cursor(1, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	2001      	movs	r0, #1
 800109e:	f000 fd0c 	bl	8001aba <lcd_set_cursor>
    lcd_print("Alarma...");
 80010a2:	4810      	ldr	r0, [pc, #64]	@ (80010e4 <TestAlarm+0x60>)
 80010a4:	f000 fd23 	bl	8001aee <lcd_print>

    // Activar el buzzer en PA5
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	480e      	ldr	r0, [pc, #56]	@ (80010e8 <TestAlarm+0x64>)
 80010ae:	f001 f9b7 	bl	8002420 <HAL_GPIO_WritePin>
    while(!delayRead(&LCD_Muestro)){		//Delay 2 segundos
 80010b2:	bf00      	nop
 80010b4:	480d      	ldr	r0, [pc, #52]	@ (80010ec <TestAlarm+0x68>)
 80010b6:	f000 fa9b 	bl	80015f0 <delayRead>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f083 0301 	eor.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f6      	bne.n	80010b4 <TestAlarm+0x30>
        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2120      	movs	r1, #32
 80010ca:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <TestAlarm+0x64>)
 80010cc:	f001 f9a8 	bl	8002420 <HAL_GPIO_WritePin>

    HAL_Delay(1000);  // Pequeña pausa antes de volver al menú
 80010d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010d4:	f000 fe30 	bl	8001d38 <HAL_Delay>
    DisplayMainMenu();
 80010d8:	f7ff fb52 	bl	8000780 <DisplayMainMenu>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	08005354 	.word	0x08005354
 80010e4:	08005360 	.word	0x08005360
 80010e8:	40020000 	.word	0x40020000
 80010ec:	20000184 	.word	0x20000184

080010f0 <CheckSensors>:
/*****************************************************************************************************************
 * @brief: Chequeo de sensores
 * @param: void
 * @retval: void
******************************************************************************************************************/
void CheckSensors(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
    if (alarmActivated) {
 80010f6:	4b29      	ldr	r3, [pc, #164]	@ (800119c <CheckSensors+0xac>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d04a      	beq.n	8001194 <CheckSensors+0xa4>
        // Verificar si se abre una puerta o ventana (Sensor_Magnetico_1)
        bool doorOpened_1 = (HAL_GPIO_ReadPin(GPIOA, Sensor_Magnetico_1_Pin) == GPIO_PIN_RESET);
 80010fe:	2180      	movs	r1, #128	@ 0x80
 8001100:	4827      	ldr	r0, [pc, #156]	@ (80011a0 <CheckSensors+0xb0>)
 8001102:	f001 f975 	bl	80023f0 <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf0c      	ite	eq
 800110c:	2301      	moveq	r3, #1
 800110e:	2300      	movne	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
        MotionDetected_1 = false;
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <CheckSensors+0xb4>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

        // Verificar si se abre una puerta o ventana (Sensor_Magnetico_2)
        bool doorOpened_2 = (HAL_GPIO_ReadPin(Sensor_Magnetico_2_GPIO_Port, Sensor_Magnetico_2_Pin) == GPIO_PIN_RESET);
 8001118:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800111c:	4822      	ldr	r0, [pc, #136]	@ (80011a8 <CheckSensors+0xb8>)
 800111e:	f001 f967 	bl	80023f0 <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	71bb      	strb	r3, [r7, #6]
        MotionDetected_2 = false;
 800112e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <CheckSensors+0xbc>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]

        // Verificar el sensor PIR si está activado en "Sist Completo"
        if (includeMotionSensor) {
 8001134:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <CheckSensors+0xc0>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d01b      	beq.n	8001174 <CheckSensors+0x84>
        	MotionDectected_PIR = HAL_GPIO_ReadPin(GPIOA, Sensor_PIR_Pin);
 800113c:	2140      	movs	r1, #64	@ 0x40
 800113e:	4818      	ldr	r0, [pc, #96]	@ (80011a0 <CheckSensors+0xb0>)
 8001140:	f001 f956 	bl	80023f0 <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf14      	ite	ne
 800114a:	2301      	movne	r3, #1
 800114c:	2300      	moveq	r3, #0
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <CheckSensors+0xc4>)
 8001152:	701a      	strb	r2, [r3, #0]

            // Filtro por software para evitar falsas detecciones
            HAL_Delay(50);
 8001154:	2032      	movs	r0, #50	@ 0x32
 8001156:	f000 fdef 	bl	8001d38 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GPIOA, Sensor_PIR_Pin) != MotionDectected_PIR) {
 800115a:	2140      	movs	r1, #64	@ 0x40
 800115c:	4810      	ldr	r0, [pc, #64]	@ (80011a0 <CheckSensors+0xb0>)
 800115e:	f001 f947 	bl	80023f0 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <CheckSensors+0xc4>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d002      	beq.n	8001174 <CheckSensors+0x84>
            	MotionDectected_PIR = false; // Ignorar si el estado cambió muy rápido
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <CheckSensors+0xc4>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
            }
        }

        // Evaluar si se debe activar la alarma
        if (doorOpened_1 || doorOpened_2 || (includeMotionSensor && MotionDectected_PIR)) {
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10a      	bne.n	8001190 <CheckSensors+0xa0>
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <CheckSensors+0xa0>
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <CheckSensors+0xc0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <CheckSensors+0xa4>
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <CheckSensors+0xc4>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <CheckSensors+0xa4>
            AlarmTriggered();
 8001190:	f7ff fd94 	bl	8000cbc <AlarmTriggered>
        }
    }
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000163 	.word	0x20000163
 80011a0:	40020000 	.word	0x40020000
 80011a4:	20000160 	.word	0x20000160
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	20000161 	.word	0x20000161
 80011b0:	2000015f 	.word	0x2000015f
 80011b4:	20000162 	.word	0x20000162

080011b8 <CheckAlarmDeactivation>:
/*****************************************************************************************************************
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
void CheckAlarmDeactivation(char key) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	static delay_t countdownDelay;
	static bool countdownStarted = false;

	if (!countdownStarted) {
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <CheckAlarmDeactivation+0x48>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	f083 0301 	eor.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <CheckAlarmDeactivation+0x28>
		countdownStarted = true;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <CheckAlarmDeactivation+0x48>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
		delayInit(&countdownDelay, 31000);  // Iniciar temporizador de 31 segundos
 80011d6:	f647 1118 	movw	r1, #31000	@ 0x7918
 80011da:	480a      	ldr	r0, [pc, #40]	@ (8001204 <CheckAlarmDeactivation+0x4c>)
 80011dc:	f000 f9f4 	bl	80015c8 <delayInit>
	}

	RequestPassword(DeactivateAlarm, IncorrectPassword);
 80011e0:	4909      	ldr	r1, [pc, #36]	@ (8001208 <CheckAlarmDeactivation+0x50>)
 80011e2:	480a      	ldr	r0, [pc, #40]	@ (800120c <CheckAlarmDeactivation+0x54>)
 80011e4:	f7ff fb70 	bl	80008c8 <RequestPassword>

	// Si pasan 31 segundos sin ingresar la clave correcta, activar la alarma
	if (delayRead(&countdownDelay)) {
 80011e8:	4806      	ldr	r0, [pc, #24]	@ (8001204 <CheckAlarmDeactivation+0x4c>)
 80011ea:	f000 fa01 	bl	80015f0 <delayRead>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <CheckAlarmDeactivation+0x40>
		AlarmTriggered();
 80011f4:	f7ff fd62 	bl	8000cbc <AlarmTriggered>
	}
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200001ac 	.word	0x200001ac
 8001204:	200001b0 	.word	0x200001b0
 8001208:	08000c25 	.word	0x08000c25
 800120c:	08000bb5 	.word	0x08000bb5

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <Error_Handler+0x8>

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	@ (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	@ 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12b      	bne.n	80012e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012aa:	2303      	movs	r3, #3
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012ba:	2304      	movs	r3, #4
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c6:	f000 feff 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	@ 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40005800 	.word	0x40005800
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40021400 	.word	0x40021400

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a1d      	ldr	r2, [pc, #116]	@ (8001390 <HAL_UART_MspInit+0x94>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d133      	bne.n	8001386 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <HAL_UART_MspInit+0x98>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	4a1b      	ldr	r2, [pc, #108]	@ (8001394 <HAL_UART_MspInit+0x98>)
 8001328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800132c:	6413      	str	r3, [r2, #64]	@ 0x40
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_UART_MspInit+0x98>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_UART_MspInit+0x98>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a14      	ldr	r2, [pc, #80]	@ (8001394 <HAL_UART_MspInit+0x98>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <HAL_UART_MspInit+0x98>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001356:	2360      	movs	r3, #96	@ 0x60
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001366:	2307      	movs	r3, #7
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4809      	ldr	r0, [pc, #36]	@ (8001398 <HAL_UART_MspInit+0x9c>)
 8001372:	f000 fea9 	bl	80020c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2026      	movs	r0, #38	@ 0x26
 800137c:	f000 fddb 	bl	8001f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001380:	2026      	movs	r0, #38	@ 0x26
 8001382:	f000 fdf4 	bl	8001f6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	@ 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40004400 	.word	0x40004400
 8001394:	40023800 	.word	0x40023800
 8001398:	40020c00 	.word	0x40020c00

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <NMI_Handler+0x4>

080013a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <MemManage_Handler+0x4>

080013b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f2:	f000 fc81 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <USART2_IRQHandler+0x10>)
 8001402:	f002 fa5f 	bl	80038c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000110 	.word	0x20000110

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	@ (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f003 f9c8 	bl	80047d4 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20050000 	.word	0x20050000
 8001470:	00000400 	.word	0x00000400
 8001474:	200001bc 	.word	0x200001bc
 8001478:	20000310 	.word	0x20000310

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014a4:	f7ff ffea 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	@ (80014e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	@ (80014ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f003 f987 	bl	80047e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff f885 	bl	80005e0 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014d8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80014e4:	080053e8 	.word	0x080053e8
  ldr r2, =_sbss
 80014e8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80014ec:	20000310 	.word	0x20000310

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <MX_USART2_UART_Init>:
 * @brief Inicializacion USART2 (Asincrona)
 * @param void
 * @retval void
******************************************************************************************************************/
void MX_USART2_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <MX_USART2_UART_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001500:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 800152c:	f002 f8ee 	bl	800370c <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001536:	f7ff fe6b 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000110 	.word	0x20000110
 8001544:	40004400 	.word	0x40004400

08001548 <BT_SendMessage>:
 * @brief: 	Enviar un mensaje a HC-05
 * @param:	char message (cadena de carecteres)
 * @retval:	void
******************************************************************************************************************/

void BT_SendMessage(char *message) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7fe fe6f 	bl	8000234 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4803      	ldr	r0, [pc, #12]	@ (8001570 <BT_SendMessage+0x28>)
 8001562:	f002 f923 	bl	80037ac <HAL_UART_Transmit>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000110 	.word	0x20000110

08001574 <BT_Test>:
/*****************************************************************************************************************
 * @brief: Para probar si el STM32 está enviando datos correctamente al módulo Bluetooth HC-05
 * @param: void
 * @retval: void
******************************************************************************************************************/
void BT_Test() {
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
    char message[] = "✅ HC-05 conectado con STM32\r\n";
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <BT_Test+0x38>)
 800157c:	463c      	mov	r4, r7
 800157e:	461d      	mov	r5, r3
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800158c:	463b      	mov	r3, r7
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fe50 	bl	8000234 <strlen>
 8001594:	4603      	mov	r3, r0
 8001596:	b29a      	uxth	r2, r3
 8001598:	4639      	mov	r1, r7
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <BT_Test+0x3c>)
 80015a0:	f002 f904 	bl	80037ac <HAL_UART_Transmit>
}
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bdb0      	pop	{r4, r5, r7, pc}
 80015ac:	0800536c 	.word	0x0800536c
 80015b0:	20000110 	.word	0x20000110

080015b4 <HAL_UART_TxCpltCallback>:
 * @brief Cuando se completa la transmision se puede realizar una tarea determinada
 * @param modulo UART
 * @retval void
******************************************************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
		/*USER CODE BEGIN TxCpltCallback*/

		/*USER CODE END TxCpltCallback*/
	}
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <delayInit>:
 */

#include "main.h"
#include "API_Delay.h"

void delayInit(delay_t *delay, tick_t duration){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	delay->startTime=HAL_GetTick();
 80015d2:	f000 fba5 	bl	8001d20 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	601a      	str	r2, [r3, #0]
	delay->duration=duration;				//valor que tomara al definir el tiempo de espera
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	605a      	str	r2, [r3, #4]
	delay->running=false;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	721a      	strb	r2, [r3, #8]
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <delayRead>:
bool_t delayRead(delay_t *delay){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	if(delay->running==false){
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7a1b      	ldrb	r3, [r3, #8]
 80015fc:	f083 0301 	eor.w	r3, r3, #1
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <delayRead+0x2a>
		delay->startTime=HAL_GetTick();
 8001606:	f000 fb8b 	bl	8001d20 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]
		delay->running=true;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	721a      	strb	r2, [r3, #8]
		return false;
 8001616:	2300      	movs	r3, #0
 8001618:	e00f      	b.n	800163a <delayRead+0x4a>
	}
	if((HAL_GetTick()-delay->startTime)>=delay->duration){
 800161a:	f000 fb81 	bl	8001d20 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1ad2      	subs	r2, r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	d304      	bcc.n	8001638 <delayRead+0x48>
		delay->running=false;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	721a      	strb	r2, [r3, #8]
		return true;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <delayRead+0x4a>
	}
	return false;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	@ 0x38
 8001648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
 800165e:	4b90      	ldr	r3, [pc, #576]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a8f      	ldr	r2, [pc, #572]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 8001664:	f043 0310 	orr.w	r3, r3, #16
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b8d      	ldr	r3, [pc, #564]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	623b      	str	r3, [r7, #32]
 8001674:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	4b89      	ldr	r3, [pc, #548]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a88      	ldr	r2, [pc, #544]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b86      	ldr	r3, [pc, #536]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	4b82      	ldr	r3, [pc, #520]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a81      	ldr	r2, [pc, #516]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 800169c:	f043 0320 	orr.w	r3, r3, #32
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b7f      	ldr	r3, [pc, #508]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0320 	and.w	r3, r3, #32
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	4b7b      	ldr	r3, [pc, #492]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a7a      	ldr	r2, [pc, #488]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 80016b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b78      	ldr	r3, [pc, #480]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b74      	ldr	r3, [pc, #464]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a73      	ldr	r2, [pc, #460]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b71      	ldr	r3, [pc, #452]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b6d      	ldr	r3, [pc, #436]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a6c      	ldr	r2, [pc, #432]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b6a      	ldr	r3, [pc, #424]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b66      	ldr	r3, [pc, #408]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a65      	ldr	r2, [pc, #404]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b63      	ldr	r3, [pc, #396]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b5f      	ldr	r3, [pc, #380]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a5e      	ldr	r2, [pc, #376]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 8001728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b5c      	ldr	r3, [pc, #368]	@ (80018a0 <MX_GPIO_Init+0x25c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, R2_Pin|R1_Pin, GPIO_PIN_SET);
 800173a:	2201      	movs	r2, #1
 800173c:	2148      	movs	r1, #72	@ 0x48
 800173e:	4859      	ldr	r0, [pc, #356]	@ (80018a4 <MX_GPIO_Init+0x260>)
 8001740:	f000 fe6e 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, R4_Pin|R3_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800174a:	4857      	ldr	r0, [pc, #348]	@ (80018a8 <MX_GPIO_Init+0x264>)
 800174c:	f000 fe68 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2120      	movs	r1, #32
 8001754:	4855      	ldr	r0, [pc, #340]	@ (80018ac <MX_GPIO_Init+0x268>)
 8001756:	f000 fe63 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001760:	4853      	ldr	r0, [pc, #332]	@ (80018b0 <MX_GPIO_Init+0x26c>)
 8001762:	f000 fe5d 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Encendido_GPIO_Port, Led_Encendido_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800176c:	484e      	ldr	r0, [pc, #312]	@ (80018a8 <MX_GPIO_Init+0x264>)
 800176e:	f000 fe57 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Alerta_Pin|Led_Estado_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8001778:	484a      	ldr	r0, [pc, #296]	@ (80018a4 <MX_GPIO_Init+0x260>)
 800177a:	f000 fe51 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	2140      	movs	r1, #64	@ 0x40
 8001782:	484c      	ldr	r0, [pc, #304]	@ (80018b4 <MX_GPIO_Init+0x270>)
 8001784:	f000 fe4c 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin;
 8001788:	2334      	movs	r3, #52	@ 0x34
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001790:	2301      	movs	r3, #1
 8001792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	4842      	ldr	r0, [pc, #264]	@ (80018a4 <MX_GPIO_Init+0x260>)
 800179c:	f000 fc94 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin R1_Pin Led_Alerta_Pin Led_Estado_Pin */
  GPIO_InitStruct.Pin = R2_Pin|R1_Pin|Led_Alerta_Pin|Led_Estado_Pin;
 80017a0:	f640 2348 	movw	r3, #2632	@ 0xa48
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b6:	4619      	mov	r1, r3
 80017b8:	483a      	ldr	r0, [pc, #232]	@ (80018a4 <MX_GPIO_Init+0x260>)
 80017ba:	f000 fc85 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	4838      	ldr	r0, [pc, #224]	@ (80018b8 <MX_GPIO_Init+0x274>)
 80017d6:	f000 fc77 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin Led_Encendido_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|Led_Encendido_Pin;
 80017da:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f0:	4619      	mov	r1, r3
 80017f2:	482d      	ldr	r0, [pc, #180]	@ (80018a8 <MX_GPIO_Init+0x264>)
 80017f4:	f000 fc68 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sirena_Pin */
  GPIO_InitStruct.Pin = Sirena_Pin;
 80017f8:	2320      	movs	r3, #32
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001800:	2302      	movs	r3, #2
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Sirena_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	4827      	ldr	r0, [pc, #156]	@ (80018ac <MX_GPIO_Init+0x268>)
 8001810:	f000 fc5a 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_PIR_Pin Sensor_Magnetico_1_Pin */
  GPIO_InitStruct.Pin = Sensor_PIR_Pin|Sensor_Magnetico_1_Pin;
 8001814:	23c0      	movs	r3, #192	@ 0xc0
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	4821      	ldr	r0, [pc, #132]	@ (80018ac <MX_GPIO_Init+0x268>)
 8001828:	f000 fc4e 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800182c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001842:	4619      	mov	r1, r3
 8001844:	481a      	ldr	r0, [pc, #104]	@ (80018b0 <MX_GPIO_Init+0x26c>)
 8001846:	f000 fc3f 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Magnetico_2_Pin */
  GPIO_InitStruct.Pin = Sensor_Magnetico_2_Pin;
 800184a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Sensor_Magnetico_2_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185c:	4619      	mov	r1, r3
 800185e:	4817      	ldr	r0, [pc, #92]	@ (80018bc <MX_GPIO_Init+0x278>)
 8001860:	f000 fc32 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001864:	2340      	movs	r3, #64	@ 0x40
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	480e      	ldr	r0, [pc, #56]	@ (80018b4 <MX_GPIO_Init+0x270>)
 800187c:	f000 fc24 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	4808      	ldr	r0, [pc, #32]	@ (80018b4 <MX_GPIO_Init+0x270>)
 8001894:	f000 fc18 	bl	80020c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001898:	bf00      	nop
 800189a:	3738      	adds	r7, #56	@ 0x38
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40021400 	.word	0x40021400
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40021800 	.word	0x40021800
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020c00 	.word	0x40020c00

080018c0 <keypad_init>:
    {'4', '5', '6'},
    {'7', '8', '9'},
    {'*', '0', '#'}
};

void keypad_init() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]

    // Configurar filas como salidas en estado ALTO
    for (int i = 0; i < ROWS; i++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	e022      	b.n	8001920 <keypad_init+0x60>
        GPIO_InitStruct.Pin = rowPins[i];
 80018da:	4a23      	ldr	r2, [pc, #140]	@ (8001968 <keypad_init+0xa8>)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018e2:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(rowPorts[i], &GPIO_InitStruct);
 80018f0:	4a1e      	ldr	r2, [pc, #120]	@ (800196c <keypad_init+0xac>)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	1d3a      	adds	r2, r7, #4
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fbe3 	bl	80020c8 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_SET);
 8001902:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <keypad_init+0xac>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800190a:	4a17      	ldr	r2, [pc, #92]	@ (8001968 <keypad_init+0xa8>)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001912:	2201      	movs	r2, #1
 8001914:	4619      	mov	r1, r3
 8001916:	f000 fd83 	bl	8002420 <HAL_GPIO_WritePin>
    for (int i = 0; i < ROWS; i++) {
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3301      	adds	r3, #1
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	2b03      	cmp	r3, #3
 8001924:	ddd9      	ble.n	80018da <keypad_init+0x1a>
    }

    // Configurar columnas como entradas con pull-up
    for (int j = 0; j < COLS; j++) {
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	e014      	b.n	8001956 <keypad_init+0x96>
        GPIO_InitStruct.Pin = colPins[j];
 800192c:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <keypad_init+0xb0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001934:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193a:	2301      	movs	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(colPorts[j], &GPIO_InitStruct);
 800193e:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <keypad_init+0xb4>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	1d3a      	adds	r2, r7, #4
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fbbc 	bl	80020c8 <HAL_GPIO_Init>
    for (int j = 0; j < COLS; j++) {
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	3301      	adds	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b02      	cmp	r3, #2
 800195a:	dde7      	ble.n	800192c <keypad_init+0x6c>
    }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000001c 	.word	0x2000001c
 800196c:	2000000c 	.word	0x2000000c
 8001970:	20000030 	.word	0x20000030
 8001974:	20000024 	.word	0x20000024

08001978 <keypad_getkey>:

char keypad_getkey() {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
    for (int i = 0; i < ROWS; i++) {
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e052      	b.n	8001a2a <keypad_getkey+0xb2>
        // Poner todas las filas en alto excepto la actual
        for (int k = 0; k < ROWS; k++) {
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	e014      	b.n	80019b4 <keypad_getkey+0x3c>
            HAL_GPIO_WritePin(rowPorts[k], rowPins[k], (i == k) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800198a:	4a2c      	ldr	r2, [pc, #176]	@ (8001a3c <keypad_getkey+0xc4>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001992:	4a2b      	ldr	r2, [pc, #172]	@ (8001a40 <keypad_getkey+0xc8>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	f000 fd39 	bl	8002420 <HAL_GPIO_WritePin>
        for (int k = 0; k < ROWS; k++) {
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3301      	adds	r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	dde7      	ble.n	800198a <keypad_getkey+0x12>
        }

        // Leer columnas
        for (int j = 0; j < COLS; j++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	e02e      	b.n	8001a1e <keypad_getkey+0xa6>
            if (HAL_GPIO_ReadPin(colPorts[j], colPins[j]) == GPIO_PIN_RESET) {
 80019c0:	4a20      	ldr	r2, [pc, #128]	@ (8001a44 <keypad_getkey+0xcc>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019c8:	491f      	ldr	r1, [pc, #124]	@ (8001a48 <keypad_getkey+0xd0>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f000 fd0c 	bl	80023f0 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d11c      	bne.n	8001a18 <keypad_getkey+0xa0>
                HAL_Delay(50); // Anti-rebote
 80019de:	2032      	movs	r0, #50	@ 0x32
 80019e0:	f000 f9aa 	bl	8001d38 <HAL_Delay>
                while (HAL_GPIO_ReadPin(colPorts[j], colPins[j]) == GPIO_PIN_RESET);
 80019e4:	bf00      	nop
 80019e6:	4a17      	ldr	r2, [pc, #92]	@ (8001a44 <keypad_getkey+0xcc>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019ee:	4916      	ldr	r1, [pc, #88]	@ (8001a48 <keypad_getkey+0xd0>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f000 fcf9 	bl	80023f0 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <keypad_getkey+0x6e>
                return keymap[i][j];
 8001a04:	4911      	ldr	r1, [pc, #68]	@ (8001a4c <keypad_getkey+0xd4>)
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	18ca      	adds	r2, r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	e00c      	b.n	8001a32 <keypad_getkey+0xba>
        for (int j = 0; j < COLS; j++) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	ddcd      	ble.n	80019c0 <keypad_getkey+0x48>
    for (int i = 0; i < ROWS; i++) {
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	dda9      	ble.n	8001984 <keypad_getkey+0xc>
            }
        }
    }
    return '\0'; // No se presionó ninguna tecla
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	2000001c 	.word	0x2000001c
 8001a44:	20000024 	.word	0x20000024
 8001a48:	20000030 	.word	0x20000030
 8001a4c:	20000038 	.word	0x20000038

08001a50 <lcd_init>:
/*****************************************************************************************************************
 * @brief: Inicializar la pantalla LCD
 * @param void
 * @retval void
******************************************************************************************************************/
void lcd_init() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Tiempo de inicio según especificación HD44780
 8001a54:	2032      	movs	r0, #50	@ 0x32
 8001a56:	f000 f96f 	bl	8001d38 <HAL_Delay>
    lcd_send_command(0x30);
 8001a5a:	2030      	movs	r0, #48	@ 0x30
 8001a5c:	f000 f85c 	bl	8001b18 <lcd_send_command>
    HAL_Delay(5);
 8001a60:	2005      	movs	r0, #5
 8001a62:	f000 f969 	bl	8001d38 <HAL_Delay>
    lcd_send_command(0x30);
 8001a66:	2030      	movs	r0, #48	@ 0x30
 8001a68:	f000 f856 	bl	8001b18 <lcd_send_command>
    HAL_Delay(1);
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f000 f963 	bl	8001d38 <HAL_Delay>
    lcd_send_command(0x30);
 8001a72:	2030      	movs	r0, #48	@ 0x30
 8001a74:	f000 f850 	bl	8001b18 <lcd_send_command>
    lcd_send_command(0x20); // Cambiar a modo 4 bits
 8001a78:	2020      	movs	r0, #32
 8001a7a:	f000 f84d 	bl	8001b18 <lcd_send_command>

    lcd_send_command(0x28); // Configuración: LCD 2 líneas, matriz 5x8
 8001a7e:	2028      	movs	r0, #40	@ 0x28
 8001a80:	f000 f84a 	bl	8001b18 <lcd_send_command>
    lcd_send_command(0x08); // Apagar display
 8001a84:	2008      	movs	r0, #8
 8001a86:	f000 f847 	bl	8001b18 <lcd_send_command>
    lcd_send_command(0x01); // Limpiar pantalla
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f000 f844 	bl	8001b18 <lcd_send_command>
    HAL_Delay(2);
 8001a90:	2002      	movs	r0, #2
 8001a92:	f000 f951 	bl	8001d38 <HAL_Delay>
    lcd_send_command(0x06); // Configurar modo de entrada
 8001a96:	2006      	movs	r0, #6
 8001a98:	f000 f83e 	bl	8001b18 <lcd_send_command>
    lcd_send_command(0x0C); // Encender display, cursor apagado
 8001a9c:	200c      	movs	r0, #12
 8001a9e:	f000 f83b 	bl	8001b18 <lcd_send_command>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <lcd_clear>:
/*****************************************************************************************************************
 * @brief: Limpiar la pantalla LCD
 * @param void
 * @retval void
******************************************************************************************************************/
void lcd_clear() {
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
    lcd_send_command(0x01); // Limpiar pantalla
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 f834 	bl	8001b18 <lcd_send_command>
    HAL_Delay(2);
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f000 f941 	bl	8001d38 <HAL_Delay>
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <lcd_set_cursor>:
 * @brief: Posicionar el cursor en la pantalla LCD
 * @param row: Fila de la pantalla
 * @param col: Columna de la pantalla
 * @retval void
******************************************************************************************************************/
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	460a      	mov	r2, r1
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	71bb      	strb	r3, [r7, #6]
    uint8_t addresses[] = {0x80, 0xC0}; // Dirección DDRAM para la primera y segunda línea
 8001aca:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8001ace:	81bb      	strh	r3, [r7, #12]
    lcd_send_command(addresses[row] + col);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	3310      	adds	r3, #16
 8001ad4:	443b      	add	r3, r7
 8001ad6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001ada:	79bb      	ldrb	r3, [r7, #6]
 8001adc:	4413      	add	r3, r2
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f819 	bl	8001b18 <lcd_send_command>
}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <lcd_print>:
/*****************************************************************************************************************
 * @brief: Imprimir un texto en la pantalla LCD
 * @param str: Cadena de caracteres a imprimir
 * @retval void
******************************************************************************************************************/
void lcd_print(const char *str) {
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001af6:	e006      	b.n	8001b06 <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f817 	bl	8001b34 <lcd_send_data>
    while (*str) {
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f4      	bne.n	8001af8 <lcd_print+0xa>
    }
}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <lcd_send_command>:
/*****************************************************************************************************************
 * @brief: Enviar un comando a la pantalla LCD
 * @param cmd: Comando a enviar // entero de 8bits sin signo
 * @retval void
******************************************************************************************************************/
static void lcd_send_command(uint8_t cmd) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    lcd_send(cmd, 0x00);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f812 	bl	8001b50 <lcd_send>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <lcd_send_data>:
/*****************************************************************************************************************
 * @brief: Enviar un dato a la pantalla LCD
 * @param data: Dato a enviar // Entero sin signo de 8bits
 * @retval void
******************************************************************************************************************/
static void lcd_send_data(uint8_t data) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
    lcd_send(data, 0x01);
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2101      	movs	r1, #1
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f804 	bl	8001b50 <lcd_send>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <lcd_send>:
 * @brief: Enviar datos a la pantalla LCD
 * @param value: Valor a enviar
 * @param mode: Modo de operación (comando o datos)
 * @retval void
******************************************************************************************************************/
static void lcd_send(uint8_t value, uint8_t mode) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	71bb      	strb	r3, [r7, #6]
    lcd_control = lcd_backlight | mode;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <lcd_send+0x40>)
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	79bb      	ldrb	r3, [r7, #6]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <lcd_send+0x44>)
 8001b6c:	701a      	strb	r2, [r3, #0]
    lcd_write_nibble(value & 0xF0);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f023 030f 	bic.w	r3, r3, #15
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f80e 	bl	8001b98 <lcd_write_nibble>
    lcd_write_nibble((value << 4) & 0xF0);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f808 	bl	8001b98 <lcd_write_nibble>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000044 	.word	0x20000044
 8001b94:	200001c0 	.word	0x200001c0

08001b98 <lcd_write_nibble>:
/*****************************************************************************************************************
 * @brief: Escribir un nibble en la pantalla LCD
 * @param nibble: Parte alta o baja del byte a enviar
 * @retval void
******************************************************************************************************************/
static void lcd_write_nibble(uint8_t nibble) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
    uint8_t data = nibble | lcd_control | 0x04; // Habilitar bit Enable
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <lcd_write_nibble+0x58>)
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001bb4:	f107 020f 	add.w	r2, r7, #15
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	214e      	movs	r1, #78	@ 0x4e
 8001bc2:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <lcd_write_nibble+0x5c>)
 8001bc4:	f000 fda4 	bl	8002710 <HAL_I2C_Master_Transmit>
    data &= ~0x04; // Deshabilitar bit Enable
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001bd2:	f107 020f 	add.w	r2, r7, #15
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	214e      	movs	r1, #78	@ 0x4e
 8001be0:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <lcd_write_nibble+0x5c>)
 8001be2:	f000 fd95 	bl	8002710 <HAL_I2C_Master_Transmit>
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200001c0 	.word	0x200001c0
 8001bf4:	200000bc 	.word	0x200000bc

08001bf8 <MX_I2C2_Init>:
  * @param None
  * @retval None
  */
/******************************************************************************************************************/
void MX_I2C2_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <MX_I2C2_Init+0x50>)
 8001bfe:	4a13      	ldr	r2, [pc, #76]	@ (8001c4c <MX_I2C2_Init+0x54>)
 8001c00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <MX_I2C2_Init+0x50>)
 8001c04:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <MX_I2C2_Init+0x58>)
 8001c06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <MX_I2C2_Init+0x50>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <MX_I2C2_Init+0x50>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <MX_I2C2_Init+0x50>)
 8001c16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <MX_I2C2_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <MX_I2C2_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c28:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <MX_I2C2_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <MX_I2C2_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c34:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <MX_I2C2_Init+0x50>)
 8001c36:	f000 fc27 	bl	8002488 <HAL_I2C_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c40:	f7ff fae6 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	200000bc 	.word	0x200000bc
 8001c4c:	40005800 	.word	0x40005800
 8001c50:	000186a0 	.word	0x000186a0

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <HAL_Init+0x40>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <HAL_Init+0x40>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <HAL_Init+0x40>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f94f 	bl	8001f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fac8 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f967 	bl	8001f8a <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f000 f92f 	bl	8001f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	@ (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000008 	.word	0x20000008
 8001cf0:	2000004c 	.word	0x2000004c
 8001cf4:	20000048 	.word	0x20000048

08001cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_IncTick+0x20>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_IncTick+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <HAL_IncTick+0x24>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	2000004c 	.word	0x2000004c
 8001d1c:	200001c4 	.word	0x200001c4

08001d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <HAL_GetTick+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	200001c4 	.word	0x200001c4

08001d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff ffee 	bl	8001d20 <HAL_GetTick>
 8001d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d005      	beq.n	8001d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <HAL_Delay+0x44>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d5e:	bf00      	nop
 8001d60:	f7ff ffde 	bl	8001d20 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d8f7      	bhi.n	8001d60 <HAL_Delay+0x28>
  {
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000004c 	.word	0x2000004c

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4907      	ldr	r1, [pc, #28]	@ (8001e1c <__NVIC_EnableIRQ+0x38>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	@ (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	@ (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	@ 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eec:	d301      	bcc.n	8001ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00f      	b.n	8001f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <SysTick_Config+0x40>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efa:	210f      	movs	r1, #15
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f7ff ff8e 	bl	8001e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <SysTick_Config+0x40>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <SysTick_Config+0x40>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff29 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff3e 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff8e 	bl	8001e74 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5d 	bl	8001e20 <__NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff31 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa2 	bl	8001edc <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff feb6 	bl	8001d20 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d008      	beq.n	8001fd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2280      	movs	r2, #128	@ 0x80
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e052      	b.n	800207a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0216 	bic.w	r2, r2, #22
 8001fe2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ff2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d103      	bne.n	8002004 <HAL_DMA_Abort+0x62>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0208 	bic.w	r2, r2, #8
 8002012:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	e013      	b.n	800204e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002026:	f7ff fe7b 	bl	8001d20 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b05      	cmp	r3, #5
 8002032:	d90c      	bls.n	800204e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2203      	movs	r2, #3
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e015      	b.n	800207a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1e4      	bne.n	8002026 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	223f      	movs	r2, #63	@ 0x3f
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d004      	beq.n	80020a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2280      	movs	r2, #128	@ 0x80
 800209a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e00c      	b.n	80020ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2205      	movs	r2, #5
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e165      	b.n	80023b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 8154 	bne.w	80023aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d005      	beq.n	800211a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002116:	2b02      	cmp	r3, #2
 8002118:	d130      	bne.n	800217c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0201 	and.w	r2, r3, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b03      	cmp	r3, #3
 8002186:	d017      	beq.n	80021b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d123      	bne.n	800220c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	08da      	lsrs	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80ae 	beq.w	80023aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b5d      	ldr	r3, [pc, #372]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	4a5c      	ldr	r2, [pc, #368]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 8002258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800225c:	6453      	str	r3, [r2, #68]	@ 0x44
 800225e:	4b5a      	ldr	r3, [pc, #360]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226a:	4a58      	ldr	r2, [pc, #352]	@ (80023cc <HAL_GPIO_Init+0x304>)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	220f      	movs	r2, #15
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4f      	ldr	r2, [pc, #316]	@ (80023d0 <HAL_GPIO_Init+0x308>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d025      	beq.n	80022e2 <HAL_GPIO_Init+0x21a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4e      	ldr	r2, [pc, #312]	@ (80023d4 <HAL_GPIO_Init+0x30c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01f      	beq.n	80022de <HAL_GPIO_Init+0x216>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4d      	ldr	r2, [pc, #308]	@ (80023d8 <HAL_GPIO_Init+0x310>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d019      	beq.n	80022da <HAL_GPIO_Init+0x212>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4c      	ldr	r2, [pc, #304]	@ (80023dc <HAL_GPIO_Init+0x314>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4b      	ldr	r2, [pc, #300]	@ (80023e0 <HAL_GPIO_Init+0x318>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00d      	beq.n	80022d2 <HAL_GPIO_Init+0x20a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4a      	ldr	r2, [pc, #296]	@ (80023e4 <HAL_GPIO_Init+0x31c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <HAL_GPIO_Init+0x206>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a49      	ldr	r2, [pc, #292]	@ (80023e8 <HAL_GPIO_Init+0x320>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_GPIO_Init+0x202>
 80022c6:	2306      	movs	r3, #6
 80022c8:	e00c      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022ca:	2307      	movs	r3, #7
 80022cc:	e00a      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022ce:	2305      	movs	r3, #5
 80022d0:	e008      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022d2:	2304      	movs	r3, #4
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022d6:	2303      	movs	r3, #3
 80022d8:	e004      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022da:	2302      	movs	r3, #2
 80022dc:	e002      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022e2:	2300      	movs	r3, #0
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	f002 0203 	and.w	r2, r2, #3
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	4093      	lsls	r3, r2
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f4:	4935      	ldr	r1, [pc, #212]	@ (80023cc <HAL_GPIO_Init+0x304>)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002302:	4b3a      	ldr	r3, [pc, #232]	@ (80023ec <HAL_GPIO_Init+0x324>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002326:	4a31      	ldr	r2, [pc, #196]	@ (80023ec <HAL_GPIO_Init+0x324>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800232c:	4b2f      	ldr	r3, [pc, #188]	@ (80023ec <HAL_GPIO_Init+0x324>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002350:	4a26      	ldr	r2, [pc, #152]	@ (80023ec <HAL_GPIO_Init+0x324>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002356:	4b25      	ldr	r3, [pc, #148]	@ (80023ec <HAL_GPIO_Init+0x324>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ec <HAL_GPIO_Init+0x324>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002380:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <HAL_GPIO_Init+0x324>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a4:	4a11      	ldr	r2, [pc, #68]	@ (80023ec <HAL_GPIO_Init+0x324>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3301      	adds	r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	f67f ae96 	bls.w	80020e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3724      	adds	r7, #36	@ 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40013800 	.word	0x40013800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40020800 	.word	0x40020800
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40021400 	.word	0x40021400
 80023e8:	40021800 	.word	0x40021800
 80023ec:	40013c00 	.word	0x40013c00

080023f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	887b      	ldrh	r3, [r7, #2]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e001      	b.n	8002412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
 800242c:	4613      	mov	r3, r2
 800242e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800243c:	e003      	b.n	8002446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800243e:	887b      	ldrh	r3, [r7, #2]
 8002440:	041a      	lsls	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	619a      	str	r2, [r3, #24]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002464:	887a      	ldrh	r2, [r7, #2]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	041a      	lsls	r2, r3, #16
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43d9      	mvns	r1, r3
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	400b      	ands	r3, r1
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	619a      	str	r2, [r3, #24]
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e12b      	b.n	80026f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fedc 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	@ 0x24
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024ec:	f000 fe62 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a81      	ldr	r2, [pc, #516]	@ (80026fc <HAL_I2C_Init+0x274>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d807      	bhi.n	800250c <HAL_I2C_Init+0x84>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a80      	ldr	r2, [pc, #512]	@ (8002700 <HAL_I2C_Init+0x278>)
 8002500:	4293      	cmp	r3, r2
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e006      	b.n	800251a <HAL_I2C_Init+0x92>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a7d      	ldr	r2, [pc, #500]	@ (8002704 <HAL_I2C_Init+0x27c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0e7      	b.n	80026f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a78      	ldr	r2, [pc, #480]	@ (8002708 <HAL_I2C_Init+0x280>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	0c9b      	lsrs	r3, r3, #18
 800252c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a6a      	ldr	r2, [pc, #424]	@ (80026fc <HAL_I2C_Init+0x274>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d802      	bhi.n	800255c <HAL_I2C_Init+0xd4>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3301      	adds	r3, #1
 800255a:	e009      	b.n	8002570 <HAL_I2C_Init+0xe8>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	4a69      	ldr	r2, [pc, #420]	@ (800270c <HAL_I2C_Init+0x284>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	3301      	adds	r3, #1
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	430b      	orrs	r3, r1
 8002576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002582:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	495c      	ldr	r1, [pc, #368]	@ (80026fc <HAL_I2C_Init+0x274>)
 800258c:	428b      	cmp	r3, r1
 800258e:	d819      	bhi.n	80025c4 <HAL_I2C_Init+0x13c>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e59      	subs	r1, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fbb1 f3f3 	udiv	r3, r1, r3
 800259e:	1c59      	adds	r1, r3, #1
 80025a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025a4:	400b      	ands	r3, r1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_I2C_Init+0x138>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e59      	subs	r1, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025be:	e051      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 80025c0:	2304      	movs	r3, #4
 80025c2:	e04f      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d111      	bne.n	80025f0 <HAL_I2C_Init+0x168>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e58      	subs	r0, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e012      	b.n	8002616 <HAL_I2C_Init+0x18e>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e58      	subs	r0, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	0099      	lsls	r1, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	fbb0 f3f3 	udiv	r3, r0, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Init+0x196>
 800261a:	2301      	movs	r3, #1
 800261c:	e022      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10e      	bne.n	8002644 <HAL_I2C_Init+0x1bc>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1e58      	subs	r0, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	440b      	add	r3, r1
 8002634:	fbb0 f3f3 	udiv	r3, r0, r3
 8002638:	3301      	adds	r3, #1
 800263a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002642:	e00f      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e58      	subs	r0, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	0099      	lsls	r1, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	fbb0 f3f3 	udiv	r3, r0, r3
 800265a:	3301      	adds	r3, #1
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	6809      	ldr	r1, [r1, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002692:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6911      	ldr	r1, [r2, #16]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68d2      	ldr	r2, [r2, #12]
 800269e:	4311      	orrs	r1, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	000186a0 	.word	0x000186a0
 8002700:	001e847f 	.word	0x001e847f
 8002704:	003d08ff 	.word	0x003d08ff
 8002708:	431bde83 	.word	0x431bde83
 800270c:	10624dd3 	.word	0x10624dd3

08002710 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	461a      	mov	r2, r3
 800271c:	460b      	mov	r3, r1
 800271e:	817b      	strh	r3, [r7, #10]
 8002720:	4613      	mov	r3, r2
 8002722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff fafc 	bl	8001d20 <HAL_GetTick>
 8002728:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b20      	cmp	r3, #32
 8002734:	f040 80e0 	bne.w	80028f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2319      	movs	r3, #25
 800273e:	2201      	movs	r2, #1
 8002740:	4970      	ldr	r1, [pc, #448]	@ (8002904 <HAL_I2C_Master_Transmit+0x1f4>)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f964 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800274e:	2302      	movs	r3, #2
 8002750:	e0d3      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_I2C_Master_Transmit+0x50>
 800275c:	2302      	movs	r3, #2
 800275e:	e0cc      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d007      	beq.n	8002786 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2221      	movs	r2, #33	@ 0x21
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2210      	movs	r2, #16
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	893a      	ldrh	r2, [r7, #8]
 80027b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a50      	ldr	r2, [pc, #320]	@ (8002908 <HAL_I2C_Master_Transmit+0x1f8>)
 80027c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f89c 	bl	800290c <I2C_MasterRequestWrite>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e08d      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027f4:	e066      	b.n	80028c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	6a39      	ldr	r1, [r7, #32]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fa22 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	2b04      	cmp	r3, #4
 800280c:	d107      	bne.n	800281e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06b      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b04      	cmp	r3, #4
 800285e:	d11b      	bne.n	8002898 <HAL_I2C_Master_Transmit+0x188>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	6a39      	ldr	r1, [r7, #32]
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fa19 	bl	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e01a      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d194      	bne.n	80027f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	00100002 	.word	0x00100002
 8002908:	ffff0000 	.word	0xffff0000

0800290c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	460b      	mov	r3, r1
 800291a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b08      	cmp	r3, #8
 8002926:	d006      	beq.n	8002936 <I2C_MasterRequestWrite+0x2a>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d003      	beq.n	8002936 <I2C_MasterRequestWrite+0x2a>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002934:	d108      	bne.n	8002948 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e00b      	b.n	8002960 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	2b12      	cmp	r3, #18
 800294e:	d107      	bne.n	8002960 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800295e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f84f 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00d      	beq.n	8002994 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002986:	d103      	bne.n	8002990 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800298e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e035      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800299c:	d108      	bne.n	80029b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800299e:	897b      	ldrh	r3, [r7, #10]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	e01b      	b.n	80029e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029b0:	897b      	ldrh	r3, [r7, #10]
 80029b2:	11db      	asrs	r3, r3, #7
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f003 0306 	and.w	r3, r3, #6
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f063 030f 	orn	r3, r3, #15
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	490e      	ldr	r1, [pc, #56]	@ (8002a08 <I2C_MasterRequestWrite+0xfc>)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f898 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e010      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029de:	897b      	ldrh	r3, [r7, #10]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4907      	ldr	r1, [pc, #28]	@ (8002a0c <I2C_MasterRequestWrite+0x100>)
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f888 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	00010008 	.word	0x00010008
 8002a0c:	00010002 	.word	0x00010002

08002a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a20:	e048      	b.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d044      	beq.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2a:	f7ff f979 	bl	8001d20 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d139      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10d      	bne.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	e00c      	b.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d116      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e023      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10d      	bne.n	8002ada <I2C_WaitOnFlagUntilTimeout+0xca>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	e00c      	b.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d093      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b12:	e071      	b.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b22:	d123      	bne.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e067      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d041      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b74:	f7ff f8d4 	bl	8001d20 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d136      	bne.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10c      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e00b      	b.n	8002bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e021      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10c      	bne.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e00b      	b.n	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f af6d 	bne.w	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c50:	e034      	b.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f886 	bl	8002d64 <I2C_IsAcknowledgeFailed>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d028      	beq.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7ff f859 	bl	8001d20 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d11d      	bne.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d016      	beq.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e007      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc6:	2b80      	cmp	r3, #128	@ 0x80
 8002cc8:	d1c3      	bne.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce0:	e034      	b.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f83e 	bl	8002d64 <I2C_IsAcknowledgeFailed>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d028      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfa:	f7ff f811 	bl	8001d20 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d302      	bcc.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11d      	bne.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d016      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e007      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d1c3      	bne.n	8002ce2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d7a:	d11b      	bne.n	8002db4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	f043 0204 	orr.w	r2, r3, #4
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0cc      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b68      	ldr	r3, [pc, #416]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d90c      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b65      	ldr	r3, [pc, #404]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b63      	ldr	r3, [pc, #396]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0b8      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e18:	4b59      	ldr	r3, [pc, #356]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a58      	ldr	r2, [pc, #352]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e30:	4b53      	ldr	r3, [pc, #332]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a52      	ldr	r2, [pc, #328]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3c:	4b50      	ldr	r3, [pc, #320]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	494d      	ldr	r1, [pc, #308]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d044      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b47      	ldr	r3, [pc, #284]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d119      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e07f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b3f      	ldr	r3, [pc, #252]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e06f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	4b3b      	ldr	r3, [pc, #236]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e067      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	4b37      	ldr	r3, [pc, #220]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4934      	ldr	r1, [pc, #208]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe ff34 	bl	8001d20 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7fe ff30 	bl	8001d20 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e04f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b25      	ldr	r3, [pc, #148]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d20c      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b20      	ldr	r3, [pc, #128]	@ (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e032      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f18:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4916      	ldr	r1, [pc, #88]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f36:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	490e      	ldr	r1, [pc, #56]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f4a:	f000 f821 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	490a      	ldr	r1, [pc, #40]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	5ccb      	ldrb	r3, [r1, r3]
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	4a09      	ldr	r2, [pc, #36]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f66:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fe94 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00
 8002f80:	40023800 	.word	0x40023800
 8002f84:	0800538c 	.word	0x0800538c
 8002f88:	20000008 	.word	0x20000008
 8002f8c:	20000048 	.word	0x20000048

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f94:	b094      	sub	sp, #80	@ 0x50
 8002f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa8:	4b79      	ldr	r3, [pc, #484]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	f200 80e1 	bhi.w	800317c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x3a>
 8002fc2:	e0db      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b73      	ldr	r3, [pc, #460]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fc8:	e0db      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fca:	4b73      	ldr	r3, [pc, #460]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fce:	e0d8      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fda:	4b6d      	ldr	r3, [pc, #436]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	2200      	movs	r2, #0
 8002fee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ff0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ffe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003002:	4622      	mov	r2, r4
 8003004:	462b      	mov	r3, r5
 8003006:	f04f 0000 	mov.w	r0, #0
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	0159      	lsls	r1, r3, #5
 8003010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003014:	0150      	lsls	r0, r2, #5
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4621      	mov	r1, r4
 800301c:	1a51      	subs	r1, r2, r1
 800301e:	6139      	str	r1, [r7, #16]
 8003020:	4629      	mov	r1, r5
 8003022:	eb63 0301 	sbc.w	r3, r3, r1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003034:	4659      	mov	r1, fp
 8003036:	018b      	lsls	r3, r1, #6
 8003038:	4651      	mov	r1, sl
 800303a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800303e:	4651      	mov	r1, sl
 8003040:	018a      	lsls	r2, r1, #6
 8003042:	4651      	mov	r1, sl
 8003044:	ebb2 0801 	subs.w	r8, r2, r1
 8003048:	4659      	mov	r1, fp
 800304a:	eb63 0901 	sbc.w	r9, r3, r1
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800305a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800305e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003062:	4690      	mov	r8, r2
 8003064:	4699      	mov	r9, r3
 8003066:	4623      	mov	r3, r4
 8003068:	eb18 0303 	adds.w	r3, r8, r3
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	462b      	mov	r3, r5
 8003070:	eb49 0303 	adc.w	r3, r9, r3
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003082:	4629      	mov	r1, r5
 8003084:	024b      	lsls	r3, r1, #9
 8003086:	4621      	mov	r1, r4
 8003088:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800308c:	4621      	mov	r1, r4
 800308e:	024a      	lsls	r2, r1, #9
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003096:	2200      	movs	r2, #0
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800309a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800309c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030a0:	f7fd f926 	bl	80002f0 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ac:	e058      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ae:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	2200      	movs	r2, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	4611      	mov	r1, r2
 80030ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	2300      	movs	r3, #0
 80030c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030c8:	4642      	mov	r2, r8
 80030ca:	464b      	mov	r3, r9
 80030cc:	f04f 0000 	mov.w	r0, #0
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	0159      	lsls	r1, r3, #5
 80030d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030da:	0150      	lsls	r0, r2, #5
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4641      	mov	r1, r8
 80030e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80030e6:	4649      	mov	r1, r9
 80030e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003100:	ebb2 040a 	subs.w	r4, r2, sl
 8003104:	eb63 050b 	sbc.w	r5, r3, fp
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	00eb      	lsls	r3, r5, #3
 8003112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003116:	00e2      	lsls	r2, r4, #3
 8003118:	4614      	mov	r4, r2
 800311a:	461d      	mov	r5, r3
 800311c:	4643      	mov	r3, r8
 800311e:	18e3      	adds	r3, r4, r3
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	464b      	mov	r3, r9
 8003124:	eb45 0303 	adc.w	r3, r5, r3
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003136:	4629      	mov	r1, r5
 8003138:	028b      	lsls	r3, r1, #10
 800313a:	4621      	mov	r1, r4
 800313c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003140:	4621      	mov	r1, r4
 8003142:	028a      	lsls	r2, r1, #10
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800314a:	2200      	movs	r2, #0
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	61fa      	str	r2, [r7, #28]
 8003150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003154:	f7fd f8cc 	bl	80002f0 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4613      	mov	r3, r2
 800315e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x200>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	3301      	adds	r3, #1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003170:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x204>)
 800317e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003184:	4618      	mov	r0, r3
 8003186:	3750      	adds	r7, #80	@ 0x50
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	00f42400 	.word	0x00f42400
 8003198:	007a1200 	.word	0x007a1200

0800319c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000008 	.word	0x20000008

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031b8:	f7ff fff0 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0a9b      	lsrs	r3, r3, #10
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4903      	ldr	r1, [pc, #12]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	0800539c 	.word	0x0800539c

080031dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e0:	f7ff ffdc 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	0b5b      	lsrs	r3, r3, #13
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4903      	ldr	r1, [pc, #12]	@ (8003200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40023800 	.word	0x40023800
 8003200:	0800539c 	.word	0x0800539c

08003204 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e273      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d075      	beq.n	800330e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003222:	4b88      	ldr	r3, [pc, #544]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b04      	cmp	r3, #4
 800322c:	d00c      	beq.n	8003248 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322e:	4b85      	ldr	r3, [pc, #532]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
        || \
 8003236:	2b08      	cmp	r3, #8
 8003238:	d112      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323a:	4b82      	ldr	r3, [pc, #520]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003242:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	4b7e      	ldr	r3, [pc, #504]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d05b      	beq.n	800330c <HAL_RCC_OscConfig+0x108>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d157      	bne.n	800330c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e24e      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x74>
 800326a:	4b76      	ldr	r3, [pc, #472]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e01d      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x98>
 8003282:	4b70      	ldr	r3, [pc, #448]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6f      	ldr	r2, [pc, #444]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b6d      	ldr	r3, [pc, #436]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6c      	ldr	r2, [pc, #432]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 800329c:	4b69      	ldr	r3, [pc, #420]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a68      	ldr	r2, [pc, #416]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b66      	ldr	r3, [pc, #408]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a65      	ldr	r2, [pc, #404]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fd30 	bl	8001d20 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe fd2c 	bl	8001d20 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	@ 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e213      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0xc0>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fd1c 	bl	8001d20 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe fd18 	bl	8001d20 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	@ 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1ff      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	4b51      	ldr	r3, [pc, #324]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0xe8>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d063      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800331a:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b47      	ldr	r3, [pc, #284]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
        || \
 800332e:	2b08      	cmp	r3, #8
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b44      	ldr	r3, [pc, #272]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b41      	ldr	r3, [pc, #260]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1d3      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b3b      	ldr	r3, [pc, #236]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4937      	ldr	r1, [pc, #220]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b34      	ldr	r3, [pc, #208]	@ (8003448 <HAL_RCC_OscConfig+0x244>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe fcd1 	bl	8001d20 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe fccd 	bl	8001d20 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1b4      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b2b      	ldr	r3, [pc, #172]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b28      	ldr	r3, [pc, #160]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4925      	ldr	r1, [pc, #148]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <HAL_RCC_OscConfig+0x244>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fcb0 	bl	8001d20 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe fcac 	bl	8001d20 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e193      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d036      	beq.n	800345c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b15      	ldr	r3, [pc, #84]	@ (800344c <HAL_RCC_OscConfig+0x248>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe fc90 	bl	8001d20 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe fc8c 	bl	8001d20 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e173      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x200>
 8003422:	e01b      	b.n	800345c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_OscConfig+0x248>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fe fc79 	bl	8001d20 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	e00e      	b.n	8003450 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003432:	f7fe fc75 	bl	8001d20 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d907      	bls.n	8003450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e15c      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
 8003444:	40023800 	.word	0x40023800
 8003448:	42470000 	.word	0x42470000
 800344c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b8a      	ldr	r3, [pc, #552]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ea      	bne.n	8003432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8097 	beq.w	8003598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346e:	4b83      	ldr	r3, [pc, #524]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b7f      	ldr	r3, [pc, #508]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	4a7e      	ldr	r2, [pc, #504]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	@ 0x40
 800348a:	4b7c      	ldr	r3, [pc, #496]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b79      	ldr	r3, [pc, #484]	@ (8003680 <HAL_RCC_OscConfig+0x47c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b76      	ldr	r3, [pc, #472]	@ (8003680 <HAL_RCC_OscConfig+0x47c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a75      	ldr	r2, [pc, #468]	@ (8003680 <HAL_RCC_OscConfig+0x47c>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fc35 	bl	8001d20 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe fc31 	bl	8001d20 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e118      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003680 <HAL_RCC_OscConfig+0x47c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x2ea>
 80034e0:	4b66      	ldr	r3, [pc, #408]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e4:	4a65      	ldr	r2, [pc, #404]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ec:	e01c      	b.n	8003528 <HAL_RCC_OscConfig+0x324>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x30c>
 80034f6:	4b61      	ldr	r3, [pc, #388]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fa:	4a60      	ldr	r2, [pc, #384]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	@ 0x70
 8003502:	4b5e      	ldr	r3, [pc, #376]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	4a5d      	ldr	r2, [pc, #372]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6713      	str	r3, [r2, #112]	@ 0x70
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0x324>
 8003510:	4b5a      	ldr	r3, [pc, #360]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	4a59      	ldr	r2, [pc, #356]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	@ 0x70
 800351c:	4b57      	ldr	r3, [pc, #348]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003520:	4a56      	ldr	r2, [pc, #344]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe fbf6 	bl	8001d20 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe fbf2 	bl	8001d20 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0d7      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	4b4b      	ldr	r3, [pc, #300]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ee      	beq.n	8003538 <HAL_RCC_OscConfig+0x334>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fbe0 	bl	8001d20 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fe fbdc 	bl	8001d20 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0c1      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357a:	4b40      	ldr	r3, [pc, #256]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ee      	bne.n	8003564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b3b      	ldr	r3, [pc, #236]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	4a3a      	ldr	r2, [pc, #232]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003596:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80ad 	beq.w	80036fc <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a2:	4b36      	ldr	r3, [pc, #216]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d060      	beq.n	8003670 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d145      	bne.n	8003642 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b33      	ldr	r3, [pc, #204]	@ (8003684 <HAL_RCC_OscConfig+0x480>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe fbb0 	bl	8001d20 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe fbac 	bl	8001d20 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e093      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b29      	ldr	r3, [pc, #164]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360c:	071b      	lsls	r3, r3, #28
 800360e:	491b      	ldr	r1, [pc, #108]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b1b      	ldr	r3, [pc, #108]	@ (8003684 <HAL_RCC_OscConfig+0x480>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fe fb81 	bl	8001d20 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003622:	f7fe fb7d 	bl	8001d20 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e064      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003634:	4b11      	ldr	r3, [pc, #68]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x41e>
 8003640:	e05c      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b10      	ldr	r3, [pc, #64]	@ (8003684 <HAL_RCC_OscConfig+0x480>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe fb6a 	bl	8001d20 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe fb66 	bl	8001d20 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e04d      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	4b06      	ldr	r3, [pc, #24]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x44c>
 800366e:	e045      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e040      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
 8003684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003688:	4b1f      	ldr	r3, [pc, #124]	@ (8003708 <HAL_RCC_OscConfig+0x504>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d030      	beq.n	80036f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d129      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d122      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d119      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3b01      	subs	r3, #1
 80036d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d10f      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800

0800370c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e042      	b.n	80037a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fde2 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	@ 0x24
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800374e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fd5f 	bl	8004214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d175      	bne.n	80038b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_UART_Transmit+0x2c>
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e06e      	b.n	80038ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2221      	movs	r2, #33	@ 0x21
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ea:	f7fe fa99 	bl	8001d20 <HAL_GetTick>
 80037ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	88fa      	ldrh	r2, [r7, #6]
 80037f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	88fa      	ldrh	r2, [r7, #6]
 80037fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003804:	d108      	bne.n	8003818 <HAL_UART_Transmit+0x6c>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d104      	bne.n	8003818 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	e003      	b.n	8003820 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003820:	e02e      	b.n	8003880 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	2180      	movs	r1, #128	@ 0x80
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 fafb 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e03a      	b.n	80038ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003858:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	3302      	adds	r3, #2
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	e007      	b.n	8003872 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	781a      	ldrb	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	3301      	adds	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1cb      	bne.n	8003822 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	2140      	movs	r1, #64	@ 0x40
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 fac7 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e006      	b.n	80038ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b0ba      	sub	sp, #232	@ 0xe8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003902:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800390a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_UART_IRQHandler+0x66>
 8003916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fbb8 	bl	8004098 <UART_Receive_IT>
      return;
 8003928:	e25b      	b.n	8003de2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800392a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80de 	beq.w	8003af0 <HAL_UART_IRQHandler+0x22c>
 8003934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003944:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80d1 	beq.w	8003af0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_UART_IRQHandler+0xae>
 800395a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_UART_IRQHandler+0xd2>
 800397e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f043 0202 	orr.w	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_UART_IRQHandler+0xf6>
 80039a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	f043 0204 	orr.w	r2, r3, #4
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d011      	beq.n	80039ea <HAL_UART_IRQHandler+0x126>
 80039c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d105      	bne.n	80039de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e2:	f043 0208 	orr.w	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 81f2 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_UART_IRQHandler+0x14e>
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fb43 	bl	8004098 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1c:	2b40      	cmp	r3, #64	@ 0x40
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <HAL_UART_IRQHandler+0x17a>
 8003a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d04f      	beq.n	8003ade <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa4b 	bl	8003eda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4e:	2b40      	cmp	r3, #64	@ 0x40
 8003a50:	d141      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3314      	adds	r3, #20
 8003a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1d9      	bne.n	8003a52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d013      	beq.n	8003ace <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8003ca4 <HAL_UART_IRQHandler+0x3e0>)
 8003aac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fae5 	bl	8002082 <HAL_DMA_Abort_IT>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	e00e      	b.n	8003aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f994 	bl	8003dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	e00a      	b.n	8003aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f990 	bl	8003dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	e006      	b.n	8003aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f98c 	bl	8003dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003aea:	e175      	b.n	8003dd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	bf00      	nop
    return;
 8003aee:	e173      	b.n	8003dd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	f040 814f 	bne.w	8003d98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 8148 	beq.w	8003d98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8141 	beq.w	8003d98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b36:	2b40      	cmp	r3, #64	@ 0x40
 8003b38:	f040 80b6 	bne.w	8003ca8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8145 	beq.w	8003ddc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	f080 813e 	bcs.w	8003ddc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b72:	f000 8088 	beq.w	8003c86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ba2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1d9      	bne.n	8003b76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3314      	adds	r3, #20
 8003be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003be6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003bea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e1      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e3      	bne.n	8003bfe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c56:	f023 0310 	bic.w	r3, r3, #16
 8003c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e3      	bne.n	8003c44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe f98e 	bl	8001fa2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f8b7 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ca2:	e09b      	b.n	8003ddc <HAL_UART_IRQHandler+0x518>
 8003ca4:	08003fa1 	.word	0x08003fa1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 808e 	beq.w	8003de0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8089 	beq.w	8003de0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003cf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e3      	bne.n	8003cce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3314      	adds	r3, #20
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	623b      	str	r3, [r7, #32]
   return(result);
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e3      	bne.n	8003d06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0310 	bic.w	r3, r3, #16
 8003d62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d70:	61fa      	str	r2, [r7, #28]
 8003d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	69b9      	ldr	r1, [r7, #24]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e3      	bne.n	8003d4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f83d 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d96:	e023      	b.n	8003de0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <HAL_UART_IRQHandler+0x4f4>
 8003da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f909 	bl	8003fc8 <UART_Transmit_IT>
    return;
 8003db6:	e014      	b.n	8003de2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <HAL_UART_IRQHandler+0x51e>
 8003dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f949 	bl	8004068 <UART_EndTransmit_IT>
    return;
 8003dd6:	e004      	b.n	8003de2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003dd8:	bf00      	nop
 8003dda:	e002      	b.n	8003de2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ddc:	bf00      	nop
 8003dde:	e000      	b.n	8003de2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003de0:	bf00      	nop
  }
}
 8003de2:	37e8      	adds	r7, #232	@ 0xe8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e38:	e03b      	b.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d037      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fd ff6d 	bl	8001d20 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e03a      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d023      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b80      	cmp	r3, #128	@ 0x80
 8003e6e:	d020      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b40      	cmp	r3, #64	@ 0x40
 8003e74:	d01d      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d116      	bne.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f81d 	bl	8003eda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e00f      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	bf0c      	ite	eq
 8003ec2:	2301      	moveq	r3, #1
 8003ec4:	2300      	movne	r3, #0
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d0b4      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b095      	sub	sp, #84	@ 0x54
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f02:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e5      	bne.n	8003ee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d119      	bne.n	8003f86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f023 0310 	bic.w	r3, r3, #16
 8003f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f72:	61ba      	str	r2, [r7, #24]
 8003f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6979      	ldr	r1, [r7, #20]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e5      	bne.n	8003f52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f94:	bf00      	nop
 8003f96:	3754      	adds	r7, #84	@ 0x54
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7ff ff1e 	bl	8003dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b21      	cmp	r3, #33	@ 0x21
 8003fda:	d13e      	bne.n	800405a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe4:	d114      	bne.n	8004010 <UART_Transmit_IT+0x48>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d110      	bne.n	8004010 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004002:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	1c9a      	adds	r2, r3, #2
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	621a      	str	r2, [r3, #32]
 800400e:	e008      	b.n	8004022 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	1c59      	adds	r1, r3, #1
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6211      	str	r1, [r2, #32]
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29b      	uxth	r3, r3
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4619      	mov	r1, r3
 8004030:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004044:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004054:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e000      	b.n	800405c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
  }
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800407e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fd fa93 	bl	80015b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08c      	sub	sp, #48	@ 0x30
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b22      	cmp	r3, #34	@ 0x22
 80040aa:	f040 80ae 	bne.w	800420a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b6:	d117      	bne.n	80040e8 <UART_Receive_IT+0x50>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d113      	bne.n	80040e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	1c9a      	adds	r2, r3, #2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80040e6:	e026      	b.n	8004136 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040fa:	d007      	beq.n	800410c <UART_Receive_IT+0x74>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <UART_Receive_IT+0x82>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	e008      	b.n	800412c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004126:	b2da      	uxtb	r2, r3
 8004128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29b      	uxth	r3, r3
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4619      	mov	r1, r3
 8004144:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004146:	2b00      	cmp	r3, #0
 8004148:	d15d      	bne.n	8004206 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0220 	bic.w	r2, r2, #32
 8004158:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004168:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418c:	2b01      	cmp	r3, #1
 800418e:	d135      	bne.n	80041fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	613b      	str	r3, [r7, #16]
   return(result);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f023 0310 	bic.w	r3, r3, #16
 80041ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b6:	623a      	str	r2, [r7, #32]
 80041b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	69f9      	ldr	r1, [r7, #28]
 80041bc:	6a3a      	ldr	r2, [r7, #32]
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e5      	bne.n	8004196 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b10      	cmp	r3, #16
 80041d6:	d10a      	bne.n	80041ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fe0b 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
 80041fa:	e002      	b.n	8004202 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff fdf3 	bl	8003de8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e002      	b.n	800420c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800420a:	2302      	movs	r3, #2
  }
}
 800420c:	4618      	mov	r0, r3
 800420e:	3730      	adds	r7, #48	@ 0x30
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004218:	b0c0      	sub	sp, #256	@ 0x100
 800421a:	af00      	add	r7, sp, #0
 800421c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	68d9      	ldr	r1, [r3, #12]
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	ea40 0301 	orr.w	r3, r0, r1
 800423c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	431a      	orrs	r2, r3
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	431a      	orrs	r2, r3
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800426c:	f021 010c 	bic.w	r1, r1, #12
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800427a:	430b      	orrs	r3, r1
 800427c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428e:	6999      	ldr	r1, [r3, #24]
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	ea40 0301 	orr.w	r3, r0, r1
 800429a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b95      	ldr	r3, [pc, #596]	@ (80044f8 <UART_SetConfig+0x2e4>)
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d011      	beq.n	80042cc <UART_SetConfig+0xb8>
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b93      	ldr	r3, [pc, #588]	@ (80044fc <UART_SetConfig+0x2e8>)
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d00b      	beq.n	80042cc <UART_SetConfig+0xb8>
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b91      	ldr	r3, [pc, #580]	@ (8004500 <UART_SetConfig+0x2ec>)
 80042bc:	429a      	cmp	r2, r3
 80042be:	d005      	beq.n	80042cc <UART_SetConfig+0xb8>
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004504 <UART_SetConfig+0x2f0>)
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d104      	bne.n	80042d6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042cc:	f7fe ff86 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 80042d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042d4:	e003      	b.n	80042de <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042d6:	f7fe ff6d 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 80042da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042e8:	f040 8110 	bne.w	800450c <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042fe:	4622      	mov	r2, r4
 8004300:	462b      	mov	r3, r5
 8004302:	1891      	adds	r1, r2, r2
 8004304:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004306:	415b      	adcs	r3, r3
 8004308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800430a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800430e:	4621      	mov	r1, r4
 8004310:	eb12 0801 	adds.w	r8, r2, r1
 8004314:	4629      	mov	r1, r5
 8004316:	eb43 0901 	adc.w	r9, r3, r1
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800432a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800432e:	4690      	mov	r8, r2
 8004330:	4699      	mov	r9, r3
 8004332:	4623      	mov	r3, r4
 8004334:	eb18 0303 	adds.w	r3, r8, r3
 8004338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800433c:	462b      	mov	r3, r5
 800433e:	eb49 0303 	adc.w	r3, r9, r3
 8004342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004352:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800435a:	460b      	mov	r3, r1
 800435c:	18db      	adds	r3, r3, r3
 800435e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004360:	4613      	mov	r3, r2
 8004362:	eb42 0303 	adc.w	r3, r2, r3
 8004366:	657b      	str	r3, [r7, #84]	@ 0x54
 8004368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800436c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004370:	f7fb ffbe 	bl	80002f0 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4b63      	ldr	r3, [pc, #396]	@ (8004508 <UART_SetConfig+0x2f4>)
 800437a:	fba3 2302 	umull	r2, r3, r3, r2
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	011c      	lsls	r4, r3, #4
 8004382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800438c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	1891      	adds	r1, r2, r2
 800439a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800439c:	415b      	adcs	r3, r3
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043a4:	4641      	mov	r1, r8
 80043a6:	eb12 0a01 	adds.w	sl, r2, r1
 80043aa:	4649      	mov	r1, r9
 80043ac:	eb43 0b01 	adc.w	fp, r3, r1
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043c4:	4692      	mov	sl, r2
 80043c6:	469b      	mov	fp, r3
 80043c8:	4643      	mov	r3, r8
 80043ca:	eb1a 0303 	adds.w	r3, sl, r3
 80043ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043d2:	464b      	mov	r3, r9
 80043d4:	eb4b 0303 	adc.w	r3, fp, r3
 80043d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043f0:	460b      	mov	r3, r1
 80043f2:	18db      	adds	r3, r3, r3
 80043f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f6:	4613      	mov	r3, r2
 80043f8:	eb42 0303 	adc.w	r3, r2, r3
 80043fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004406:	f7fb ff73 	bl	80002f0 <__aeabi_uldivmod>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4611      	mov	r1, r2
 8004410:	4b3d      	ldr	r3, [pc, #244]	@ (8004508 <UART_SetConfig+0x2f4>)
 8004412:	fba3 2301 	umull	r2, r3, r3, r1
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2264      	movs	r2, #100	@ 0x64
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	1acb      	subs	r3, r1, r3
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004426:	4b38      	ldr	r3, [pc, #224]	@ (8004508 <UART_SetConfig+0x2f4>)
 8004428:	fba3 2302 	umull	r2, r3, r3, r2
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004434:	441c      	add	r4, r3
 8004436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800443a:	2200      	movs	r2, #0
 800443c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004440:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004448:	4642      	mov	r2, r8
 800444a:	464b      	mov	r3, r9
 800444c:	1891      	adds	r1, r2, r2
 800444e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004450:	415b      	adcs	r3, r3
 8004452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004458:	4641      	mov	r1, r8
 800445a:	1851      	adds	r1, r2, r1
 800445c:	6339      	str	r1, [r7, #48]	@ 0x30
 800445e:	4649      	mov	r1, r9
 8004460:	414b      	adcs	r3, r1
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004470:	4659      	mov	r1, fp
 8004472:	00cb      	lsls	r3, r1, #3
 8004474:	4651      	mov	r1, sl
 8004476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800447a:	4651      	mov	r1, sl
 800447c:	00ca      	lsls	r2, r1, #3
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	4603      	mov	r3, r0
 8004484:	4642      	mov	r2, r8
 8004486:	189b      	adds	r3, r3, r2
 8004488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800448c:	464b      	mov	r3, r9
 800448e:	460a      	mov	r2, r1
 8004490:	eb42 0303 	adc.w	r3, r2, r3
 8004494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044ac:	460b      	mov	r3, r1
 80044ae:	18db      	adds	r3, r3, r3
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044b2:	4613      	mov	r3, r2
 80044b4:	eb42 0303 	adc.w	r3, r2, r3
 80044b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044c2:	f7fb ff15 	bl	80002f0 <__aeabi_uldivmod>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <UART_SetConfig+0x2f4>)
 80044cc:	fba3 1302 	umull	r1, r3, r3, r2
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	2164      	movs	r1, #100	@ 0x64
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	3332      	adds	r3, #50	@ 0x32
 80044de:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <UART_SetConfig+0x2f4>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	f003 0207 	and.w	r2, r3, #7
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4422      	add	r2, r4
 80044f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044f4:	e10a      	b.n	800470c <UART_SetConfig+0x4f8>
 80044f6:	bf00      	nop
 80044f8:	40011000 	.word	0x40011000
 80044fc:	40011400 	.word	0x40011400
 8004500:	40011800 	.word	0x40011800
 8004504:	40011c00 	.word	0x40011c00
 8004508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800450c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004510:	2200      	movs	r2, #0
 8004512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004516:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800451a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800451e:	4642      	mov	r2, r8
 8004520:	464b      	mov	r3, r9
 8004522:	1891      	adds	r1, r2, r2
 8004524:	6239      	str	r1, [r7, #32]
 8004526:	415b      	adcs	r3, r3
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
 800452a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800452e:	4641      	mov	r1, r8
 8004530:	1854      	adds	r4, r2, r1
 8004532:	4649      	mov	r1, r9
 8004534:	eb43 0501 	adc.w	r5, r3, r1
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	00eb      	lsls	r3, r5, #3
 8004542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004546:	00e2      	lsls	r2, r4, #3
 8004548:	4614      	mov	r4, r2
 800454a:	461d      	mov	r5, r3
 800454c:	4643      	mov	r3, r8
 800454e:	18e3      	adds	r3, r4, r3
 8004550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004554:	464b      	mov	r3, r9
 8004556:	eb45 0303 	adc.w	r3, r5, r3
 800455a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800456a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800457a:	4629      	mov	r1, r5
 800457c:	008b      	lsls	r3, r1, #2
 800457e:	4621      	mov	r1, r4
 8004580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004584:	4621      	mov	r1, r4
 8004586:	008a      	lsls	r2, r1, #2
 8004588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800458c:	f7fb feb0 	bl	80002f0 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4b60      	ldr	r3, [pc, #384]	@ (8004718 <UART_SetConfig+0x504>)
 8004596:	fba3 2302 	umull	r2, r3, r3, r2
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	011c      	lsls	r4, r3, #4
 800459e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	61b9      	str	r1, [r7, #24]
 80045b8:	415b      	adcs	r3, r3
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045c0:	4641      	mov	r1, r8
 80045c2:	1851      	adds	r1, r2, r1
 80045c4:	6139      	str	r1, [r7, #16]
 80045c6:	4649      	mov	r1, r9
 80045c8:	414b      	adcs	r3, r1
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045d8:	4659      	mov	r1, fp
 80045da:	00cb      	lsls	r3, r1, #3
 80045dc:	4651      	mov	r1, sl
 80045de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e2:	4651      	mov	r1, sl
 80045e4:	00ca      	lsls	r2, r1, #3
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	4642      	mov	r2, r8
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045f4:	464b      	mov	r3, r9
 80045f6:	460a      	mov	r2, r1
 80045f8:	eb42 0303 	adc.w	r3, r2, r3
 80045fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	67bb      	str	r3, [r7, #120]	@ 0x78
 800460a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004618:	4649      	mov	r1, r9
 800461a:	008b      	lsls	r3, r1, #2
 800461c:	4641      	mov	r1, r8
 800461e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004622:	4641      	mov	r1, r8
 8004624:	008a      	lsls	r2, r1, #2
 8004626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800462a:	f7fb fe61 	bl	80002f0 <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4611      	mov	r1, r2
 8004634:	4b38      	ldr	r3, [pc, #224]	@ (8004718 <UART_SetConfig+0x504>)
 8004636:	fba3 2301 	umull	r2, r3, r3, r1
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2264      	movs	r2, #100	@ 0x64
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	1acb      	subs	r3, r1, r3
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	3332      	adds	r3, #50	@ 0x32
 8004648:	4a33      	ldr	r2, [pc, #204]	@ (8004718 <UART_SetConfig+0x504>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004654:	441c      	add	r4, r3
 8004656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800465a:	2200      	movs	r2, #0
 800465c:	673b      	str	r3, [r7, #112]	@ 0x70
 800465e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004660:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	1891      	adds	r1, r2, r2
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	415b      	adcs	r3, r3
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004674:	4641      	mov	r1, r8
 8004676:	1851      	adds	r1, r2, r1
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	4649      	mov	r1, r9
 800467c:	414b      	adcs	r3, r1
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800468c:	4659      	mov	r1, fp
 800468e:	00cb      	lsls	r3, r1, #3
 8004690:	4651      	mov	r1, sl
 8004692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004696:	4651      	mov	r1, sl
 8004698:	00ca      	lsls	r2, r1, #3
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	4642      	mov	r2, r8
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046a6:	464b      	mov	r3, r9
 80046a8:	460a      	mov	r2, r1
 80046aa:	eb42 0303 	adc.w	r3, r2, r3
 80046ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046c8:	4649      	mov	r1, r9
 80046ca:	008b      	lsls	r3, r1, #2
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d2:	4641      	mov	r1, r8
 80046d4:	008a      	lsls	r2, r1, #2
 80046d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046da:	f7fb fe09 	bl	80002f0 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004718 <UART_SetConfig+0x504>)
 80046e4:	fba3 1302 	umull	r1, r3, r3, r2
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	2164      	movs	r1, #100	@ 0x64
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	3332      	adds	r3, #50	@ 0x32
 80046f6:	4a08      	ldr	r2, [pc, #32]	@ (8004718 <UART_SetConfig+0x504>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	f003 020f 	and.w	r2, r3, #15
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4422      	add	r2, r4
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004712:	46bd      	mov	sp, r7
 8004714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004718:	51eb851f 	.word	0x51eb851f

0800471c <sniprintf>:
 800471c:	b40c      	push	{r2, r3}
 800471e:	b530      	push	{r4, r5, lr}
 8004720:	4b17      	ldr	r3, [pc, #92]	@ (8004780 <sniprintf+0x64>)
 8004722:	1e0c      	subs	r4, r1, #0
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	b09d      	sub	sp, #116	@ 0x74
 8004728:	da08      	bge.n	800473c <sniprintf+0x20>
 800472a:	238b      	movs	r3, #139	@ 0x8b
 800472c:	602b      	str	r3, [r5, #0]
 800472e:	f04f 30ff 	mov.w	r0, #4294967295
 8004732:	b01d      	add	sp, #116	@ 0x74
 8004734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004738:	b002      	add	sp, #8
 800473a:	4770      	bx	lr
 800473c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004740:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004744:	bf14      	ite	ne
 8004746:	f104 33ff 	addne.w	r3, r4, #4294967295
 800474a:	4623      	moveq	r3, r4
 800474c:	9304      	str	r3, [sp, #16]
 800474e:	9307      	str	r3, [sp, #28]
 8004750:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004754:	9002      	str	r0, [sp, #8]
 8004756:	9006      	str	r0, [sp, #24]
 8004758:	f8ad 3016 	strh.w	r3, [sp, #22]
 800475c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800475e:	ab21      	add	r3, sp, #132	@ 0x84
 8004760:	a902      	add	r1, sp, #8
 8004762:	4628      	mov	r0, r5
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	f000 f9bd 	bl	8004ae4 <_svfiprintf_r>
 800476a:	1c43      	adds	r3, r0, #1
 800476c:	bfbc      	itt	lt
 800476e:	238b      	movlt	r3, #139	@ 0x8b
 8004770:	602b      	strlt	r3, [r5, #0]
 8004772:	2c00      	cmp	r4, #0
 8004774:	d0dd      	beq.n	8004732 <sniprintf+0x16>
 8004776:	9b02      	ldr	r3, [sp, #8]
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	e7d9      	b.n	8004732 <sniprintf+0x16>
 800477e:	bf00      	nop
 8004780:	20000050 	.word	0x20000050

08004784 <siprintf>:
 8004784:	b40e      	push	{r1, r2, r3}
 8004786:	b500      	push	{lr}
 8004788:	b09c      	sub	sp, #112	@ 0x70
 800478a:	ab1d      	add	r3, sp, #116	@ 0x74
 800478c:	9002      	str	r0, [sp, #8]
 800478e:	9006      	str	r0, [sp, #24]
 8004790:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004794:	4809      	ldr	r0, [pc, #36]	@ (80047bc <siprintf+0x38>)
 8004796:	9107      	str	r1, [sp, #28]
 8004798:	9104      	str	r1, [sp, #16]
 800479a:	4909      	ldr	r1, [pc, #36]	@ (80047c0 <siprintf+0x3c>)
 800479c:	f853 2b04 	ldr.w	r2, [r3], #4
 80047a0:	9105      	str	r1, [sp, #20]
 80047a2:	6800      	ldr	r0, [r0, #0]
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	a902      	add	r1, sp, #8
 80047a8:	f000 f99c 	bl	8004ae4 <_svfiprintf_r>
 80047ac:	9b02      	ldr	r3, [sp, #8]
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	b01c      	add	sp, #112	@ 0x70
 80047b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047b8:	b003      	add	sp, #12
 80047ba:	4770      	bx	lr
 80047bc:	20000050 	.word	0x20000050
 80047c0:	ffff0208 	.word	0xffff0208

080047c4 <memset>:
 80047c4:	4402      	add	r2, r0
 80047c6:	4603      	mov	r3, r0
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d100      	bne.n	80047ce <memset+0xa>
 80047cc:	4770      	bx	lr
 80047ce:	f803 1b01 	strb.w	r1, [r3], #1
 80047d2:	e7f9      	b.n	80047c8 <memset+0x4>

080047d4 <__errno>:
 80047d4:	4b01      	ldr	r3, [pc, #4]	@ (80047dc <__errno+0x8>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000050 	.word	0x20000050

080047e0 <__libc_init_array>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004818 <__libc_init_array+0x38>)
 80047e4:	4c0d      	ldr	r4, [pc, #52]	@ (800481c <__libc_init_array+0x3c>)
 80047e6:	1b64      	subs	r4, r4, r5
 80047e8:	10a4      	asrs	r4, r4, #2
 80047ea:	2600      	movs	r6, #0
 80047ec:	42a6      	cmp	r6, r4
 80047ee:	d109      	bne.n	8004804 <__libc_init_array+0x24>
 80047f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004820 <__libc_init_array+0x40>)
 80047f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004824 <__libc_init_array+0x44>)
 80047f4:	f000 fc6e 	bl	80050d4 <_init>
 80047f8:	1b64      	subs	r4, r4, r5
 80047fa:	10a4      	asrs	r4, r4, #2
 80047fc:	2600      	movs	r6, #0
 80047fe:	42a6      	cmp	r6, r4
 8004800:	d105      	bne.n	800480e <__libc_init_array+0x2e>
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	f855 3b04 	ldr.w	r3, [r5], #4
 8004808:	4798      	blx	r3
 800480a:	3601      	adds	r6, #1
 800480c:	e7ee      	b.n	80047ec <__libc_init_array+0xc>
 800480e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004812:	4798      	blx	r3
 8004814:	3601      	adds	r6, #1
 8004816:	e7f2      	b.n	80047fe <__libc_init_array+0x1e>
 8004818:	080053e0 	.word	0x080053e0
 800481c:	080053e0 	.word	0x080053e0
 8004820:	080053e0 	.word	0x080053e0
 8004824:	080053e4 	.word	0x080053e4

08004828 <__retarget_lock_acquire_recursive>:
 8004828:	4770      	bx	lr

0800482a <__retarget_lock_release_recursive>:
 800482a:	4770      	bx	lr

0800482c <strcpy>:
 800482c:	4603      	mov	r3, r0
 800482e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004832:	f803 2b01 	strb.w	r2, [r3], #1
 8004836:	2a00      	cmp	r2, #0
 8004838:	d1f9      	bne.n	800482e <strcpy+0x2>
 800483a:	4770      	bx	lr

0800483c <_free_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4605      	mov	r5, r0
 8004840:	2900      	cmp	r1, #0
 8004842:	d041      	beq.n	80048c8 <_free_r+0x8c>
 8004844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004848:	1f0c      	subs	r4, r1, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	bfb8      	it	lt
 800484e:	18e4      	addlt	r4, r4, r3
 8004850:	f000 f8e0 	bl	8004a14 <__malloc_lock>
 8004854:	4a1d      	ldr	r2, [pc, #116]	@ (80048cc <_free_r+0x90>)
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	b933      	cbnz	r3, 8004868 <_free_r+0x2c>
 800485a:	6063      	str	r3, [r4, #4]
 800485c:	6014      	str	r4, [r2, #0]
 800485e:	4628      	mov	r0, r5
 8004860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004864:	f000 b8dc 	b.w	8004a20 <__malloc_unlock>
 8004868:	42a3      	cmp	r3, r4
 800486a:	d908      	bls.n	800487e <_free_r+0x42>
 800486c:	6820      	ldr	r0, [r4, #0]
 800486e:	1821      	adds	r1, r4, r0
 8004870:	428b      	cmp	r3, r1
 8004872:	bf01      	itttt	eq
 8004874:	6819      	ldreq	r1, [r3, #0]
 8004876:	685b      	ldreq	r3, [r3, #4]
 8004878:	1809      	addeq	r1, r1, r0
 800487a:	6021      	streq	r1, [r4, #0]
 800487c:	e7ed      	b.n	800485a <_free_r+0x1e>
 800487e:	461a      	mov	r2, r3
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	b10b      	cbz	r3, 8004888 <_free_r+0x4c>
 8004884:	42a3      	cmp	r3, r4
 8004886:	d9fa      	bls.n	800487e <_free_r+0x42>
 8004888:	6811      	ldr	r1, [r2, #0]
 800488a:	1850      	adds	r0, r2, r1
 800488c:	42a0      	cmp	r0, r4
 800488e:	d10b      	bne.n	80048a8 <_free_r+0x6c>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	4401      	add	r1, r0
 8004894:	1850      	adds	r0, r2, r1
 8004896:	4283      	cmp	r3, r0
 8004898:	6011      	str	r1, [r2, #0]
 800489a:	d1e0      	bne.n	800485e <_free_r+0x22>
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	6053      	str	r3, [r2, #4]
 80048a2:	4408      	add	r0, r1
 80048a4:	6010      	str	r0, [r2, #0]
 80048a6:	e7da      	b.n	800485e <_free_r+0x22>
 80048a8:	d902      	bls.n	80048b0 <_free_r+0x74>
 80048aa:	230c      	movs	r3, #12
 80048ac:	602b      	str	r3, [r5, #0]
 80048ae:	e7d6      	b.n	800485e <_free_r+0x22>
 80048b0:	6820      	ldr	r0, [r4, #0]
 80048b2:	1821      	adds	r1, r4, r0
 80048b4:	428b      	cmp	r3, r1
 80048b6:	bf04      	itt	eq
 80048b8:	6819      	ldreq	r1, [r3, #0]
 80048ba:	685b      	ldreq	r3, [r3, #4]
 80048bc:	6063      	str	r3, [r4, #4]
 80048be:	bf04      	itt	eq
 80048c0:	1809      	addeq	r1, r1, r0
 80048c2:	6021      	streq	r1, [r4, #0]
 80048c4:	6054      	str	r4, [r2, #4]
 80048c6:	e7ca      	b.n	800485e <_free_r+0x22>
 80048c8:	bd38      	pop	{r3, r4, r5, pc}
 80048ca:	bf00      	nop
 80048cc:	2000030c 	.word	0x2000030c

080048d0 <sbrk_aligned>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	4e0f      	ldr	r6, [pc, #60]	@ (8004910 <sbrk_aligned+0x40>)
 80048d4:	460c      	mov	r4, r1
 80048d6:	6831      	ldr	r1, [r6, #0]
 80048d8:	4605      	mov	r5, r0
 80048da:	b911      	cbnz	r1, 80048e2 <sbrk_aligned+0x12>
 80048dc:	f000 fba6 	bl	800502c <_sbrk_r>
 80048e0:	6030      	str	r0, [r6, #0]
 80048e2:	4621      	mov	r1, r4
 80048e4:	4628      	mov	r0, r5
 80048e6:	f000 fba1 	bl	800502c <_sbrk_r>
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	d103      	bne.n	80048f6 <sbrk_aligned+0x26>
 80048ee:	f04f 34ff 	mov.w	r4, #4294967295
 80048f2:	4620      	mov	r0, r4
 80048f4:	bd70      	pop	{r4, r5, r6, pc}
 80048f6:	1cc4      	adds	r4, r0, #3
 80048f8:	f024 0403 	bic.w	r4, r4, #3
 80048fc:	42a0      	cmp	r0, r4
 80048fe:	d0f8      	beq.n	80048f2 <sbrk_aligned+0x22>
 8004900:	1a21      	subs	r1, r4, r0
 8004902:	4628      	mov	r0, r5
 8004904:	f000 fb92 	bl	800502c <_sbrk_r>
 8004908:	3001      	adds	r0, #1
 800490a:	d1f2      	bne.n	80048f2 <sbrk_aligned+0x22>
 800490c:	e7ef      	b.n	80048ee <sbrk_aligned+0x1e>
 800490e:	bf00      	nop
 8004910:	20000308 	.word	0x20000308

08004914 <_malloc_r>:
 8004914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004918:	1ccd      	adds	r5, r1, #3
 800491a:	f025 0503 	bic.w	r5, r5, #3
 800491e:	3508      	adds	r5, #8
 8004920:	2d0c      	cmp	r5, #12
 8004922:	bf38      	it	cc
 8004924:	250c      	movcc	r5, #12
 8004926:	2d00      	cmp	r5, #0
 8004928:	4606      	mov	r6, r0
 800492a:	db01      	blt.n	8004930 <_malloc_r+0x1c>
 800492c:	42a9      	cmp	r1, r5
 800492e:	d904      	bls.n	800493a <_malloc_r+0x26>
 8004930:	230c      	movs	r3, #12
 8004932:	6033      	str	r3, [r6, #0]
 8004934:	2000      	movs	r0, #0
 8004936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800493a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a10 <_malloc_r+0xfc>
 800493e:	f000 f869 	bl	8004a14 <__malloc_lock>
 8004942:	f8d8 3000 	ldr.w	r3, [r8]
 8004946:	461c      	mov	r4, r3
 8004948:	bb44      	cbnz	r4, 800499c <_malloc_r+0x88>
 800494a:	4629      	mov	r1, r5
 800494c:	4630      	mov	r0, r6
 800494e:	f7ff ffbf 	bl	80048d0 <sbrk_aligned>
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	4604      	mov	r4, r0
 8004956:	d158      	bne.n	8004a0a <_malloc_r+0xf6>
 8004958:	f8d8 4000 	ldr.w	r4, [r8]
 800495c:	4627      	mov	r7, r4
 800495e:	2f00      	cmp	r7, #0
 8004960:	d143      	bne.n	80049ea <_malloc_r+0xd6>
 8004962:	2c00      	cmp	r4, #0
 8004964:	d04b      	beq.n	80049fe <_malloc_r+0xea>
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	4639      	mov	r1, r7
 800496a:	4630      	mov	r0, r6
 800496c:	eb04 0903 	add.w	r9, r4, r3
 8004970:	f000 fb5c 	bl	800502c <_sbrk_r>
 8004974:	4581      	cmp	r9, r0
 8004976:	d142      	bne.n	80049fe <_malloc_r+0xea>
 8004978:	6821      	ldr	r1, [r4, #0]
 800497a:	1a6d      	subs	r5, r5, r1
 800497c:	4629      	mov	r1, r5
 800497e:	4630      	mov	r0, r6
 8004980:	f7ff ffa6 	bl	80048d0 <sbrk_aligned>
 8004984:	3001      	adds	r0, #1
 8004986:	d03a      	beq.n	80049fe <_malloc_r+0xea>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	442b      	add	r3, r5
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	f8d8 3000 	ldr.w	r3, [r8]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	bb62      	cbnz	r2, 80049f0 <_malloc_r+0xdc>
 8004996:	f8c8 7000 	str.w	r7, [r8]
 800499a:	e00f      	b.n	80049bc <_malloc_r+0xa8>
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	1b52      	subs	r2, r2, r5
 80049a0:	d420      	bmi.n	80049e4 <_malloc_r+0xd0>
 80049a2:	2a0b      	cmp	r2, #11
 80049a4:	d917      	bls.n	80049d6 <_malloc_r+0xc2>
 80049a6:	1961      	adds	r1, r4, r5
 80049a8:	42a3      	cmp	r3, r4
 80049aa:	6025      	str	r5, [r4, #0]
 80049ac:	bf18      	it	ne
 80049ae:	6059      	strne	r1, [r3, #4]
 80049b0:	6863      	ldr	r3, [r4, #4]
 80049b2:	bf08      	it	eq
 80049b4:	f8c8 1000 	streq.w	r1, [r8]
 80049b8:	5162      	str	r2, [r4, r5]
 80049ba:	604b      	str	r3, [r1, #4]
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 f82f 	bl	8004a20 <__malloc_unlock>
 80049c2:	f104 000b 	add.w	r0, r4, #11
 80049c6:	1d23      	adds	r3, r4, #4
 80049c8:	f020 0007 	bic.w	r0, r0, #7
 80049cc:	1ac2      	subs	r2, r0, r3
 80049ce:	bf1c      	itt	ne
 80049d0:	1a1b      	subne	r3, r3, r0
 80049d2:	50a3      	strne	r3, [r4, r2]
 80049d4:	e7af      	b.n	8004936 <_malloc_r+0x22>
 80049d6:	6862      	ldr	r2, [r4, #4]
 80049d8:	42a3      	cmp	r3, r4
 80049da:	bf0c      	ite	eq
 80049dc:	f8c8 2000 	streq.w	r2, [r8]
 80049e0:	605a      	strne	r2, [r3, #4]
 80049e2:	e7eb      	b.n	80049bc <_malloc_r+0xa8>
 80049e4:	4623      	mov	r3, r4
 80049e6:	6864      	ldr	r4, [r4, #4]
 80049e8:	e7ae      	b.n	8004948 <_malloc_r+0x34>
 80049ea:	463c      	mov	r4, r7
 80049ec:	687f      	ldr	r7, [r7, #4]
 80049ee:	e7b6      	b.n	800495e <_malloc_r+0x4a>
 80049f0:	461a      	mov	r2, r3
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	42a3      	cmp	r3, r4
 80049f6:	d1fb      	bne.n	80049f0 <_malloc_r+0xdc>
 80049f8:	2300      	movs	r3, #0
 80049fa:	6053      	str	r3, [r2, #4]
 80049fc:	e7de      	b.n	80049bc <_malloc_r+0xa8>
 80049fe:	230c      	movs	r3, #12
 8004a00:	6033      	str	r3, [r6, #0]
 8004a02:	4630      	mov	r0, r6
 8004a04:	f000 f80c 	bl	8004a20 <__malloc_unlock>
 8004a08:	e794      	b.n	8004934 <_malloc_r+0x20>
 8004a0a:	6005      	str	r5, [r0, #0]
 8004a0c:	e7d6      	b.n	80049bc <_malloc_r+0xa8>
 8004a0e:	bf00      	nop
 8004a10:	2000030c 	.word	0x2000030c

08004a14 <__malloc_lock>:
 8004a14:	4801      	ldr	r0, [pc, #4]	@ (8004a1c <__malloc_lock+0x8>)
 8004a16:	f7ff bf07 	b.w	8004828 <__retarget_lock_acquire_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	20000304 	.word	0x20000304

08004a20 <__malloc_unlock>:
 8004a20:	4801      	ldr	r0, [pc, #4]	@ (8004a28 <__malloc_unlock+0x8>)
 8004a22:	f7ff bf02 	b.w	800482a <__retarget_lock_release_recursive>
 8004a26:	bf00      	nop
 8004a28:	20000304 	.word	0x20000304

08004a2c <__ssputs_r>:
 8004a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a30:	688e      	ldr	r6, [r1, #8]
 8004a32:	461f      	mov	r7, r3
 8004a34:	42be      	cmp	r6, r7
 8004a36:	680b      	ldr	r3, [r1, #0]
 8004a38:	4682      	mov	sl, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	4690      	mov	r8, r2
 8004a3e:	d82d      	bhi.n	8004a9c <__ssputs_r+0x70>
 8004a40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a48:	d026      	beq.n	8004a98 <__ssputs_r+0x6c>
 8004a4a:	6965      	ldr	r5, [r4, #20]
 8004a4c:	6909      	ldr	r1, [r1, #16]
 8004a4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a52:	eba3 0901 	sub.w	r9, r3, r1
 8004a56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a5a:	1c7b      	adds	r3, r7, #1
 8004a5c:	444b      	add	r3, r9
 8004a5e:	106d      	asrs	r5, r5, #1
 8004a60:	429d      	cmp	r5, r3
 8004a62:	bf38      	it	cc
 8004a64:	461d      	movcc	r5, r3
 8004a66:	0553      	lsls	r3, r2, #21
 8004a68:	d527      	bpl.n	8004aba <__ssputs_r+0x8e>
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	f7ff ff52 	bl	8004914 <_malloc_r>
 8004a70:	4606      	mov	r6, r0
 8004a72:	b360      	cbz	r0, 8004ace <__ssputs_r+0xa2>
 8004a74:	6921      	ldr	r1, [r4, #16]
 8004a76:	464a      	mov	r2, r9
 8004a78:	f000 fae8 	bl	800504c <memcpy>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a86:	81a3      	strh	r3, [r4, #12]
 8004a88:	6126      	str	r6, [r4, #16]
 8004a8a:	6165      	str	r5, [r4, #20]
 8004a8c:	444e      	add	r6, r9
 8004a8e:	eba5 0509 	sub.w	r5, r5, r9
 8004a92:	6026      	str	r6, [r4, #0]
 8004a94:	60a5      	str	r5, [r4, #8]
 8004a96:	463e      	mov	r6, r7
 8004a98:	42be      	cmp	r6, r7
 8004a9a:	d900      	bls.n	8004a9e <__ssputs_r+0x72>
 8004a9c:	463e      	mov	r6, r7
 8004a9e:	6820      	ldr	r0, [r4, #0]
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	4641      	mov	r1, r8
 8004aa4:	f000 faa8 	bl	8004ff8 <memmove>
 8004aa8:	68a3      	ldr	r3, [r4, #8]
 8004aaa:	1b9b      	subs	r3, r3, r6
 8004aac:	60a3      	str	r3, [r4, #8]
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	4433      	add	r3, r6
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aba:	462a      	mov	r2, r5
 8004abc:	f000 fad4 	bl	8005068 <_realloc_r>
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d1e0      	bne.n	8004a88 <__ssputs_r+0x5c>
 8004ac6:	6921      	ldr	r1, [r4, #16]
 8004ac8:	4650      	mov	r0, sl
 8004aca:	f7ff feb7 	bl	800483c <_free_r>
 8004ace:	230c      	movs	r3, #12
 8004ad0:	f8ca 3000 	str.w	r3, [sl]
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	e7e9      	b.n	8004ab6 <__ssputs_r+0x8a>
	...

08004ae4 <_svfiprintf_r>:
 8004ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae8:	4698      	mov	r8, r3
 8004aea:	898b      	ldrh	r3, [r1, #12]
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	b09d      	sub	sp, #116	@ 0x74
 8004af0:	4607      	mov	r7, r0
 8004af2:	460d      	mov	r5, r1
 8004af4:	4614      	mov	r4, r2
 8004af6:	d510      	bpl.n	8004b1a <_svfiprintf_r+0x36>
 8004af8:	690b      	ldr	r3, [r1, #16]
 8004afa:	b973      	cbnz	r3, 8004b1a <_svfiprintf_r+0x36>
 8004afc:	2140      	movs	r1, #64	@ 0x40
 8004afe:	f7ff ff09 	bl	8004914 <_malloc_r>
 8004b02:	6028      	str	r0, [r5, #0]
 8004b04:	6128      	str	r0, [r5, #16]
 8004b06:	b930      	cbnz	r0, 8004b16 <_svfiprintf_r+0x32>
 8004b08:	230c      	movs	r3, #12
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	b01d      	add	sp, #116	@ 0x74
 8004b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b16:	2340      	movs	r3, #64	@ 0x40
 8004b18:	616b      	str	r3, [r5, #20]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b1e:	2320      	movs	r3, #32
 8004b20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b28:	2330      	movs	r3, #48	@ 0x30
 8004b2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004cc8 <_svfiprintf_r+0x1e4>
 8004b2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b32:	f04f 0901 	mov.w	r9, #1
 8004b36:	4623      	mov	r3, r4
 8004b38:	469a      	mov	sl, r3
 8004b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b3e:	b10a      	cbz	r2, 8004b44 <_svfiprintf_r+0x60>
 8004b40:	2a25      	cmp	r2, #37	@ 0x25
 8004b42:	d1f9      	bne.n	8004b38 <_svfiprintf_r+0x54>
 8004b44:	ebba 0b04 	subs.w	fp, sl, r4
 8004b48:	d00b      	beq.n	8004b62 <_svfiprintf_r+0x7e>
 8004b4a:	465b      	mov	r3, fp
 8004b4c:	4622      	mov	r2, r4
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4638      	mov	r0, r7
 8004b52:	f7ff ff6b 	bl	8004a2c <__ssputs_r>
 8004b56:	3001      	adds	r0, #1
 8004b58:	f000 80a7 	beq.w	8004caa <_svfiprintf_r+0x1c6>
 8004b5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b5e:	445a      	add	r2, fp
 8004b60:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b62:	f89a 3000 	ldrb.w	r3, [sl]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 809f 	beq.w	8004caa <_svfiprintf_r+0x1c6>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b76:	f10a 0a01 	add.w	sl, sl, #1
 8004b7a:	9304      	str	r3, [sp, #16]
 8004b7c:	9307      	str	r3, [sp, #28]
 8004b7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b82:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b84:	4654      	mov	r4, sl
 8004b86:	2205      	movs	r2, #5
 8004b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b8c:	484e      	ldr	r0, [pc, #312]	@ (8004cc8 <_svfiprintf_r+0x1e4>)
 8004b8e:	f7fb fb5f 	bl	8000250 <memchr>
 8004b92:	9a04      	ldr	r2, [sp, #16]
 8004b94:	b9d8      	cbnz	r0, 8004bce <_svfiprintf_r+0xea>
 8004b96:	06d0      	lsls	r0, r2, #27
 8004b98:	bf44      	itt	mi
 8004b9a:	2320      	movmi	r3, #32
 8004b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ba0:	0711      	lsls	r1, r2, #28
 8004ba2:	bf44      	itt	mi
 8004ba4:	232b      	movmi	r3, #43	@ 0x2b
 8004ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004baa:	f89a 3000 	ldrb.w	r3, [sl]
 8004bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bb0:	d015      	beq.n	8004bde <_svfiprintf_r+0xfa>
 8004bb2:	9a07      	ldr	r2, [sp, #28]
 8004bb4:	4654      	mov	r4, sl
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f04f 0c0a 	mov.w	ip, #10
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bc2:	3b30      	subs	r3, #48	@ 0x30
 8004bc4:	2b09      	cmp	r3, #9
 8004bc6:	d94b      	bls.n	8004c60 <_svfiprintf_r+0x17c>
 8004bc8:	b1b0      	cbz	r0, 8004bf8 <_svfiprintf_r+0x114>
 8004bca:	9207      	str	r2, [sp, #28]
 8004bcc:	e014      	b.n	8004bf8 <_svfiprintf_r+0x114>
 8004bce:	eba0 0308 	sub.w	r3, r0, r8
 8004bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	9304      	str	r3, [sp, #16]
 8004bda:	46a2      	mov	sl, r4
 8004bdc:	e7d2      	b.n	8004b84 <_svfiprintf_r+0xa0>
 8004bde:	9b03      	ldr	r3, [sp, #12]
 8004be0:	1d19      	adds	r1, r3, #4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	9103      	str	r1, [sp, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bfbb      	ittet	lt
 8004bea:	425b      	neglt	r3, r3
 8004bec:	f042 0202 	orrlt.w	r2, r2, #2
 8004bf0:	9307      	strge	r3, [sp, #28]
 8004bf2:	9307      	strlt	r3, [sp, #28]
 8004bf4:	bfb8      	it	lt
 8004bf6:	9204      	strlt	r2, [sp, #16]
 8004bf8:	7823      	ldrb	r3, [r4, #0]
 8004bfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bfc:	d10a      	bne.n	8004c14 <_svfiprintf_r+0x130>
 8004bfe:	7863      	ldrb	r3, [r4, #1]
 8004c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c02:	d132      	bne.n	8004c6a <_svfiprintf_r+0x186>
 8004c04:	9b03      	ldr	r3, [sp, #12]
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	9203      	str	r2, [sp, #12]
 8004c0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c10:	3402      	adds	r4, #2
 8004c12:	9305      	str	r3, [sp, #20]
 8004c14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004cd8 <_svfiprintf_r+0x1f4>
 8004c18:	7821      	ldrb	r1, [r4, #0]
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	4650      	mov	r0, sl
 8004c1e:	f7fb fb17 	bl	8000250 <memchr>
 8004c22:	b138      	cbz	r0, 8004c34 <_svfiprintf_r+0x150>
 8004c24:	9b04      	ldr	r3, [sp, #16]
 8004c26:	eba0 000a 	sub.w	r0, r0, sl
 8004c2a:	2240      	movs	r2, #64	@ 0x40
 8004c2c:	4082      	lsls	r2, r0
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	3401      	adds	r4, #1
 8004c32:	9304      	str	r3, [sp, #16]
 8004c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c38:	4824      	ldr	r0, [pc, #144]	@ (8004ccc <_svfiprintf_r+0x1e8>)
 8004c3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c3e:	2206      	movs	r2, #6
 8004c40:	f7fb fb06 	bl	8000250 <memchr>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d036      	beq.n	8004cb6 <_svfiprintf_r+0x1d2>
 8004c48:	4b21      	ldr	r3, [pc, #132]	@ (8004cd0 <_svfiprintf_r+0x1ec>)
 8004c4a:	bb1b      	cbnz	r3, 8004c94 <_svfiprintf_r+0x1b0>
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	3307      	adds	r3, #7
 8004c50:	f023 0307 	bic.w	r3, r3, #7
 8004c54:	3308      	adds	r3, #8
 8004c56:	9303      	str	r3, [sp, #12]
 8004c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c5a:	4433      	add	r3, r6
 8004c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c5e:	e76a      	b.n	8004b36 <_svfiprintf_r+0x52>
 8004c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c64:	460c      	mov	r4, r1
 8004c66:	2001      	movs	r0, #1
 8004c68:	e7a8      	b.n	8004bbc <_svfiprintf_r+0xd8>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	3401      	adds	r4, #1
 8004c6e:	9305      	str	r3, [sp, #20]
 8004c70:	4619      	mov	r1, r3
 8004c72:	f04f 0c0a 	mov.w	ip, #10
 8004c76:	4620      	mov	r0, r4
 8004c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c7c:	3a30      	subs	r2, #48	@ 0x30
 8004c7e:	2a09      	cmp	r2, #9
 8004c80:	d903      	bls.n	8004c8a <_svfiprintf_r+0x1a6>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0c6      	beq.n	8004c14 <_svfiprintf_r+0x130>
 8004c86:	9105      	str	r1, [sp, #20]
 8004c88:	e7c4      	b.n	8004c14 <_svfiprintf_r+0x130>
 8004c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c8e:	4604      	mov	r4, r0
 8004c90:	2301      	movs	r3, #1
 8004c92:	e7f0      	b.n	8004c76 <_svfiprintf_r+0x192>
 8004c94:	ab03      	add	r3, sp, #12
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	462a      	mov	r2, r5
 8004c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd4 <_svfiprintf_r+0x1f0>)
 8004c9c:	a904      	add	r1, sp, #16
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	f3af 8000 	nop.w
 8004ca4:	1c42      	adds	r2, r0, #1
 8004ca6:	4606      	mov	r6, r0
 8004ca8:	d1d6      	bne.n	8004c58 <_svfiprintf_r+0x174>
 8004caa:	89ab      	ldrh	r3, [r5, #12]
 8004cac:	065b      	lsls	r3, r3, #25
 8004cae:	f53f af2d 	bmi.w	8004b0c <_svfiprintf_r+0x28>
 8004cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cb4:	e72c      	b.n	8004b10 <_svfiprintf_r+0x2c>
 8004cb6:	ab03      	add	r3, sp, #12
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	462a      	mov	r2, r5
 8004cbc:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <_svfiprintf_r+0x1f0>)
 8004cbe:	a904      	add	r1, sp, #16
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f000 f879 	bl	8004db8 <_printf_i>
 8004cc6:	e7ed      	b.n	8004ca4 <_svfiprintf_r+0x1c0>
 8004cc8:	080053a4 	.word	0x080053a4
 8004ccc:	080053ae 	.word	0x080053ae
 8004cd0:	00000000 	.word	0x00000000
 8004cd4:	08004a2d 	.word	0x08004a2d
 8004cd8:	080053aa 	.word	0x080053aa

08004cdc <_printf_common>:
 8004cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce0:	4616      	mov	r6, r2
 8004ce2:	4698      	mov	r8, r3
 8004ce4:	688a      	ldr	r2, [r1, #8]
 8004ce6:	690b      	ldr	r3, [r1, #16]
 8004ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cec:	4293      	cmp	r3, r2
 8004cee:	bfb8      	it	lt
 8004cf0:	4613      	movlt	r3, r2
 8004cf2:	6033      	str	r3, [r6, #0]
 8004cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	b10a      	cbz	r2, 8004d02 <_printf_common+0x26>
 8004cfe:	3301      	adds	r3, #1
 8004d00:	6033      	str	r3, [r6, #0]
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	0699      	lsls	r1, r3, #26
 8004d06:	bf42      	ittt	mi
 8004d08:	6833      	ldrmi	r3, [r6, #0]
 8004d0a:	3302      	addmi	r3, #2
 8004d0c:	6033      	strmi	r3, [r6, #0]
 8004d0e:	6825      	ldr	r5, [r4, #0]
 8004d10:	f015 0506 	ands.w	r5, r5, #6
 8004d14:	d106      	bne.n	8004d24 <_printf_common+0x48>
 8004d16:	f104 0a19 	add.w	sl, r4, #25
 8004d1a:	68e3      	ldr	r3, [r4, #12]
 8004d1c:	6832      	ldr	r2, [r6, #0]
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	42ab      	cmp	r3, r5
 8004d22:	dc26      	bgt.n	8004d72 <_printf_common+0x96>
 8004d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d28:	6822      	ldr	r2, [r4, #0]
 8004d2a:	3b00      	subs	r3, #0
 8004d2c:	bf18      	it	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	0692      	lsls	r2, r2, #26
 8004d32:	d42b      	bmi.n	8004d8c <_printf_common+0xb0>
 8004d34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d38:	4641      	mov	r1, r8
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	47c8      	blx	r9
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d01e      	beq.n	8004d80 <_printf_common+0xa4>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	6922      	ldr	r2, [r4, #16]
 8004d46:	f003 0306 	and.w	r3, r3, #6
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	bf02      	ittt	eq
 8004d4e:	68e5      	ldreq	r5, [r4, #12]
 8004d50:	6833      	ldreq	r3, [r6, #0]
 8004d52:	1aed      	subeq	r5, r5, r3
 8004d54:	68a3      	ldr	r3, [r4, #8]
 8004d56:	bf0c      	ite	eq
 8004d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d5c:	2500      	movne	r5, #0
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	bfc4      	itt	gt
 8004d62:	1a9b      	subgt	r3, r3, r2
 8004d64:	18ed      	addgt	r5, r5, r3
 8004d66:	2600      	movs	r6, #0
 8004d68:	341a      	adds	r4, #26
 8004d6a:	42b5      	cmp	r5, r6
 8004d6c:	d11a      	bne.n	8004da4 <_printf_common+0xc8>
 8004d6e:	2000      	movs	r0, #0
 8004d70:	e008      	b.n	8004d84 <_printf_common+0xa8>
 8004d72:	2301      	movs	r3, #1
 8004d74:	4652      	mov	r2, sl
 8004d76:	4641      	mov	r1, r8
 8004d78:	4638      	mov	r0, r7
 8004d7a:	47c8      	blx	r9
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d103      	bne.n	8004d88 <_printf_common+0xac>
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295
 8004d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d88:	3501      	adds	r5, #1
 8004d8a:	e7c6      	b.n	8004d1a <_printf_common+0x3e>
 8004d8c:	18e1      	adds	r1, r4, r3
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	2030      	movs	r0, #48	@ 0x30
 8004d92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d96:	4422      	add	r2, r4
 8004d98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004da0:	3302      	adds	r3, #2
 8004da2:	e7c7      	b.n	8004d34 <_printf_common+0x58>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4622      	mov	r2, r4
 8004da8:	4641      	mov	r1, r8
 8004daa:	4638      	mov	r0, r7
 8004dac:	47c8      	blx	r9
 8004dae:	3001      	adds	r0, #1
 8004db0:	d0e6      	beq.n	8004d80 <_printf_common+0xa4>
 8004db2:	3601      	adds	r6, #1
 8004db4:	e7d9      	b.n	8004d6a <_printf_common+0x8e>
	...

08004db8 <_printf_i>:
 8004db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dbc:	7e0f      	ldrb	r7, [r1, #24]
 8004dbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dc0:	2f78      	cmp	r7, #120	@ 0x78
 8004dc2:	4691      	mov	r9, r2
 8004dc4:	4680      	mov	r8, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	469a      	mov	sl, r3
 8004dca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dce:	d807      	bhi.n	8004de0 <_printf_i+0x28>
 8004dd0:	2f62      	cmp	r7, #98	@ 0x62
 8004dd2:	d80a      	bhi.n	8004dea <_printf_i+0x32>
 8004dd4:	2f00      	cmp	r7, #0
 8004dd6:	f000 80d2 	beq.w	8004f7e <_printf_i+0x1c6>
 8004dda:	2f58      	cmp	r7, #88	@ 0x58
 8004ddc:	f000 80b9 	beq.w	8004f52 <_printf_i+0x19a>
 8004de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004de4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004de8:	e03a      	b.n	8004e60 <_printf_i+0xa8>
 8004dea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dee:	2b15      	cmp	r3, #21
 8004df0:	d8f6      	bhi.n	8004de0 <_printf_i+0x28>
 8004df2:	a101      	add	r1, pc, #4	@ (adr r1, 8004df8 <_printf_i+0x40>)
 8004df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004df8:	08004e51 	.word	0x08004e51
 8004dfc:	08004e65 	.word	0x08004e65
 8004e00:	08004de1 	.word	0x08004de1
 8004e04:	08004de1 	.word	0x08004de1
 8004e08:	08004de1 	.word	0x08004de1
 8004e0c:	08004de1 	.word	0x08004de1
 8004e10:	08004e65 	.word	0x08004e65
 8004e14:	08004de1 	.word	0x08004de1
 8004e18:	08004de1 	.word	0x08004de1
 8004e1c:	08004de1 	.word	0x08004de1
 8004e20:	08004de1 	.word	0x08004de1
 8004e24:	08004f65 	.word	0x08004f65
 8004e28:	08004e8f 	.word	0x08004e8f
 8004e2c:	08004f1f 	.word	0x08004f1f
 8004e30:	08004de1 	.word	0x08004de1
 8004e34:	08004de1 	.word	0x08004de1
 8004e38:	08004f87 	.word	0x08004f87
 8004e3c:	08004de1 	.word	0x08004de1
 8004e40:	08004e8f 	.word	0x08004e8f
 8004e44:	08004de1 	.word	0x08004de1
 8004e48:	08004de1 	.word	0x08004de1
 8004e4c:	08004f27 	.word	0x08004f27
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	1d1a      	adds	r2, r3, #4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6032      	str	r2, [r6, #0]
 8004e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e60:	2301      	movs	r3, #1
 8004e62:	e09d      	b.n	8004fa0 <_printf_i+0x1e8>
 8004e64:	6833      	ldr	r3, [r6, #0]
 8004e66:	6820      	ldr	r0, [r4, #0]
 8004e68:	1d19      	adds	r1, r3, #4
 8004e6a:	6031      	str	r1, [r6, #0]
 8004e6c:	0606      	lsls	r6, r0, #24
 8004e6e:	d501      	bpl.n	8004e74 <_printf_i+0xbc>
 8004e70:	681d      	ldr	r5, [r3, #0]
 8004e72:	e003      	b.n	8004e7c <_printf_i+0xc4>
 8004e74:	0645      	lsls	r5, r0, #25
 8004e76:	d5fb      	bpl.n	8004e70 <_printf_i+0xb8>
 8004e78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e7c:	2d00      	cmp	r5, #0
 8004e7e:	da03      	bge.n	8004e88 <_printf_i+0xd0>
 8004e80:	232d      	movs	r3, #45	@ 0x2d
 8004e82:	426d      	negs	r5, r5
 8004e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e88:	4859      	ldr	r0, [pc, #356]	@ (8004ff0 <_printf_i+0x238>)
 8004e8a:	230a      	movs	r3, #10
 8004e8c:	e011      	b.n	8004eb2 <_printf_i+0xfa>
 8004e8e:	6821      	ldr	r1, [r4, #0]
 8004e90:	6833      	ldr	r3, [r6, #0]
 8004e92:	0608      	lsls	r0, r1, #24
 8004e94:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e98:	d402      	bmi.n	8004ea0 <_printf_i+0xe8>
 8004e9a:	0649      	lsls	r1, r1, #25
 8004e9c:	bf48      	it	mi
 8004e9e:	b2ad      	uxthmi	r5, r5
 8004ea0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ea2:	4853      	ldr	r0, [pc, #332]	@ (8004ff0 <_printf_i+0x238>)
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	bf14      	ite	ne
 8004ea8:	230a      	movne	r3, #10
 8004eaa:	2308      	moveq	r3, #8
 8004eac:	2100      	movs	r1, #0
 8004eae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eb2:	6866      	ldr	r6, [r4, #4]
 8004eb4:	60a6      	str	r6, [r4, #8]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	bfa2      	ittt	ge
 8004eba:	6821      	ldrge	r1, [r4, #0]
 8004ebc:	f021 0104 	bicge.w	r1, r1, #4
 8004ec0:	6021      	strge	r1, [r4, #0]
 8004ec2:	b90d      	cbnz	r5, 8004ec8 <_printf_i+0x110>
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	d04b      	beq.n	8004f60 <_printf_i+0x1a8>
 8004ec8:	4616      	mov	r6, r2
 8004eca:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ece:	fb03 5711 	mls	r7, r3, r1, r5
 8004ed2:	5dc7      	ldrb	r7, [r0, r7]
 8004ed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ed8:	462f      	mov	r7, r5
 8004eda:	42bb      	cmp	r3, r7
 8004edc:	460d      	mov	r5, r1
 8004ede:	d9f4      	bls.n	8004eca <_printf_i+0x112>
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d10b      	bne.n	8004efc <_printf_i+0x144>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	07df      	lsls	r7, r3, #31
 8004ee8:	d508      	bpl.n	8004efc <_printf_i+0x144>
 8004eea:	6923      	ldr	r3, [r4, #16]
 8004eec:	6861      	ldr	r1, [r4, #4]
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	bfde      	ittt	le
 8004ef2:	2330      	movle	r3, #48	@ 0x30
 8004ef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004efc:	1b92      	subs	r2, r2, r6
 8004efe:	6122      	str	r2, [r4, #16]
 8004f00:	f8cd a000 	str.w	sl, [sp]
 8004f04:	464b      	mov	r3, r9
 8004f06:	aa03      	add	r2, sp, #12
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f7ff fee6 	bl	8004cdc <_printf_common>
 8004f10:	3001      	adds	r0, #1
 8004f12:	d14a      	bne.n	8004faa <_printf_i+0x1f2>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	b004      	add	sp, #16
 8004f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	f043 0320 	orr.w	r3, r3, #32
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	4833      	ldr	r0, [pc, #204]	@ (8004ff4 <_printf_i+0x23c>)
 8004f28:	2778      	movs	r7, #120	@ 0x78
 8004f2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	6831      	ldr	r1, [r6, #0]
 8004f32:	061f      	lsls	r7, r3, #24
 8004f34:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f38:	d402      	bmi.n	8004f40 <_printf_i+0x188>
 8004f3a:	065f      	lsls	r7, r3, #25
 8004f3c:	bf48      	it	mi
 8004f3e:	b2ad      	uxthmi	r5, r5
 8004f40:	6031      	str	r1, [r6, #0]
 8004f42:	07d9      	lsls	r1, r3, #31
 8004f44:	bf44      	itt	mi
 8004f46:	f043 0320 	orrmi.w	r3, r3, #32
 8004f4a:	6023      	strmi	r3, [r4, #0]
 8004f4c:	b11d      	cbz	r5, 8004f56 <_printf_i+0x19e>
 8004f4e:	2310      	movs	r3, #16
 8004f50:	e7ac      	b.n	8004eac <_printf_i+0xf4>
 8004f52:	4827      	ldr	r0, [pc, #156]	@ (8004ff0 <_printf_i+0x238>)
 8004f54:	e7e9      	b.n	8004f2a <_printf_i+0x172>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	f023 0320 	bic.w	r3, r3, #32
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	e7f6      	b.n	8004f4e <_printf_i+0x196>
 8004f60:	4616      	mov	r6, r2
 8004f62:	e7bd      	b.n	8004ee0 <_printf_i+0x128>
 8004f64:	6833      	ldr	r3, [r6, #0]
 8004f66:	6825      	ldr	r5, [r4, #0]
 8004f68:	6961      	ldr	r1, [r4, #20]
 8004f6a:	1d18      	adds	r0, r3, #4
 8004f6c:	6030      	str	r0, [r6, #0]
 8004f6e:	062e      	lsls	r6, r5, #24
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	d501      	bpl.n	8004f78 <_printf_i+0x1c0>
 8004f74:	6019      	str	r1, [r3, #0]
 8004f76:	e002      	b.n	8004f7e <_printf_i+0x1c6>
 8004f78:	0668      	lsls	r0, r5, #25
 8004f7a:	d5fb      	bpl.n	8004f74 <_printf_i+0x1bc>
 8004f7c:	8019      	strh	r1, [r3, #0]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	6123      	str	r3, [r4, #16]
 8004f82:	4616      	mov	r6, r2
 8004f84:	e7bc      	b.n	8004f00 <_printf_i+0x148>
 8004f86:	6833      	ldr	r3, [r6, #0]
 8004f88:	1d1a      	adds	r2, r3, #4
 8004f8a:	6032      	str	r2, [r6, #0]
 8004f8c:	681e      	ldr	r6, [r3, #0]
 8004f8e:	6862      	ldr	r2, [r4, #4]
 8004f90:	2100      	movs	r1, #0
 8004f92:	4630      	mov	r0, r6
 8004f94:	f7fb f95c 	bl	8000250 <memchr>
 8004f98:	b108      	cbz	r0, 8004f9e <_printf_i+0x1e6>
 8004f9a:	1b80      	subs	r0, r0, r6
 8004f9c:	6060      	str	r0, [r4, #4]
 8004f9e:	6863      	ldr	r3, [r4, #4]
 8004fa0:	6123      	str	r3, [r4, #16]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fa8:	e7aa      	b.n	8004f00 <_printf_i+0x148>
 8004faa:	6923      	ldr	r3, [r4, #16]
 8004fac:	4632      	mov	r2, r6
 8004fae:	4649      	mov	r1, r9
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	47d0      	blx	sl
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d0ad      	beq.n	8004f14 <_printf_i+0x15c>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	079b      	lsls	r3, r3, #30
 8004fbc:	d413      	bmi.n	8004fe6 <_printf_i+0x22e>
 8004fbe:	68e0      	ldr	r0, [r4, #12]
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	4298      	cmp	r0, r3
 8004fc4:	bfb8      	it	lt
 8004fc6:	4618      	movlt	r0, r3
 8004fc8:	e7a6      	b.n	8004f18 <_printf_i+0x160>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	4632      	mov	r2, r6
 8004fce:	4649      	mov	r1, r9
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	47d0      	blx	sl
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d09d      	beq.n	8004f14 <_printf_i+0x15c>
 8004fd8:	3501      	adds	r5, #1
 8004fda:	68e3      	ldr	r3, [r4, #12]
 8004fdc:	9903      	ldr	r1, [sp, #12]
 8004fde:	1a5b      	subs	r3, r3, r1
 8004fe0:	42ab      	cmp	r3, r5
 8004fe2:	dcf2      	bgt.n	8004fca <_printf_i+0x212>
 8004fe4:	e7eb      	b.n	8004fbe <_printf_i+0x206>
 8004fe6:	2500      	movs	r5, #0
 8004fe8:	f104 0619 	add.w	r6, r4, #25
 8004fec:	e7f5      	b.n	8004fda <_printf_i+0x222>
 8004fee:	bf00      	nop
 8004ff0:	080053b5 	.word	0x080053b5
 8004ff4:	080053c6 	.word	0x080053c6

08004ff8 <memmove>:
 8004ff8:	4288      	cmp	r0, r1
 8004ffa:	b510      	push	{r4, lr}
 8004ffc:	eb01 0402 	add.w	r4, r1, r2
 8005000:	d902      	bls.n	8005008 <memmove+0x10>
 8005002:	4284      	cmp	r4, r0
 8005004:	4623      	mov	r3, r4
 8005006:	d807      	bhi.n	8005018 <memmove+0x20>
 8005008:	1e43      	subs	r3, r0, #1
 800500a:	42a1      	cmp	r1, r4
 800500c:	d008      	beq.n	8005020 <memmove+0x28>
 800500e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005016:	e7f8      	b.n	800500a <memmove+0x12>
 8005018:	4402      	add	r2, r0
 800501a:	4601      	mov	r1, r0
 800501c:	428a      	cmp	r2, r1
 800501e:	d100      	bne.n	8005022 <memmove+0x2a>
 8005020:	bd10      	pop	{r4, pc}
 8005022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800502a:	e7f7      	b.n	800501c <memmove+0x24>

0800502c <_sbrk_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4d06      	ldr	r5, [pc, #24]	@ (8005048 <_sbrk_r+0x1c>)
 8005030:	2300      	movs	r3, #0
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	f7fc f9ea 	bl	8001410 <_sbrk>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d102      	bne.n	8005046 <_sbrk_r+0x1a>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	b103      	cbz	r3, 8005046 <_sbrk_r+0x1a>
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	20000300 	.word	0x20000300

0800504c <memcpy>:
 800504c:	440a      	add	r2, r1
 800504e:	4291      	cmp	r1, r2
 8005050:	f100 33ff 	add.w	r3, r0, #4294967295
 8005054:	d100      	bne.n	8005058 <memcpy+0xc>
 8005056:	4770      	bx	lr
 8005058:	b510      	push	{r4, lr}
 800505a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800505e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005062:	4291      	cmp	r1, r2
 8005064:	d1f9      	bne.n	800505a <memcpy+0xe>
 8005066:	bd10      	pop	{r4, pc}

08005068 <_realloc_r>:
 8005068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800506c:	4680      	mov	r8, r0
 800506e:	4615      	mov	r5, r2
 8005070:	460c      	mov	r4, r1
 8005072:	b921      	cbnz	r1, 800507e <_realloc_r+0x16>
 8005074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005078:	4611      	mov	r1, r2
 800507a:	f7ff bc4b 	b.w	8004914 <_malloc_r>
 800507e:	b92a      	cbnz	r2, 800508c <_realloc_r+0x24>
 8005080:	f7ff fbdc 	bl	800483c <_free_r>
 8005084:	2400      	movs	r4, #0
 8005086:	4620      	mov	r0, r4
 8005088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800508c:	f000 f81a 	bl	80050c4 <_malloc_usable_size_r>
 8005090:	4285      	cmp	r5, r0
 8005092:	4606      	mov	r6, r0
 8005094:	d802      	bhi.n	800509c <_realloc_r+0x34>
 8005096:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800509a:	d8f4      	bhi.n	8005086 <_realloc_r+0x1e>
 800509c:	4629      	mov	r1, r5
 800509e:	4640      	mov	r0, r8
 80050a0:	f7ff fc38 	bl	8004914 <_malloc_r>
 80050a4:	4607      	mov	r7, r0
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d0ec      	beq.n	8005084 <_realloc_r+0x1c>
 80050aa:	42b5      	cmp	r5, r6
 80050ac:	462a      	mov	r2, r5
 80050ae:	4621      	mov	r1, r4
 80050b0:	bf28      	it	cs
 80050b2:	4632      	movcs	r2, r6
 80050b4:	f7ff ffca 	bl	800504c <memcpy>
 80050b8:	4621      	mov	r1, r4
 80050ba:	4640      	mov	r0, r8
 80050bc:	f7ff fbbe 	bl	800483c <_free_r>
 80050c0:	463c      	mov	r4, r7
 80050c2:	e7e0      	b.n	8005086 <_realloc_r+0x1e>

080050c4 <_malloc_usable_size_r>:
 80050c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c8:	1f18      	subs	r0, r3, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bfbc      	itt	lt
 80050ce:	580b      	ldrlt	r3, [r1, r0]
 80050d0:	18c0      	addlt	r0, r0, r3
 80050d2:	4770      	bx	lr

080050d4 <_init>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr

080050e0 <_fini>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr
