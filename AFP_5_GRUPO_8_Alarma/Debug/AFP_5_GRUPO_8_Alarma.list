
AFP_5_GRUPO_8_Alarma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004588  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08004768  08004768  00005768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a44  08004a44  000060a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004a44  08004a44  00005a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a4c  08004a4c  000060a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a50  08004a50  00005a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08004a54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200000a0  08004af4  000060a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08004af4  000062fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caa8  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a7  00000000  00000000  00012b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00014e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c0  00000000  00000000  00015970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217aa  00000000  00000000  00016230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010061  00000000  00000000  000379da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8873  00000000  00000000  00047a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001102ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000334c  00000000  00000000  001102f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00113640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004750 	.word	0x08004750

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	08004750 	.word	0x08004750

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 fae4 	bl	8001bb0 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_GPIO_Init();
 80005e8:	f000 ffda 	bl	80015a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 ff30 	bl	8001450 <MX_USART2_UART_Init>
  keypad_init();
 80005f0:	f001 f914 	bl	800181c <keypad_init>

  BT_Test();
 80005f4:	f000 ff6c 	bl	80014d0 <BT_Test>

  MX_I2C2_Init();
 80005f8:	f001 faac 	bl	8001b54 <MX_I2C2_Init>
  HAL_Delay(30);
 80005fc:	201e      	movs	r0, #30
 80005fe:	f001 fb49 	bl	8001c94 <HAL_Delay>
  lcd_init();
 8000602:	f001 f9d3 	bl	80019ac <lcd_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  DisplayMainMenu();
 8000606:	f000 f84d 	bl	80006a4 <DisplayMainMenu>
  delayInit(&DelayGRAL_1,20000);
 800060a:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800060e:	481f      	ldr	r0, [pc, #124]	@ (800068c <main+0xac>)
 8000610:	f000 ff88 	bl	8001524 <delayInit>
  delayInit(&DelayGRAL_2,10000);
 8000614:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000618:	481d      	ldr	r0, [pc, #116]	@ (8000690 <main+0xb0>)
 800061a:	f000 ff83 	bl	8001524 <delayInit>
  delayInit(&LCD_Muestro,2000);
 800061e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000622:	481c      	ldr	r0, [pc, #112]	@ (8000694 <main+0xb4>)
 8000624:	f000 ff7e 	bl	8001524 <delayInit>
  delayInit(&Delay_Sirena,500);
 8000628:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800062c:	481a      	ldr	r0, [pc, #104]	@ (8000698 <main+0xb8>)
 800062e:	f000 ff79 	bl	8001524 <delayInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  key = keypad_getkey(); // Modificacion del if dentro del switch
 8000632:	f001 f94f 	bl	80018d4 <keypad_getkey>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <main+0xbc>)
 800063c:	701a      	strb	r2, [r3, #0]
	  switch (currentState){
 800063e:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <main+0xc0>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b04      	cmp	r3, #4
 8000644:	dcf5      	bgt.n	8000632 <main+0x52>
 8000646:	2b02      	cmp	r3, #2
 8000648:	da18      	bge.n	800067c <main+0x9c>
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <main+0x74>
 800064e:	2b01      	cmp	r3, #1
 8000650:	d00a      	beq.n	8000668 <main+0x88>
 8000652:	e019      	b.n	8000688 <main+0xa8>
		  case MAIN_MENU:
			  	  if (key != '\0') HandleMainMenuInput(key);
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <main+0xbc>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d012      	beq.n	8000682 <main+0xa2>
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <main+0xbc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f83d 	bl	80006e0 <HandleMainMenuInput>
			  	  break;
 8000666:	e00c      	b.n	8000682 <main+0xa2>
		  case ALARM_MENU:
			  	  if (key != '\0') HandleAlarmMenuInput(key);
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <main+0xbc>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00a      	beq.n	8000686 <main+0xa6>
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <main+0xbc>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f86d 	bl	8000754 <HandleAlarmMenuInput>
			  	  break;
 800067a:	e004      	b.n	8000686 <main+0xa6>
		  case CHANGE_PASS_MENU:
		  case TEST_ALARM_MENU:
		  case ACTIVE_ALARM:
			  	  CheckSensors();
 800067c:	f000 fce2 	bl	8001044 <CheckSensors>
			  	  break;
 8000680:	e002      	b.n	8000688 <main+0xa8>
			  	  break;
 8000682:	bf00      	nop
 8000684:	e7d5      	b.n	8000632 <main+0x52>
			  	  break;
 8000686:	bf00      	nop
	  key = keypad_getkey(); // Modificacion del if dentro del switch
 8000688:	e7d3      	b.n	8000632 <main+0x52>
 800068a:	bf00      	nop
 800068c:	20000174 	.word	0x20000174
 8000690:	20000180 	.word	0x20000180
 8000694:	2000018c 	.word	0x2000018c
 8000698:	20000198 	.word	0x20000198
 800069c:	2000015d 	.word	0x2000015d
 80006a0:	2000015e 	.word	0x2000015e

080006a4 <DisplayMainMenu>:
/*****************************************************************************************************************
 * @brief: Función para mostrar el menú principal
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayMainMenu() {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    lcd_clear();
 80006a8:	f001 f9ab 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 80006ac:	2100      	movs	r1, #0
 80006ae:	2000      	movs	r0, #0
 80006b0:	f001 f9b1 	bl	8001a16 <lcd_set_cursor>
    lcd_print("1.Activar *.Mas");
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <DisplayMainMenu+0x30>)
 80006b6:	f001 f9c8 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 80006ba:	2100      	movs	r1, #0
 80006bc:	2001      	movs	r0, #1
 80006be:	f001 f9aa 	bl	8001a16 <lcd_set_cursor>
    lcd_print("2.Cambiar Pass");
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <DisplayMainMenu+0x34>)
 80006c4:	f001 f9c1 	bl	8001a4a <lcd_print>
    currentState = MAIN_MENU;
 80006c8:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <DisplayMainMenu+0x38>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	08004768 	.word	0x08004768
 80006d8:	08004778 	.word	0x08004778
 80006dc:	2000015e 	.word	0x2000015e

080006e0 <HandleMainMenuInput>:
/*****************************************************************************************************************
 * @brief: Manejo de la entrada del menú principal
 * @param: recibe una variable tipo caracter para entrar en las distintas opciones de menu
 * @retval: void
******************************************************************************************************************/
void HandleMainMenuInput(char key) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b32      	cmp	r3, #50	@ 0x32
 80006ee:	d008      	beq.n	8000702 <HandleMainMenuInput+0x22>
 80006f0:	2b32      	cmp	r3, #50	@ 0x32
 80006f2:	dc0c      	bgt.n	800070e <HandleMainMenuInput+0x2e>
 80006f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80006f6:	d007      	beq.n	8000708 <HandleMainMenuInput+0x28>
 80006f8:	2b31      	cmp	r3, #49	@ 0x31
 80006fa:	d108      	bne.n	800070e <HandleMainMenuInput+0x2e>
        case '1':
            DisplayAlarmMenu();
 80006fc:	f000 f80c 	bl	8000718 <DisplayAlarmMenu>
            break;
 8000700:	e005      	b.n	800070e <HandleMainMenuInput+0x2e>
        case '2':
            DisplayChangePassMenu();
 8000702:	f000 fac1 	bl	8000c88 <DisplayChangePassMenu>
            break;
 8000706:	e002      	b.n	800070e <HandleMainMenuInput+0x2e>
        case '*':
            HandleSubMenu();
 8000708:	f000 fc36 	bl	8000f78 <HandleSubMenu>
            break;
 800070c:	bf00      	nop
    }
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <DisplayAlarmMenu>:
/*****************************************************************************************************************
 * @brief: Mostrar menú para activar alarma
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayAlarmMenu(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    lcd_clear();
 800071c:	f001 f971 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000720:	2100      	movs	r1, #0
 8000722:	2000      	movs	r0, #0
 8000724:	f001 f977 	bl	8001a16 <lcd_set_cursor>
    lcd_print("1.Sist Completo");
 8000728:	4807      	ldr	r0, [pc, #28]	@ (8000748 <DisplayAlarmMenu+0x30>)
 800072a:	f001 f98e 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 800072e:	2100      	movs	r1, #0
 8000730:	2001      	movs	r0, #1
 8000732:	f001 f970 	bl	8001a16 <lcd_set_cursor>
    lcd_print("2.Sin Sensor Mov");
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <DisplayAlarmMenu+0x34>)
 8000738:	f001 f987 	bl	8001a4a <lcd_print>
    currentState = ALARM_MENU;
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <DisplayAlarmMenu+0x38>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	08004788 	.word	0x08004788
 800074c:	08004798 	.word	0x08004798
 8000750:	2000015e 	.word	0x2000015e

08000754 <HandleAlarmMenuInput>:
/*****************************************************************************************************************
 * @brief: Manejo de la entrada del menú de alarma
 * @param: Recibe variable tipo caracter
 * @retval:
******************************************************************************************************************/
void HandleAlarmMenuInput(char key) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b32      	cmp	r3, #50	@ 0x32
 8000762:	d00d      	beq.n	8000780 <HandleAlarmMenuInput+0x2c>
 8000764:	2b32      	cmp	r3, #50	@ 0x32
 8000766:	dc30      	bgt.n	80007ca <HandleAlarmMenuInput+0x76>
 8000768:	2b2a      	cmp	r3, #42	@ 0x2a
 800076a:	d011      	beq.n	8000790 <HandleAlarmMenuInput+0x3c>
 800076c:	2b31      	cmp	r3, #49	@ 0x31
 800076e:	d12c      	bne.n	80007ca <HandleAlarmMenuInput+0x76>
        case '1':  // Modo "Sistema Completo"
            includeMotionSensor = true;
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <HandleAlarmMenuInput+0x80>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000776:	4918      	ldr	r1, [pc, #96]	@ (80007d8 <HandleAlarmMenuInput+0x84>)
 8000778:	4818      	ldr	r0, [pc, #96]	@ (80007dc <HandleAlarmMenuInput+0x88>)
 800077a:	f000 f837 	bl	80007ec <RequestPassword>
            break;
 800077e:	e024      	b.n	80007ca <HandleAlarmMenuInput+0x76>
        case '2':  // Modo "Sin Sensor de Movimiento"
            includeMotionSensor = false;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <HandleAlarmMenuInput+0x80>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000786:	4914      	ldr	r1, [pc, #80]	@ (80007d8 <HandleAlarmMenuInput+0x84>)
 8000788:	4814      	ldr	r0, [pc, #80]	@ (80007dc <HandleAlarmMenuInput+0x88>)
 800078a:	f000 f82f 	bl	80007ec <RequestPassword>
            break;
 800078e:	e01c      	b.n	80007ca <HandleAlarmMenuInput+0x76>
        case '*':  // Si el usuario presiona "*", volver al menú principal
            lcd_clear();
 8000790:	f001 f937 	bl	8001a02 <lcd_clear>
            lcd_set_cursor(0, 0);
 8000794:	2100      	movs	r1, #0
 8000796:	2000      	movs	r0, #0
 8000798:	f001 f93d 	bl	8001a16 <lcd_set_cursor>
            lcd_print("Operacion");
 800079c:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <HandleAlarmMenuInput+0x8c>)
 800079e:	f001 f954 	bl	8001a4a <lcd_print>
            lcd_set_cursor(1, 0);
 80007a2:	2100      	movs	r1, #0
 80007a4:	2001      	movs	r0, #1
 80007a6:	f001 f936 	bl	8001a16 <lcd_set_cursor>
            lcd_print("Cancelada");
 80007aa:	480e      	ldr	r0, [pc, #56]	@ (80007e4 <HandleAlarmMenuInput+0x90>)
 80007ac:	f001 f94d 	bl	8001a4a <lcd_print>
            while(!delayRead(&LCD_Muestro)){
 80007b0:	bf00      	nop
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <HandleAlarmMenuInput+0x94>)
 80007b4:	f000 feca 	bl	800154c <delayRead>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f083 0301 	eor.w	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f6      	bne.n	80007b2 <HandleAlarmMenuInput+0x5e>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();  		// Volver al menú principal
 80007c4:	f7ff ff6e 	bl	80006a4 <DisplayMainMenu>
            break;
 80007c8:	bf00      	nop
    }
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000015f 	.word	0x2000015f
 80007d8:	08000719 	.word	0x08000719
 80007dc:	080009a5 	.word	0x080009a5
 80007e0:	080047ac 	.word	0x080047ac
 80007e4:	080047b8 	.word	0x080047b8
 80007e8:	2000018c 	.word	0x2000018c

080007ec <RequestPassword>:
/********************************************************************************************************************************
 * @brief: Solicitud de contraseña al usuario
 * @param: Recibe funciones, posibilidades: opc1 =(Activate Alarm, DisplayAlarmMenu), opc2= (DeactivateAlarm, IncorrectPassword)
 * @retval: void
********************************************************************************************************************************/
void RequestPassword(void (*onSuccess)(void), void (*onFailure)(void)) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
    while (1) { 											// Bucle para reintentar si la contraseña es incorrecta
        lcd_clear();
 80007f6:	f001 f904 	bl	8001a02 <lcd_clear>
        lcd_set_cursor(0, 0);
 80007fa:	2100      	movs	r1, #0
 80007fc:	2000      	movs	r0, #0
 80007fe:	f001 f90a 	bl	8001a16 <lcd_set_cursor>
        lcd_print("Contrasena:____");
 8000802:	485b      	ldr	r0, [pc, #364]	@ (8000970 <RequestPassword+0x184>)
 8000804:	f001 f921 	bl	8001a4a <lcd_print>
        memset(inputBuffer, 0, sizeof(inputBuffer));		// Re-incializa la variable en [0000]
 8000808:	2205      	movs	r2, #5
 800080a:	2100      	movs	r1, #0
 800080c:	4859      	ldr	r0, [pc, #356]	@ (8000974 <RequestPassword+0x188>)
 800080e:	f003 fb17 	bl	8003e40 <memset>
        inputIndex = 0;
 8000812:	4b59      	ldr	r3, [pc, #356]	@ (8000978 <RequestPassword+0x18c>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]


        uint32_t startTime = HAL_GetTick();  // Guardar el tiempo de inicio
 8000818:	f001 fa30 	bl	8001c7c <HAL_GetTick>
 800081c:	60f8      	str	r0, [r7, #12]

        while (1) {

            if (HAL_GetTick() - startTime > 20000) { // Si pasan más de 20 segundos sin entrada
 800081e:	f001 fa2d 	bl	8001c7c <HAL_GetTick>
 8000822:	4602      	mov	r2, r0
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800082c:	4293      	cmp	r3, r2
 800082e:	d91c      	bls.n	800086a <RequestPassword+0x7e>
                lcd_clear();
 8000830:	f001 f8e7 	bl	8001a02 <lcd_clear>
                lcd_set_cursor(0, 0);
 8000834:	2100      	movs	r1, #0
 8000836:	2000      	movs	r0, #0
 8000838:	f001 f8ed 	bl	8001a16 <lcd_set_cursor>
                lcd_print("Tiempo agotado");
 800083c:	484f      	ldr	r0, [pc, #316]	@ (800097c <RequestPassword+0x190>)
 800083e:	f001 f904 	bl	8001a4a <lcd_print>
                lcd_set_cursor(1, 0);
 8000842:	2100      	movs	r1, #0
 8000844:	2001      	movs	r0, #1
 8000846:	f001 f8e6 	bl	8001a16 <lcd_set_cursor>
                lcd_print("Volviendo...");
 800084a:	484d      	ldr	r0, [pc, #308]	@ (8000980 <RequestPassword+0x194>)
 800084c:	f001 f8fd 	bl	8001a4a <lcd_print>
                while(!delayRead(&LCD_Muestro)){			//Delay 2 segundos
 8000850:	bf00      	nop
 8000852:	484c      	ldr	r0, [pc, #304]	@ (8000984 <RequestPassword+0x198>)
 8000854:	f000 fe7a 	bl	800154c <delayRead>
 8000858:	4603      	mov	r3, r0
 800085a:	f083 0301 	eor.w	r3, r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f6      	bne.n	8000852 <RequestPassword+0x66>
                	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                }
                DisplayMainMenu();  						// Volver al menú principal
 8000864:	f7ff ff1e 	bl	80006a4 <DisplayMainMenu>
                return;
 8000868:	e07e      	b.n	8000968 <RequestPassword+0x17c>
            }

            key = keypad_getkey();
 800086a:	f001 f833 	bl	80018d4 <keypad_getkey>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	4b45      	ldr	r3, [pc, #276]	@ (8000988 <RequestPassword+0x19c>)
 8000874:	701a      	strb	r2, [r3, #0]


            if (key != '\0') {
 8000876:	4b44      	ldr	r3, [pc, #272]	@ (8000988 <RequestPassword+0x19c>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0cf      	beq.n	800081e <RequestPassword+0x32>

                if (key == '*') {  							// Si presiona "*", vuelve al menú principal
 800087e:	4b42      	ldr	r3, [pc, #264]	@ (8000988 <RequestPassword+0x19c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b2a      	cmp	r3, #42	@ 0x2a
 8000884:	d11c      	bne.n	80008c0 <RequestPassword+0xd4>
                    lcd_clear();
 8000886:	f001 f8bc 	bl	8001a02 <lcd_clear>
                    lcd_set_cursor(0, 0);
 800088a:	2100      	movs	r1, #0
 800088c:	2000      	movs	r0, #0
 800088e:	f001 f8c2 	bl	8001a16 <lcd_set_cursor>
                    lcd_print("Operacion");
 8000892:	483e      	ldr	r0, [pc, #248]	@ (800098c <RequestPassword+0x1a0>)
 8000894:	f001 f8d9 	bl	8001a4a <lcd_print>
                    lcd_set_cursor(1, 0);
 8000898:	2100      	movs	r1, #0
 800089a:	2001      	movs	r0, #1
 800089c:	f001 f8bb 	bl	8001a16 <lcd_set_cursor>
                    lcd_print("Cancelada");
 80008a0:	483b      	ldr	r0, [pc, #236]	@ (8000990 <RequestPassword+0x1a4>)
 80008a2:	f001 f8d2 	bl	8001a4a <lcd_print>
                    while(!delayRead(&LCD_Muestro)){
 80008a6:	bf00      	nop
 80008a8:	4836      	ldr	r0, [pc, #216]	@ (8000984 <RequestPassword+0x198>)
 80008aa:	f000 fe4f 	bl	800154c <delayRead>
 80008ae:	4603      	mov	r3, r0
 80008b0:	f083 0301 	eor.w	r3, r3, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f6      	bne.n	80008a8 <RequestPassword+0xbc>
                    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                    }
                    DisplayMainMenu();  					// Volver al menú principal
 80008ba:	f7ff fef3 	bl	80006a4 <DisplayMainMenu>
                    return;
 80008be:	e053      	b.n	8000968 <RequestPassword+0x17c>
                }

                if (key >= '0' && key <= '9' && inputIndex < 4) {
 80008c0:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <RequestPassword+0x19c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80008c6:	d91e      	bls.n	8000906 <RequestPassword+0x11a>
 80008c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000988 <RequestPassword+0x19c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b39      	cmp	r3, #57	@ 0x39
 80008ce:	d81a      	bhi.n	8000906 <RequestPassword+0x11a>
 80008d0:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <RequestPassword+0x18c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d816      	bhi.n	8000906 <RequestPassword+0x11a>
                    inputBuffer[inputIndex++] = key;
 80008d8:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <RequestPassword+0x18c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	b2d1      	uxtb	r1, r2
 80008e0:	4a25      	ldr	r2, [pc, #148]	@ (8000978 <RequestPassword+0x18c>)
 80008e2:	7011      	strb	r1, [r2, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <RequestPassword+0x19c>)
 80008e8:	7819      	ldrb	r1, [r3, #0]
 80008ea:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <RequestPassword+0x188>)
 80008ec:	5499      	strb	r1, [r3, r2]
                    lcd_set_cursor(1, 10 + inputIndex - 1);
 80008ee:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <RequestPassword+0x18c>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	3309      	adds	r3, #9
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	2001      	movs	r0, #1
 80008fa:	f001 f88c 	bl	8001a16 <lcd_set_cursor>
                    lcd_print("*");
 80008fe:	4825      	ldr	r0, [pc, #148]	@ (8000994 <RequestPassword+0x1a8>)
 8000900:	f001 f8a3 	bl	8001a4a <lcd_print>
 8000904:	e02e      	b.n	8000964 <RequestPassword+0x178>
                }else if (key == '#') { 					//  Cuando se presiona "#", verifica la clave
 8000906:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <RequestPassword+0x19c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b23      	cmp	r3, #35	@ 0x23
 800090c:	d187      	bne.n	800081e <RequestPassword+0x32>
                    inputBuffer[inputIndex] = '\0';
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <RequestPassword+0x18c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <RequestPassword+0x188>)
 8000916:	2100      	movs	r1, #0
 8000918:	5499      	strb	r1, [r3, r2]
                    if (strcmp(inputBuffer, currentPassword) == 0) {// strcmp compara 2 cadenas de caractares y devuelve un entero =0 si son iguales
 800091a:	491f      	ldr	r1, [pc, #124]	@ (8000998 <RequestPassword+0x1ac>)
 800091c:	4815      	ldr	r0, [pc, #84]	@ (8000974 <RequestPassword+0x188>)
 800091e:	f7ff fc7f 	bl	8000220 <strcmp>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <RequestPassword+0x142>
                        onSuccess(); // Si la clave es correcta, sale de la función y retorna a la funcion ActivateAlarm
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4798      	blx	r3
                        return;
 800092c:	e01c      	b.n	8000968 <RequestPassword+0x17c>
                    } else {
                        //  Si la contraseña es incorrecta, mostrar mensaje y volver a pedirla
                        lcd_clear();
 800092e:	f001 f868 	bl	8001a02 <lcd_clear>
                        lcd_set_cursor(0, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	2000      	movs	r0, #0
 8000936:	f001 f86e 	bl	8001a16 <lcd_set_cursor>
                        lcd_print("Contrasena");
 800093a:	4818      	ldr	r0, [pc, #96]	@ (800099c <RequestPassword+0x1b0>)
 800093c:	f001 f885 	bl	8001a4a <lcd_print>
                        lcd_set_cursor(1, 0);
 8000940:	2100      	movs	r1, #0
 8000942:	2001      	movs	r0, #1
 8000944:	f001 f867 	bl	8001a16 <lcd_set_cursor>
                        lcd_print("Incorrecta");
 8000948:	4815      	ldr	r0, [pc, #84]	@ (80009a0 <RequestPassword+0x1b4>)
 800094a:	f001 f87e 	bl	8001a4a <lcd_print>
                        while(!delayRead(&LCD_Muestro)){
 800094e:	bf00      	nop
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <RequestPassword+0x198>)
 8000952:	f000 fdfb 	bl	800154c <delayRead>
 8000956:	4603      	mov	r3, r0
 8000958:	f083 0301 	eor.w	r3, r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1f6      	bne.n	8000950 <RequestPassword+0x164>
                        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                        }
                        break;  //  Sale de este while pero vuelve al inicio del while externo dentro de RequestPassword
 8000962:	e000      	b.n	8000966 <RequestPassword+0x17a>
            if (HAL_GetTick() - startTime > 20000) { // Si pasan más de 20 segundos sin entrada
 8000964:	e75b      	b.n	800081e <RequestPassword+0x32>
    while (1) { 											// Bucle para reintentar si la contraseña es incorrecta
 8000966:	e746      	b.n	80007f6 <RequestPassword+0xa>
                    }
                }
            }
        }
    }
}
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	080047c4 	.word	0x080047c4
 8000974:	20000168 	.word	0x20000168
 8000978:	2000016d 	.word	0x2000016d
 800097c:	080047d4 	.word	0x080047d4
 8000980:	080047e4 	.word	0x080047e4
 8000984:	2000018c 	.word	0x2000018c
 8000988:	2000015d 	.word	0x2000015d
 800098c:	080047ac 	.word	0x080047ac
 8000990:	080047b8 	.word	0x080047b8
 8000994:	080047f4 	.word	0x080047f4
 8000998:	20000000 	.word	0x20000000
 800099c:	080047f8 	.word	0x080047f8
 80009a0:	08004804 	.word	0x08004804

080009a4 <ActivateAlarm>:
/*****************************************************************************************************************
 * @brief: Activar la alarma
 * @param: void
 * @retval: void
******************************************************************************************************************/
void ActivateAlarm() {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b090      	sub	sp, #64	@ 0x40
 80009a8:	af00      	add	r7, sp, #0
    lcd_clear();
 80009aa:	f001 f82a 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 80009ae:	2100      	movs	r1, #0
 80009b0:	2000      	movs	r0, #0
 80009b2:	f001 f830 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Alarma Activada");
 80009b6:	483c      	ldr	r0, [pc, #240]	@ (8000aa8 <ActivateAlarm+0x104>)
 80009b8:	f001 f847 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 80009bc:	2100      	movs	r1, #0
 80009be:	2001      	movs	r0, #1
 80009c0:	f001 f829 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Corran: 20 seg");
 80009c4:	4839      	ldr	r0, [pc, #228]	@ (8000aac <ActivateAlarm+0x108>)
 80009c6:	f001 f840 	bl	8001a4a <lcd_print>

    BT_SendMessage("⚠️ Alarma activada. Corran 20s... \r\n");
 80009ca:	4839      	ldr	r0, [pc, #228]	@ (8000ab0 <ActivateAlarm+0x10c>)
 80009cc:	f000 fd6a 	bl	80014a4 <BT_SendMessage>

    uint32_t countdownStart = HAL_GetTick();
 80009d0:	f001 f954 	bl	8001c7c <HAL_GetTick>
 80009d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    uint32_t remainingTime = 20;
 80009d6:	2314      	movs	r3, #20
 80009d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    while (remainingTime > 0) {
 80009da:	e02e      	b.n	8000a3a <ActivateAlarm+0x96>
        if (HAL_GetTick() - countdownStart >= 1000) {
 80009dc:	f001 f94e 	bl	8001c7c <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009ea:	d326      	bcc.n	8000a3a <ActivateAlarm+0x96>
            countdownStart = HAL_GetTick();
 80009ec:	f001 f946 	bl	8001c7c <HAL_GetTick>
 80009f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
            remainingTime--;
 80009f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009f4:	3b01      	subs	r3, #1
 80009f6:	63bb      	str	r3, [r7, #56]	@ 0x38

            lcd_set_cursor(1, 7);
 80009f8:	2107      	movs	r1, #7
 80009fa:	2001      	movs	r0, #1
 80009fc:	f001 f80b 	bl	8001a16 <lcd_set_cursor>
            lcd_print("   ");
 8000a00:	482c      	ldr	r0, [pc, #176]	@ (8000ab4 <ActivateAlarm+0x110>)
 8000a02:	f001 f822 	bl	8001a4a <lcd_print>
            lcd_set_cursor(1, 7);
 8000a06:	2107      	movs	r1, #7
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f001 f804 	bl	8001a16 <lcd_set_cursor>
            char buffer[3];
            sprintf(buffer, "%2lu", (unsigned long)remainingTime);
 8000a0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a14:	4928      	ldr	r1, [pc, #160]	@ (8000ab8 <ActivateAlarm+0x114>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 f9f2 	bl	8003e00 <siprintf>
            lcd_print(buffer);
 8000a1c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f812 	bl	8001a4a <lcd_print>

            // Envía el valor del contador por Bluetooth
              char btBuffer[50];
              snprintf(btBuffer, sizeof(btBuffer), "Corran: %02lu seg restantes\r\n", (unsigned long)remainingTime);
 8000a26:	4638      	mov	r0, r7
 8000a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a2a:	4a24      	ldr	r2, [pc, #144]	@ (8000abc <ActivateAlarm+0x118>)
 8000a2c:	2132      	movs	r1, #50	@ 0x32
 8000a2e:	f003 f9b3 	bl	8003d98 <sniprintf>
              BT_SendMessage(btBuffer);
 8000a32:	463b      	mov	r3, r7
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fd35 	bl	80014a4 <BT_SendMessage>
    while (remainingTime > 0) {
 8000a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1cd      	bne.n	80009dc <ActivateAlarm+0x38>
        }
    }

    lcd_clear();
 8000a40:	f000 ffdf 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 ffe5 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Alarma");
 8000a4c:	481c      	ldr	r0, [pc, #112]	@ (8000ac0 <ActivateAlarm+0x11c>)
 8000a4e:	f000 fffc 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 ffde 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Activa!");
 8000a5a:	481a      	ldr	r0, [pc, #104]	@ (8000ac4 <ActivateAlarm+0x120>)
 8000a5c:	f000 fff5 	bl	8001a4a <lcd_print>

    BT_SendMessage("🚨 Alarma activada! \r\n");
 8000a60:	4819      	ldr	r0, [pc, #100]	@ (8000ac8 <ActivateAlarm+0x124>)
 8000a62:	f000 fd1f 	bl	80014a4 <BT_SendMessage>

    alarmActivated = true;
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <ActivateAlarm+0x128>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
    currentState = ACTIVE_ALARM;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <ActivateAlarm+0x12c>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	701a      	strb	r2, [r3, #0]

    while (alarmActivated) {
 8000a72:	e010      	b.n	8000a96 <ActivateAlarm+0xf2>
        key = keypad_getkey();
 8000a74:	f000 ff2e 	bl	80018d4 <keypad_getkey>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <ActivateAlarm+0x130>)
 8000a7e:	701a      	strb	r2, [r3, #0]
        if (key != '\0') {
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <ActivateAlarm+0x130>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d004      	beq.n	8000a92 <ActivateAlarm+0xee>
            CheckAlarmDeactivation(key);  // Nueva función para manejar la desactivación con temporizador
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <ActivateAlarm+0x130>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fb3d 	bl	800110c <CheckAlarmDeactivation>
        }
        CheckSensors();
 8000a92:	f000 fad7 	bl	8001044 <CheckSensors>
    while (alarmActivated) {
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <ActivateAlarm+0x128>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1ea      	bne.n	8000a74 <ActivateAlarm+0xd0>
    }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3740      	adds	r7, #64	@ 0x40
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08004810 	.word	0x08004810
 8000aac:	08004820 	.word	0x08004820
 8000ab0:	08004830 	.word	0x08004830
 8000ab4:	0800485c 	.word	0x0800485c
 8000ab8:	08004860 	.word	0x08004860
 8000abc:	08004868 	.word	0x08004868
 8000ac0:	08004888 	.word	0x08004888
 8000ac4:	08004890 	.word	0x08004890
 8000ac8:	08004898 	.word	0x08004898
 8000acc:	20000163 	.word	0x20000163
 8000ad0:	2000015e 	.word	0x2000015e
 8000ad4:	2000015d 	.word	0x2000015d

08000ad8 <DeactivateAlarm>:
/*****************************************************************************************************************
 * @brief: Desactivar la alarma si la contraseña es correcta
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DeactivateAlarm(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    lcd_clear();
 8000adc:	f000 ff91 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 ff97 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Alarma");
 8000ae8:	4811      	ldr	r0, [pc, #68]	@ (8000b30 <DeactivateAlarm+0x58>)
 8000aea:	f000 ffae 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 8000aee:	2100      	movs	r1, #0
 8000af0:	2001      	movs	r0, #1
 8000af2:	f000 ff90 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Desactivada");
 8000af6:	480f      	ldr	r0, [pc, #60]	@ (8000b34 <DeactivateAlarm+0x5c>)
 8000af8:	f000 ffa7 	bl	8001a4a <lcd_print>

    BT_SendMessage("✅ Alarma desactivada. Todo en orden. \r\n"); // 🔹 Notificación de desactivación
 8000afc:	480e      	ldr	r0, [pc, #56]	@ (8000b38 <DeactivateAlarm+0x60>)
 8000afe:	f000 fcd1 	bl	80014a4 <BT_SendMessage>

    alarmActivated = false;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <DeactivateAlarm+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]

    // Asegurar que el buzzer se apaga
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <DeactivateAlarm+0x68>)
 8000b0e:	f001 fc35 	bl	800237c <HAL_GPIO_WritePin>
    while(!delayRead(&LCD_Muestro)){
 8000b12:	bf00      	nop
 8000b14:	480b      	ldr	r0, [pc, #44]	@ (8000b44 <DeactivateAlarm+0x6c>)
 8000b16:	f000 fd19 	bl	800154c <delayRead>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f083 0301 	eor.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1f6      	bne.n	8000b14 <DeactivateAlarm+0x3c>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8000b26:	f7ff fdbd 	bl	80006a4 <DisplayMainMenu>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	08004888 	.word	0x08004888
 8000b34:	080048c8 	.word	0x080048c8
 8000b38:	080048d4 	.word	0x080048d4
 8000b3c:	20000163 	.word	0x20000163
 8000b40:	40020000 	.word	0x40020000
 8000b44:	2000018c 	.word	0x2000018c

08000b48 <IncorrectPassword>:
/*****************************************************************************************************************
 * @brief: Contraseña incorrecta: mensaje y reinicio de intento
 * @param: void
 * @retval: void
******************************************************************************************************************/
void IncorrectPassword(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    lcd_clear();
 8000b4c:	f000 ff59 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000b50:	2100      	movs	r1, #0
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 ff5f 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Contrasena");
 8000b58:	481a      	ldr	r0, [pc, #104]	@ (8000bc4 <IncorrectPassword+0x7c>)
 8000b5a:	f000 ff76 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2001      	movs	r0, #1
 8000b62:	f000 ff58 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Incorrecta");
 8000b66:	4818      	ldr	r0, [pc, #96]	@ (8000bc8 <IncorrectPassword+0x80>)
 8000b68:	f000 ff6f 	bl	8001a4a <lcd_print>
    while(!delayRead(&LCD_Muestro)){ 	// Mostrar mensaje durante 2 segundos
 8000b6c:	e00e      	b.n	8000b8c <IncorrectPassword+0x44>


    // Iniciar temporizador interno si aún no está activo
    if (!countdownStarted) {
 8000b6e:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <IncorrectPassword+0x84>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f083 0301 	eor.w	r3, r3, #1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d007      	beq.n	8000b8c <IncorrectPassword+0x44>
        countdownStarted = true;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <IncorrectPassword+0x84>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
        startTime = HAL_GetTick(); // Guardar tiempo actual
 8000b82:	f001 f87b 	bl	8001c7c <HAL_GetTick>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a11      	ldr	r2, [pc, #68]	@ (8000bd0 <IncorrectPassword+0x88>)
 8000b8a:	6013      	str	r3, [r2, #0]
    while(!delayRead(&LCD_Muestro)){ 	// Mostrar mensaje durante 2 segundos
 8000b8c:	4811      	ldr	r0, [pc, #68]	@ (8000bd4 <IncorrectPassword+0x8c>)
 8000b8e:	f000 fcdd 	bl	800154c <delayRead>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f083 0301 	eor.w	r3, r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1e7      	bne.n	8000b6e <IncorrectPassword+0x26>
    		delayInit(&countdownDelay, 31000); // Iniciar temporizador de 31 segundos
    	}
    	*/
    }
    // Solicitar nuevamente la contraseña
    lcd_clear();
 8000b9e:	f000 ff30 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 ff36 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Ingrese");
 8000baa:	480b      	ldr	r0, [pc, #44]	@ (8000bd8 <IncorrectPassword+0x90>)
 8000bac:	f000 ff4d 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f000 ff2f 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Contrasena:");
 8000bb8:	4808      	ldr	r0, [pc, #32]	@ (8000bdc <IncorrectPassword+0x94>)
 8000bba:	f000 ff46 	bl	8001a4a <lcd_print>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	080047f8 	.word	0x080047f8
 8000bc8:	08004804 	.word	0x08004804
 8000bcc:	20000164 	.word	0x20000164
 8000bd0:	20000170 	.word	0x20000170
 8000bd4:	2000018c 	.word	0x2000018c
 8000bd8:	080048b4 	.word	0x080048b4
 8000bdc:	080048bc 	.word	0x080048bc

08000be0 <AlarmTriggered>:
/*****************************************************************************************************************
 * @brief: Activar alarma sonora
 * @param: void
 * @retval: void
******************************************************************************************************************/
void AlarmTriggered(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
    lcd_clear();
 8000be6:	f000 ff0c 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 ff12 	bl	8001a16 <lcd_set_cursor>
    lcd_print("ALERTA!!!");
 8000bf2:	481d      	ldr	r0, [pc, #116]	@ (8000c68 <AlarmTriggered+0x88>)
 8000bf4:	f000 ff29 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 ff0b 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Ingrese clave");
 8000c00:	481a      	ldr	r0, [pc, #104]	@ (8000c6c <AlarmTriggered+0x8c>)
 8000c02:	f000 ff22 	bl	8001a4a <lcd_print>

    BT_SendMessage("⚠️ Alarma Disparada! \r\n"); // Enviar mensaje por Bluetooth
 8000c06:	481a      	ldr	r0, [pc, #104]	@ (8000c70 <AlarmTriggered+0x90>)
 8000c08:	f000 fc4c 	bl	80014a4 <BT_SendMessage>
    uint32_t lastToggleTime = HAL_GetTick();  // Tiempo de referencia para el buzzer
 8000c0c:	f001 f836 	bl	8001c7c <HAL_GetTick>
 8000c10:	6078      	str	r0, [r7, #4]

    while (alarmActivated) {
 8000c12:	e01c      	b.n	8000c4e <AlarmTriggered+0x6e>
       // Alternar el buzzer cada 500 ms sin bloquear el sistema
    	if (HAL_GetTick() - lastToggleTime >= 500) {
 8000c14:	f001 f832 	bl	8001c7c <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c22:	d306      	bcc.n	8000c32 <AlarmTriggered+0x52>
    	    lastToggleTime = HAL_GetTick();
 8000c24:	f001 f82a 	bl	8001c7c <HAL_GetTick>
 8000c28:	6078      	str	r0, [r7, #4]
    	    HAL_GPIO_TogglePin(Sirena_GPIO_Port, Sirena_Pin);
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	4811      	ldr	r0, [pc, #68]	@ (8000c74 <AlarmTriggered+0x94>)
 8000c2e:	f001 fbbe 	bl	80023ae <HAL_GPIO_TogglePin>
    	/*if (delayRead(&Delay_Sirena)){
    		HAL_GPIO_TogglePin(Sirena_GPIO_Port, Sirena_Pin);
    	}*/

        // Permitir que el usuario intente apagar la alarma
        key = keypad_getkey();
 8000c32:	f000 fe4f 	bl	80018d4 <keypad_getkey>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <AlarmTriggered+0x98>)
 8000c3c:	701a      	strb	r2, [r3, #0]
        if (key != '\0') {
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <AlarmTriggered+0x98>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <AlarmTriggered+0x6e>
            RequestPassword(DeactivateAlarm, IncorrectPassword);
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <AlarmTriggered+0x9c>)
 8000c48:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <AlarmTriggered+0xa0>)
 8000c4a:	f7ff fdcf 	bl	80007ec <RequestPassword>
    while (alarmActivated) {
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <AlarmTriggered+0xa4>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1de      	bne.n	8000c14 <AlarmTriggered+0x34>
        }
    }

    // Apagar el buzzer cuando la alarma se desactiva
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2120      	movs	r1, #32
 8000c5a:	4806      	ldr	r0, [pc, #24]	@ (8000c74 <AlarmTriggered+0x94>)
 8000c5c:	f001 fb8e 	bl	800237c <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	08004900 	.word	0x08004900
 8000c6c:	0800490c 	.word	0x0800490c
 8000c70:	0800491c 	.word	0x0800491c
 8000c74:	40020000 	.word	0x40020000
 8000c78:	2000015d 	.word	0x2000015d
 8000c7c:	08000b49 	.word	0x08000b49
 8000c80:	08000ad9 	.word	0x08000ad9
 8000c84:	20000163 	.word	0x20000163

08000c88 <DisplayChangePassMenu>:
/*****************************************************************************************************************
 * @brief: Cambiar contraseña
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayChangePassMenu() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
    lcd_clear();
 8000c8e:	f000 feb8 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000c92:	2100      	movs	r1, #0
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 febe 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Contrasena");
 8000c9a:	4830      	ldr	r0, [pc, #192]	@ (8000d5c <DisplayChangePassMenu+0xd4>)
 8000c9c:	f000 fed5 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f000 feb7 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Actual:");
 8000ca8:	482d      	ldr	r0, [pc, #180]	@ (8000d60 <DisplayChangePassMenu+0xd8>)
 8000caa:	f000 fece 	bl	8001a4a <lcd_print>

    uint32_t startTime = HAL_GetTick();  // Guardar el tiempo actual
 8000cae:	f000 ffe5 	bl	8001c7c <HAL_GetTick>
 8000cb2:	6078      	str	r0, [r7, #4]
    while (1) {  // Bucle para capturar la tecla antes de solicitar la contraseña
        key = keypad_getkey();
 8000cb4:	f000 fe0e 	bl	80018d4 <keypad_getkey>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <DisplayChangePassMenu+0xdc>)
 8000cbe:	701a      	strb	r2, [r3, #0]

        //  Si pasan más de 20 segundos sin tocar una tecla, vuelve al menú principal
        if (HAL_GetTick() - startTime > 20000){
 8000cc0:	f000 ffdc 	bl	8001c7c <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d915      	bls.n	8000cfe <DisplayChangePassMenu+0x76>
            lcd_clear();
 8000cd2:	f000 fe96 	bl	8001a02 <lcd_clear>
            lcd_set_cursor(0, 0);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 fe9c 	bl	8001a16 <lcd_set_cursor>
            lcd_print("Tiempo Expirado");
 8000cde:	4822      	ldr	r0, [pc, #136]	@ (8000d68 <DisplayChangePassMenu+0xe0>)
 8000ce0:	f000 feb3 	bl	8001a4a <lcd_print>
            while(!delayRead(&LCD_Muestro)){		//Delay 2 segundos
 8000ce4:	bf00      	nop
 8000ce6:	4821      	ldr	r0, [pc, #132]	@ (8000d6c <DisplayChangePassMenu+0xe4>)
 8000ce8:	f000 fc30 	bl	800154c <delayRead>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f083 0301 	eor.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f6      	bne.n	8000ce6 <DisplayChangePassMenu+0x5e>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();
 8000cf8:	f7ff fcd4 	bl	80006a4 <DisplayMainMenu>
            return;
 8000cfc:	e02a      	b.n	8000d54 <DisplayChangePassMenu+0xcc>
        }

        if (key == '*') {  //  Si el usuario presiona "*", volver al menú principal
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <DisplayChangePassMenu+0xdc>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d04:	d11c      	bne.n	8000d40 <DisplayChangePassMenu+0xb8>
            lcd_clear();
 8000d06:	f000 fe7c 	bl	8001a02 <lcd_clear>
            lcd_set_cursor(0, 0);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 fe82 	bl	8001a16 <lcd_set_cursor>
            lcd_print("Operacion");
 8000d12:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <DisplayChangePassMenu+0xe8>)
 8000d14:	f000 fe99 	bl	8001a4a <lcd_print>
            lcd_set_cursor(1, 0);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f000 fe7b 	bl	8001a16 <lcd_set_cursor>
            lcd_print("Cancelada");
 8000d20:	4814      	ldr	r0, [pc, #80]	@ (8000d74 <DisplayChangePassMenu+0xec>)
 8000d22:	f000 fe92 	bl	8001a4a <lcd_print>
            while(!delayRead(&LCD_Muestro)){		//Delay 2 segundos
 8000d26:	bf00      	nop
 8000d28:	4810      	ldr	r0, [pc, #64]	@ (8000d6c <DisplayChangePassMenu+0xe4>)
 8000d2a:	f000 fc0f 	bl	800154c <delayRead>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f6      	bne.n	8000d28 <DisplayChangePassMenu+0xa0>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();
 8000d3a:	f7ff fcb3 	bl	80006a4 <DisplayMainMenu>
            return;
 8000d3e:	e009      	b.n	8000d54 <DisplayChangePassMenu+0xcc>
        }

        if (key != '\0') {  // 🔹 Si presiona otra tecla, salir del bucle y continuar con la contraseña
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <DisplayChangePassMenu+0xdc>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d100      	bne.n	8000d4a <DisplayChangePassMenu+0xc2>
        key = keypad_getkey();
 8000d48:	e7b4      	b.n	8000cb4 <DisplayChangePassMenu+0x2c>
            break;
 8000d4a:	bf00      	nop
        }
    }

    RequestPassword(ConfirmNewPassword, DisplayChangePassMenu);  // Solicitar la contraseña actual
 8000d4c:	490a      	ldr	r1, [pc, #40]	@ (8000d78 <DisplayChangePassMenu+0xf0>)
 8000d4e:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <DisplayChangePassMenu+0xf4>)
 8000d50:	f7ff fd4c 	bl	80007ec <RequestPassword>
}
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	080047f8 	.word	0x080047f8
 8000d60:	08004938 	.word	0x08004938
 8000d64:	2000015d 	.word	0x2000015d
 8000d68:	08004940 	.word	0x08004940
 8000d6c:	2000018c 	.word	0x2000018c
 8000d70:	080047ac 	.word	0x080047ac
 8000d74:	080047b8 	.word	0x080047b8
 8000d78:	08000c89 	.word	0x08000c89
 8000d7c:	08000d81 	.word	0x08000d81

08000d80 <ConfirmNewPassword>:
/*****************************************************************************************************************
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
void ConfirmNewPassword(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
    lcd_clear();
 8000d86:	f000 fe3c 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 fe42 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Nueva Clave:");
 8000d92:	486a      	ldr	r0, [pc, #424]	@ (8000f3c <ConfirmNewPassword+0x1bc>)
 8000d94:	f000 fe59 	bl	8001a4a <lcd_print>

    memset(inputBuffer, 0, sizeof(inputBuffer));
 8000d98:	2205      	movs	r2, #5
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4868      	ldr	r0, [pc, #416]	@ (8000f40 <ConfirmNewPassword+0x1c0>)
 8000d9e:	f003 f84f 	bl	8003e40 <memset>
    inputIndex = 0;
 8000da2:	4b68      	ldr	r3, [pc, #416]	@ (8000f44 <ConfirmNewPassword+0x1c4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
    uint32_t startTime = HAL_GetTick();  // Tiempo de inicio para evitar bucles infinitos
 8000da8:	f000 ff68 	bl	8001c7c <HAL_GetTick>
 8000dac:	60f8      	str	r0, [r7, #12]

    while (HAL_GetTick() - startTime < 20000) {  // Tiempo límite de 20 segundos
 8000dae:	e09c      	b.n	8000eea <ConfirmNewPassword+0x16a>
        key = keypad_getkey();
 8000db0:	f000 fd90 	bl	80018d4 <keypad_getkey>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b63      	ldr	r3, [pc, #396]	@ (8000f48 <ConfirmNewPassword+0x1c8>)
 8000dba:	701a      	strb	r2, [r3, #0]

        if (key >= '0' && key <= '9' && inputIndex < 4) {
 8000dbc:	4b62      	ldr	r3, [pc, #392]	@ (8000f48 <ConfirmNewPassword+0x1c8>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dc2:	d91e      	bls.n	8000e02 <ConfirmNewPassword+0x82>
 8000dc4:	4b60      	ldr	r3, [pc, #384]	@ (8000f48 <ConfirmNewPassword+0x1c8>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b39      	cmp	r3, #57	@ 0x39
 8000dca:	d81a      	bhi.n	8000e02 <ConfirmNewPassword+0x82>
 8000dcc:	4b5d      	ldr	r3, [pc, #372]	@ (8000f44 <ConfirmNewPassword+0x1c4>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d816      	bhi.n	8000e02 <ConfirmNewPassword+0x82>
            inputBuffer[inputIndex++] = key;
 8000dd4:	4b5b      	ldr	r3, [pc, #364]	@ (8000f44 <ConfirmNewPassword+0x1c4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	1c5a      	adds	r2, r3, #1
 8000dda:	b2d1      	uxtb	r1, r2
 8000ddc:	4a59      	ldr	r2, [pc, #356]	@ (8000f44 <ConfirmNewPassword+0x1c4>)
 8000dde:	7011      	strb	r1, [r2, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b59      	ldr	r3, [pc, #356]	@ (8000f48 <ConfirmNewPassword+0x1c8>)
 8000de4:	7819      	ldrb	r1, [r3, #0]
 8000de6:	4b56      	ldr	r3, [pc, #344]	@ (8000f40 <ConfirmNewPassword+0x1c0>)
 8000de8:	5499      	strb	r1, [r3, r2]
            lcd_set_cursor(1, inputIndex - 1);
 8000dea:	4b56      	ldr	r3, [pc, #344]	@ (8000f44 <ConfirmNewPassword+0x1c4>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 fe0e 	bl	8001a16 <lcd_set_cursor>
            lcd_print("*");
 8000dfa:	4854      	ldr	r0, [pc, #336]	@ (8000f4c <ConfirmNewPassword+0x1cc>)
 8000dfc:	f000 fe25 	bl	8001a4a <lcd_print>
 8000e00:	e073      	b.n	8000eea <ConfirmNewPassword+0x16a>
        } else if (key == '#') {
 8000e02:	4b51      	ldr	r3, [pc, #324]	@ (8000f48 <ConfirmNewPassword+0x1c8>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b23      	cmp	r3, #35	@ 0x23
 8000e08:	d16f      	bne.n	8000eea <ConfirmNewPassword+0x16a>
            if (inputIndex == 4) {  // Validar que la clave tenga 4 dígitos
 8000e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8000f44 <ConfirmNewPassword+0x1c4>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d14e      	bne.n	8000eb0 <ConfirmNewPassword+0x130>
                inputBuffer[inputIndex] = '\0';
 8000e12:	4b4c      	ldr	r3, [pc, #304]	@ (8000f44 <ConfirmNewPassword+0x1c4>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <ConfirmNewPassword+0x1c0>)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	5499      	strb	r1, [r3, r2]
                strcpy(newPassword, inputBuffer);
 8000e1e:	4948      	ldr	r1, [pc, #288]	@ (8000f40 <ConfirmNewPassword+0x1c0>)
 8000e20:	484b      	ldr	r0, [pc, #300]	@ (8000f50 <ConfirmNewPassword+0x1d0>)
 8000e22:	f003 f841 	bl	8003ea8 <strcpy>

                lcd_clear();
 8000e26:	f000 fdec 	bl	8001a02 <lcd_clear>
                lcd_set_cursor(0, 0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 fdf2 	bl	8001a16 <lcd_set_cursor>
                lcd_print("Confirmar: ");
 8000e32:	4848      	ldr	r0, [pc, #288]	@ (8000f54 <ConfirmNewPassword+0x1d4>)
 8000e34:	f000 fe09 	bl	8001a4a <lcd_print>
                lcd_set_cursor(1, 0);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f000 fdeb 	bl	8001a16 <lcd_set_cursor>
                lcd_print("*.Si   #.No");
 8000e40:	4845      	ldr	r0, [pc, #276]	@ (8000f58 <ConfirmNewPassword+0x1d8>)
 8000e42:	f000 fe02 	bl	8001a4a <lcd_print>

                uint32_t confirmStart = HAL_GetTick();
 8000e46:	f000 ff19 	bl	8001c7c <HAL_GetTick>
 8000e4a:	60b8      	str	r0, [r7, #8]


                while (HAL_GetTick() - confirmStart < 10000) {  			// Espera 10 segundos para confirmar
 8000e4c:	e026      	b.n	8000e9c <ConfirmNewPassword+0x11c>
                    char confirmKey = keypad_getkey();
 8000e4e:	f000 fd41 	bl	80018d4 <keypad_getkey>
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
                    if (confirmKey == '*') {
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e5a:	d119      	bne.n	8000e90 <ConfirmNewPassword+0x110>
                        strcpy(currentPassword, newPassword);
 8000e5c:	493c      	ldr	r1, [pc, #240]	@ (8000f50 <ConfirmNewPassword+0x1d0>)
 8000e5e:	483f      	ldr	r0, [pc, #252]	@ (8000f5c <ConfirmNewPassword+0x1dc>)
 8000e60:	f003 f822 	bl	8003ea8 <strcpy>
                        lcd_clear();
 8000e64:	f000 fdcd 	bl	8001a02 <lcd_clear>
                        lcd_set_cursor(0, 0);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 fdd3 	bl	8001a16 <lcd_set_cursor>
                        lcd_print("Clave Actualizada");
 8000e70:	483b      	ldr	r0, [pc, #236]	@ (8000f60 <ConfirmNewPassword+0x1e0>)
 8000e72:	f000 fdea 	bl	8001a4a <lcd_print>
                        while(!delayRead(&LCD_Muestro)){
 8000e76:	bf00      	nop
 8000e78:	483a      	ldr	r0, [pc, #232]	@ (8000f64 <ConfirmNewPassword+0x1e4>)
 8000e7a:	f000 fb67 	bl	800154c <delayRead>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f6      	bne.n	8000e78 <ConfirmNewPassword+0xf8>
                                 // Espacio para ejecutar tareas mientras muestra el mensaje anterior
                        }
                        DisplayMainMenu();
 8000e8a:	f7ff fc0b 	bl	80006a4 <DisplayMainMenu>
                        return;
 8000e8e:	e052      	b.n	8000f36 <ConfirmNewPassword+0x1b6>
                    } else if (confirmKey == '#') {
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b23      	cmp	r3, #35	@ 0x23
 8000e94:	d102      	bne.n	8000e9c <ConfirmNewPassword+0x11c>
                        ConfirmNewPassword();  				// Volver a solicitar la clave
 8000e96:	f7ff ff73 	bl	8000d80 <ConfirmNewPassword>
                        return;
 8000e9a:	e04c      	b.n	8000f36 <ConfirmNewPassword+0x1b6>
                while (HAL_GetTick() - confirmStart < 10000) {  			// Espera 10 segundos para confirmar
 8000e9c:	f000 feee 	bl	8001c7c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d9cf      	bls.n	8000e4e <ConfirmNewPassword+0xce>
 8000eae:	e01c      	b.n	8000eea <ConfirmNewPassword+0x16a>
                    }
                }
            } else {
                lcd_clear();
 8000eb0:	f000 fda7 	bl	8001a02 <lcd_clear>
                lcd_set_cursor(0, 0);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 fdad 	bl	8001a16 <lcd_set_cursor>
                lcd_print("Debe ser 4 ");
 8000ebc:	482a      	ldr	r0, [pc, #168]	@ (8000f68 <ConfirmNewPassword+0x1e8>)
 8000ebe:	f000 fdc4 	bl	8001a4a <lcd_print>
                lcd_set_cursor(1, 0);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f000 fda6 	bl	8001a16 <lcd_set_cursor>
                lcd_print("digitos ");
 8000eca:	4828      	ldr	r0, [pc, #160]	@ (8000f6c <ConfirmNewPassword+0x1ec>)
 8000ecc:	f000 fdbd 	bl	8001a4a <lcd_print>
                while(!delayRead(&LCD_Muestro)){
 8000ed0:	bf00      	nop
 8000ed2:	4824      	ldr	r0, [pc, #144]	@ (8000f64 <ConfirmNewPassword+0x1e4>)
 8000ed4:	f000 fb3a 	bl	800154c <delayRead>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f083 0301 	eor.w	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f6      	bne.n	8000ed2 <ConfirmNewPassword+0x152>
                                	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                }
                ConfirmNewPassword();  // Reiniciar el proceso
 8000ee4:	f7ff ff4c 	bl	8000d80 <ConfirmNewPassword>
                return;  // Reiniciar el proceso
 8000ee8:	e025      	b.n	8000f36 <ConfirmNewPassword+0x1b6>
    while (HAL_GetTick() - startTime < 20000) {  // Tiempo límite de 20 segundos
 8000eea:	f000 fec7 	bl	8001c7c <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	f67f af59 	bls.w	8000db0 <ConfirmNewPassword+0x30>
            }
        }
    }

    // Si el usuario no ingresa nada en 20 segundos, volver al menú principal
    lcd_clear();
 8000efe:	f000 fd80 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000f02:	2100      	movs	r1, #0
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 fd86 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Tiempo ");
 8000f0a:	4819      	ldr	r0, [pc, #100]	@ (8000f70 <ConfirmNewPassword+0x1f0>)
 8000f0c:	f000 fd9d 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 8000f10:	2100      	movs	r1, #0
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 fd7f 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Excedido ");
 8000f18:	4816      	ldr	r0, [pc, #88]	@ (8000f74 <ConfirmNewPassword+0x1f4>)
 8000f1a:	f000 fd96 	bl	8001a4a <lcd_print>
    while(!delayRead(&LCD_Muestro)){
 8000f1e:	bf00      	nop
 8000f20:	4810      	ldr	r0, [pc, #64]	@ (8000f64 <ConfirmNewPassword+0x1e4>)
 8000f22:	f000 fb13 	bl	800154c <delayRead>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f083 0301 	eor.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f6      	bne.n	8000f20 <ConfirmNewPassword+0x1a0>
        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8000f32:	f7ff fbb7 	bl	80006a4 <DisplayMainMenu>
}
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	08004950 	.word	0x08004950
 8000f40:	20000168 	.word	0x20000168
 8000f44:	2000016d 	.word	0x2000016d
 8000f48:	2000015d 	.word	0x2000015d
 8000f4c:	080047f4 	.word	0x080047f4
 8000f50:	20000158 	.word	0x20000158
 8000f54:	08004960 	.word	0x08004960
 8000f58:	0800496c 	.word	0x0800496c
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	08004978 	.word	0x08004978
 8000f64:	2000018c 	.word	0x2000018c
 8000f68:	0800498c 	.word	0x0800498c
 8000f6c:	08004998 	.word	0x08004998
 8000f70:	080049a4 	.word	0x080049a4
 8000f74:	080049ac 	.word	0x080049ac

08000f78 <HandleSubMenu>:
/*****************************************************************************************************************
 * @brief: Submenú "Más"
 * @param:
 * @retval:
******************************************************************************************************************/
void HandleSubMenu() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    lcd_clear();
 8000f7c:	f000 fd41 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000f80:	2100      	movs	r1, #0
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 fd47 	bl	8001a16 <lcd_set_cursor>
    lcd_print("#.Volver ");
 8000f88:	4810      	ldr	r0, [pc, #64]	@ (8000fcc <HandleSubMenu+0x54>)
 8000f8a:	f000 fd5e 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 fd40 	bl	8001a16 <lcd_set_cursor>
    lcd_print("3.Prueba");
 8000f96:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <HandleSubMenu+0x58>)
 8000f98:	f000 fd57 	bl	8001a4a <lcd_print>

    while (1) {
        key = keypad_getkey();
 8000f9c:	f000 fc9a 	bl	80018d4 <keypad_getkey>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <HandleSubMenu+0x5c>)
 8000fa6:	701a      	strb	r2, [r3, #0]

        if (key != '\0') {
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HandleSubMenu+0x5c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f5      	beq.n	8000f9c <HandleSubMenu+0x24>
            if (key == '#') {
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HandleSubMenu+0x5c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b23      	cmp	r3, #35	@ 0x23
 8000fb6:	d102      	bne.n	8000fbe <HandleSubMenu+0x46>
                DisplayMainMenu();
 8000fb8:	f7ff fb74 	bl	80006a4 <DisplayMainMenu>
                return;
 8000fbc:	e005      	b.n	8000fca <HandleSubMenu+0x52>
            } else if (key == '3') {
 8000fbe:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <HandleSubMenu+0x5c>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b33      	cmp	r3, #51	@ 0x33
 8000fc4:	d1ea      	bne.n	8000f9c <HandleSubMenu+0x24>
                TestAlarm();
 8000fc6:	f000 f807 	bl	8000fd8 <TestAlarm>
                return;
            }
        }
    }
}
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	080049b8 	.word	0x080049b8
 8000fd0:	080049c4 	.word	0x080049c4
 8000fd4:	2000015d 	.word	0x2000015d

08000fd8 <TestAlarm>:
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
// Prueba de alarma
void TestAlarm() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
    lcd_clear();
 8000fdc:	f000 fd11 	bl	8001a02 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 fd17 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Prueba de");
 8000fe8:	4812      	ldr	r0, [pc, #72]	@ (8001034 <TestAlarm+0x5c>)
 8000fea:	f000 fd2e 	bl	8001a4a <lcd_print>
    lcd_set_cursor(1, 0);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 fd10 	bl	8001a16 <lcd_set_cursor>
    lcd_print("Alarma...");
 8000ff6:	4810      	ldr	r0, [pc, #64]	@ (8001038 <TestAlarm+0x60>)
 8000ff8:	f000 fd27 	bl	8001a4a <lcd_print>

    // Activar el buzzer en PA5
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2120      	movs	r1, #32
 8001000:	480e      	ldr	r0, [pc, #56]	@ (800103c <TestAlarm+0x64>)
 8001002:	f001 f9bb 	bl	800237c <HAL_GPIO_WritePin>
    while(!delayRead(&LCD_Muestro)){		//Delay 2 segundos
 8001006:	bf00      	nop
 8001008:	480d      	ldr	r0, [pc, #52]	@ (8001040 <TestAlarm+0x68>)
 800100a:	f000 fa9f 	bl	800154c <delayRead>
 800100e:	4603      	mov	r3, r0
 8001010:	f083 0301 	eor.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f6      	bne.n	8001008 <TestAlarm+0x30>
        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2120      	movs	r1, #32
 800101e:	4807      	ldr	r0, [pc, #28]	@ (800103c <TestAlarm+0x64>)
 8001020:	f001 f9ac 	bl	800237c <HAL_GPIO_WritePin>

    HAL_Delay(1000);  // Pequeña pausa antes de volver al menú
 8001024:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001028:	f000 fe34 	bl	8001c94 <HAL_Delay>
    DisplayMainMenu();
 800102c:	f7ff fb3a 	bl	80006a4 <DisplayMainMenu>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	080049d0 	.word	0x080049d0
 8001038:	080049dc 	.word	0x080049dc
 800103c:	40020000 	.word	0x40020000
 8001040:	2000018c 	.word	0x2000018c

08001044 <CheckSensors>:
/*****************************************************************************************************************
 * @brief: Chequeo de sensores
 * @param: void
 * @retval: void
******************************************************************************************************************/
void CheckSensors(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
    if (alarmActivated) {
 800104a:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <CheckSensors+0xac>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d04a      	beq.n	80010e8 <CheckSensors+0xa4>
        // Verificar si se abre una puerta o ventana (Sensor_Magnetico_1)
        bool doorOpened_1 = (HAL_GPIO_ReadPin(GPIOA, Sensor_Magnetico_1_Pin) == GPIO_PIN_RESET);
 8001052:	2180      	movs	r1, #128	@ 0x80
 8001054:	4827      	ldr	r0, [pc, #156]	@ (80010f4 <CheckSensors+0xb0>)
 8001056:	f001 f979 	bl	800234c <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]
        MotionDetected_1 = false;
 8001066:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <CheckSensors+0xb4>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]

        // Verificar si se abre una puerta o ventana (Sensor_Magnetico_2)
        bool doorOpened_2 = (HAL_GPIO_ReadPin(Sensor_Magnetico_2_GPIO_Port, Sensor_Magnetico_2_Pin) == GPIO_PIN_RESET);
 800106c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001070:	4822      	ldr	r0, [pc, #136]	@ (80010fc <CheckSensors+0xb8>)
 8001072:	f001 f96b 	bl	800234c <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	71bb      	strb	r3, [r7, #6]
        MotionDetected_2 = false;
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <CheckSensors+0xbc>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]

        // Verificar el sensor PIR si está activado en "Sist Completo"
        if (includeMotionSensor) {
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <CheckSensors+0xc0>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d01b      	beq.n	80010c8 <CheckSensors+0x84>
        	MotionDectected_PIR = HAL_GPIO_ReadPin(GPIOA, Sensor_PIR_Pin);
 8001090:	2140      	movs	r1, #64	@ 0x40
 8001092:	4818      	ldr	r0, [pc, #96]	@ (80010f4 <CheckSensors+0xb0>)
 8001094:	f001 f95a 	bl	800234c <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf14      	ite	ne
 800109e:	2301      	movne	r3, #1
 80010a0:	2300      	moveq	r3, #0
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <CheckSensors+0xc4>)
 80010a6:	701a      	strb	r2, [r3, #0]

            // Filtro por software para evitar falsas detecciones
            HAL_Delay(50);
 80010a8:	2032      	movs	r0, #50	@ 0x32
 80010aa:	f000 fdf3 	bl	8001c94 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GPIOA, Sensor_PIR_Pin) != MotionDectected_PIR) {
 80010ae:	2140      	movs	r1, #64	@ 0x40
 80010b0:	4810      	ldr	r0, [pc, #64]	@ (80010f4 <CheckSensors+0xb0>)
 80010b2:	f001 f94b 	bl	800234c <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <CheckSensors+0xc4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d002      	beq.n	80010c8 <CheckSensors+0x84>
            	MotionDectected_PIR = false; // Ignorar si el estado cambió muy rápido
 80010c2:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <CheckSensors+0xc4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
            }
        }

        // Evaluar si se debe activar la alarma
        if (doorOpened_1 || doorOpened_2 || (includeMotionSensor && MotionDectected_PIR)) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10a      	bne.n	80010e4 <CheckSensors+0xa0>
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d107      	bne.n	80010e4 <CheckSensors+0xa0>
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <CheckSensors+0xc0>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <CheckSensors+0xa4>
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <CheckSensors+0xc4>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <CheckSensors+0xa4>
            AlarmTriggered();
 80010e4:	f7ff fd7c 	bl	8000be0 <AlarmTriggered>
        }
    }
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000163 	.word	0x20000163
 80010f4:	40020000 	.word	0x40020000
 80010f8:	20000160 	.word	0x20000160
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	20000161 	.word	0x20000161
 8001104:	2000015f 	.word	0x2000015f
 8001108:	20000162 	.word	0x20000162

0800110c <CheckAlarmDeactivation>:
/*****************************************************************************************************************
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
void CheckAlarmDeactivation(char key) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	//static delay_t countdownDelay;
	static bool countdownStarted = false;

	if (!countdownStarted) {
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <CheckAlarmDeactivation+0x50>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f083 0301 	eor.w	r3, r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d007      	beq.n	8001134 <CheckAlarmDeactivation+0x28>
		countdownStarted = true;
 8001124:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <CheckAlarmDeactivation+0x50>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
		startTime = HAL_GetTick(); // Iniciar temporizador de 31 segundos
 800112a:	f000 fda7 	bl	8001c7c <HAL_GetTick>
 800112e:	4603      	mov	r3, r0
 8001130:	4a0b      	ldr	r2, [pc, #44]	@ (8001160 <CheckAlarmDeactivation+0x54>)
 8001132:	6013      	str	r3, [r2, #0]
	}

	RequestPassword(DeactivateAlarm, IncorrectPassword);
 8001134:	490b      	ldr	r1, [pc, #44]	@ (8001164 <CheckAlarmDeactivation+0x58>)
 8001136:	480c      	ldr	r0, [pc, #48]	@ (8001168 <CheckAlarmDeactivation+0x5c>)
 8001138:	f7ff fb58 	bl	80007ec <RequestPassword>

	// Si pasan 31 segundos sin ingresar la clave correcta, activar la alarma
	if (HAL_GetTick() - startTime >= 31000) {
 800113c:	f000 fd9e 	bl	8001c7c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <CheckAlarmDeactivation+0x54>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f647 1217 	movw	r2, #30999	@ 0x7917
 800114c:	4293      	cmp	r3, r2
 800114e:	d901      	bls.n	8001154 <CheckAlarmDeactivation+0x48>
		AlarmTriggered();
 8001150:	f7ff fd46 	bl	8000be0 <AlarmTriggered>
	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200001a4 	.word	0x200001a4
 8001160:	20000170 	.word	0x20000170
 8001164:	08000b49 	.word	0x08000b49
 8001168:	08000ad9 	.word	0x08000ad9

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <Error_Handler+0x8>

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	4a0f      	ldr	r2, [pc, #60]	@ (80011c4 <HAL_MspInit+0x4c>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118c:	6453      	str	r3, [r2, #68]	@ 0x44
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	4a08      	ldr	r2, [pc, #32]	@ (80011c4 <HAL_MspInit+0x4c>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a19      	ldr	r2, [pc, #100]	@ (800124c <HAL_I2C_MspInit+0x84>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d12b      	bne.n	8001242 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <HAL_I2C_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <HAL_I2C_MspInit+0x88>)
 80011f4:	f043 0320 	orr.w	r3, r3, #32
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_I2C_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001206:	2303      	movs	r3, #3
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120a:	2312      	movs	r3, #18
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001216:	2304      	movs	r3, #4
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <HAL_I2C_MspInit+0x8c>)
 8001222:	f000 feff 	bl	8002024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_I2C_MspInit+0x88>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_I2C_MspInit+0x88>)
 8001230:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001234:	6413      	str	r3, [r2, #64]	@ 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_I2C_MspInit+0x88>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40005800 	.word	0x40005800
 8001250:	40023800 	.word	0x40023800
 8001254:	40021400 	.word	0x40021400

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1d      	ldr	r2, [pc, #116]	@ (80012ec <HAL_UART_MspInit+0x94>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d133      	bne.n	80012e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <HAL_UART_MspInit+0x98>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a1b      	ldr	r2, [pc, #108]	@ (80012f0 <HAL_UART_MspInit+0x98>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <HAL_UART_MspInit+0x98>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_UART_MspInit+0x98>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <HAL_UART_MspInit+0x98>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_UART_MspInit+0x98>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012b2:	2360      	movs	r3, #96	@ 0x60
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c2:	2307      	movs	r3, #7
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4809      	ldr	r0, [pc, #36]	@ (80012f4 <HAL_UART_MspInit+0x9c>)
 80012ce:	f000 fea9 	bl	8002024 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2026      	movs	r0, #38	@ 0x26
 80012d8:	f000 fddb 	bl	8001e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012dc:	2026      	movs	r0, #38	@ 0x26
 80012de:	f000 fdf4 	bl	8001eca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40004400 	.word	0x40004400
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020c00 	.word	0x40020c00

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <NMI_Handler+0x4>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <MemManage_Handler+0x4>

08001310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <UsageFault_Handler+0x4>

08001320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134e:	f000 fc81 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <USART2_IRQHandler+0x10>)
 800135e:	f001 fdef 	bl	8002f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000110 	.word	0x20000110

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f002 fd58 	bl	8003e50 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20050000 	.word	0x20050000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	200001a8 	.word	0x200001a8
 80013d4:	20000300 	.word	0x20000300

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001434 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001400:	f7ff ffea 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001404:	480c      	ldr	r0, [pc, #48]	@ (8001438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001406:	490d      	ldr	r1, [pc, #52]	@ (800143c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800141c:	4c0a      	ldr	r4, [pc, #40]	@ (8001448 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800142a:	f002 fd17 	bl	8003e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff f8d7 	bl	80005e0 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001434:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001440:	08004a54 	.word	0x08004a54
  ldr r2, =_sbss
 8001444:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001448:	200002fc 	.word	0x200002fc

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>
	...

08001450 <MX_USART2_UART_Init>:
 * @brief Inicializacion USART2 (Asincrona)
 * @param void
 * @retval void
******************************************************************************************************************/
void MX_USART2_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001456:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <MX_USART2_UART_Init+0x50>)
 8001458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 800145c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001488:	f001 fc7e 	bl	8002d88 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f7ff fe6b 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000110 	.word	0x20000110
 80014a0:	40004400 	.word	0x40004400

080014a4 <BT_SendMessage>:
 * @brief: 	Enviar un mensaje a HC-05
 * @param:	char message (cadena de carecteres)
 * @retval:	void
******************************************************************************************************************/

void BT_SendMessage(char *message) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7fe fec1 	bl	8000234 <strlen>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <BT_SendMessage+0x28>)
 80014be:	f001 fcb3 	bl	8002e28 <HAL_UART_Transmit>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000110 	.word	0x20000110

080014d0 <BT_Test>:
/*****************************************************************************************************************
 * @brief: Para probar si el STM32 está enviando datos correctamente al módulo Bluetooth HC-05
 * @param: void
 * @retval: void
******************************************************************************************************************/
void BT_Test() {
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
    char message[] = "✅ HC-05 conectado con STM32\r\n";
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <BT_Test+0x38>)
 80014d8:	463c      	mov	r4, r7
 80014da:	461d      	mov	r5, r3
 80014dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80014e8:	463b      	mov	r3, r7
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe fea2 	bl	8000234 <strlen>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4639      	mov	r1, r7
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	4804      	ldr	r0, [pc, #16]	@ (800150c <BT_Test+0x3c>)
 80014fc:	f001 fc94 	bl	8002e28 <HAL_UART_Transmit>
}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bdb0      	pop	{r4, r5, r7, pc}
 8001508:	080049e8 	.word	0x080049e8
 800150c:	20000110 	.word	0x20000110

08001510 <HAL_UART_TxCpltCallback>:
 * @brief Cuando se completa la transmision se puede realizar una tarea determinada
 * @param modulo UART
 * @retval void
******************************************************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
		/*USER CODE BEGIN TxCpltCallback*/

		/*USER CODE END TxCpltCallback*/
	}
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <delayInit>:
 */

#include "main.h"
#include "API_Delay.h"

void delayInit(delay_t *delay, tick_t duration){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	delay->startTime=HAL_GetTick();
 800152e:	f000 fba5 	bl	8001c7c <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	601a      	str	r2, [r3, #0]
	delay->duration=duration;				//valor que tomara al definir el tiempo de espera
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	605a      	str	r2, [r3, #4]
	delay->running=false;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	721a      	strb	r2, [r3, #8]
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <delayRead>:
bool_t delayRead(delay_t *delay){
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	if(delay->running==false){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7a1b      	ldrb	r3, [r3, #8]
 8001558:	f083 0301 	eor.w	r3, r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d009      	beq.n	8001576 <delayRead+0x2a>
		delay->startTime=HAL_GetTick();
 8001562:	f000 fb8b 	bl	8001c7c <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	601a      	str	r2, [r3, #0]
		delay->running=true;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	721a      	strb	r2, [r3, #8]
		return false;
 8001572:	2300      	movs	r3, #0
 8001574:	e00f      	b.n	8001596 <delayRead+0x4a>
	}
	if((HAL_GetTick()-delay->startTime)>=delay->duration){
 8001576:	f000 fb81 	bl	8001c7c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	1ad2      	subs	r2, r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	d304      	bcc.n	8001594 <delayRead+0x48>
		delay->running=false;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	721a      	strb	r2, [r3, #8]
		return true;
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <delayRead+0x4a>
	}
	return false;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08e      	sub	sp, #56	@ 0x38
 80015a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
 80015ba:	4b90      	ldr	r3, [pc, #576]	@ (80017fc <MX_GPIO_Init+0x25c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a8f      	ldr	r2, [pc, #572]	@ (80017fc <MX_GPIO_Init+0x25c>)
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b8d      	ldr	r3, [pc, #564]	@ (80017fc <MX_GPIO_Init+0x25c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	623b      	str	r3, [r7, #32]
 80015d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	4b89      	ldr	r3, [pc, #548]	@ (80017fc <MX_GPIO_Init+0x25c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a88      	ldr	r2, [pc, #544]	@ (80017fc <MX_GPIO_Init+0x25c>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b86      	ldr	r3, [pc, #536]	@ (80017fc <MX_GPIO_Init+0x25c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	4b82      	ldr	r3, [pc, #520]	@ (80017fc <MX_GPIO_Init+0x25c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a81      	ldr	r2, [pc, #516]	@ (80017fc <MX_GPIO_Init+0x25c>)
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b7f      	ldr	r3, [pc, #508]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	4b7b      	ldr	r3, [pc, #492]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a7a      	ldr	r2, [pc, #488]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b78      	ldr	r3, [pc, #480]	@ (80017fc <MX_GPIO_Init+0x25c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b74      	ldr	r3, [pc, #464]	@ (80017fc <MX_GPIO_Init+0x25c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a73      	ldr	r2, [pc, #460]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b71      	ldr	r3, [pc, #452]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b6d      	ldr	r3, [pc, #436]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a6c      	ldr	r2, [pc, #432]	@ (80017fc <MX_GPIO_Init+0x25c>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b6a      	ldr	r3, [pc, #424]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b66      	ldr	r3, [pc, #408]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a65      	ldr	r2, [pc, #404]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b63      	ldr	r3, [pc, #396]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b5f      	ldr	r3, [pc, #380]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a5e      	ldr	r2, [pc, #376]	@ (80017fc <MX_GPIO_Init+0x25c>)
 8001684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b5c      	ldr	r3, [pc, #368]	@ (80017fc <MX_GPIO_Init+0x25c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, R2_Pin|R1_Pin, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	2148      	movs	r1, #72	@ 0x48
 800169a:	4859      	ldr	r0, [pc, #356]	@ (8001800 <MX_GPIO_Init+0x260>)
 800169c:	f000 fe6e 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, R4_Pin|R3_Pin, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80016a6:	4857      	ldr	r0, [pc, #348]	@ (8001804 <MX_GPIO_Init+0x264>)
 80016a8:	f000 fe68 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2120      	movs	r1, #32
 80016b0:	4855      	ldr	r0, [pc, #340]	@ (8001808 <MX_GPIO_Init+0x268>)
 80016b2:	f000 fe63 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80016bc:	4853      	ldr	r0, [pc, #332]	@ (800180c <MX_GPIO_Init+0x26c>)
 80016be:	f000 fe5d 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Encendido_GPIO_Port, Led_Encendido_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016c8:	484e      	ldr	r0, [pc, #312]	@ (8001804 <MX_GPIO_Init+0x264>)
 80016ca:	f000 fe57 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Alerta_Pin|Led_Estado_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 80016d4:	484a      	ldr	r0, [pc, #296]	@ (8001800 <MX_GPIO_Init+0x260>)
 80016d6:	f000 fe51 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2140      	movs	r1, #64	@ 0x40
 80016de:	484c      	ldr	r0, [pc, #304]	@ (8001810 <MX_GPIO_Init+0x270>)
 80016e0:	f000 fe4c 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin;
 80016e4:	2334      	movs	r3, #52	@ 0x34
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4842      	ldr	r0, [pc, #264]	@ (8001800 <MX_GPIO_Init+0x260>)
 80016f8:	f000 fc94 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin R1_Pin Led_Alerta_Pin Led_Estado_Pin */
  GPIO_InitStruct.Pin = R2_Pin|R1_Pin|Led_Alerta_Pin|Led_Estado_Pin;
 80016fc:	f640 2348 	movw	r3, #2632	@ 0xa48
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	483a      	ldr	r0, [pc, #232]	@ (8001800 <MX_GPIO_Init+0x260>)
 8001716:	f000 fc85 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800171a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001720:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001724:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800172e:	4619      	mov	r1, r3
 8001730:	4838      	ldr	r0, [pc, #224]	@ (8001814 <MX_GPIO_Init+0x274>)
 8001732:	f000 fc77 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin Led_Encendido_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|Led_Encendido_Pin;
 8001736:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	482d      	ldr	r0, [pc, #180]	@ (8001804 <MX_GPIO_Init+0x264>)
 8001750:	f000 fc68 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sirena_Pin */
  GPIO_InitStruct.Pin = Sirena_Pin;
 8001754:	2320      	movs	r3, #32
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800175c:	2302      	movs	r3, #2
 800175e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Sirena_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001768:	4619      	mov	r1, r3
 800176a:	4827      	ldr	r0, [pc, #156]	@ (8001808 <MX_GPIO_Init+0x268>)
 800176c:	f000 fc5a 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_PIR_Pin Sensor_Magnetico_1_Pin */
  GPIO_InitStruct.Pin = Sensor_PIR_Pin|Sensor_Magnetico_1_Pin;
 8001770:	23c0      	movs	r3, #192	@ 0xc0
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	4821      	ldr	r0, [pc, #132]	@ (8001808 <MX_GPIO_Init+0x268>)
 8001784:	f000 fc4e 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001788:	f244 0381 	movw	r3, #16513	@ 0x4081
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	481a      	ldr	r0, [pc, #104]	@ (800180c <MX_GPIO_Init+0x26c>)
 80017a2:	f000 fc3f 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Magnetico_2_Pin */
  GPIO_InitStruct.Pin = Sensor_Magnetico_2_Pin;
 80017a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Sensor_Magnetico_2_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	4817      	ldr	r0, [pc, #92]	@ (8001818 <MX_GPIO_Init+0x278>)
 80017bc:	f000 fc32 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017c0:	2340      	movs	r3, #64	@ 0x40
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	480e      	ldr	r0, [pc, #56]	@ (8001810 <MX_GPIO_Init+0x270>)
 80017d8:	f000 fc24 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4808      	ldr	r0, [pc, #32]	@ (8001810 <MX_GPIO_Init+0x270>)
 80017f0:	f000 fc18 	bl	8002024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f4:	bf00      	nop
 80017f6:	3738      	adds	r7, #56	@ 0x38
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40021000 	.word	0x40021000
 8001804:	40021400 	.word	0x40021400
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40021800 	.word	0x40021800
 8001814:	40020800 	.word	0x40020800
 8001818:	40020c00 	.word	0x40020c00

0800181c <keypad_init>:
    {'4', '5', '6'},
    {'7', '8', '9'},
    {'*', '0', '#'}
};

void keypad_init() {
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]

    // Configurar filas como salidas en estado ALTO
    for (int i = 0; i < ROWS; i++) {
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	e022      	b.n	800187c <keypad_init+0x60>
        GPIO_InitStruct.Pin = rowPins[i];
 8001836:	4a23      	ldr	r2, [pc, #140]	@ (80018c4 <keypad_init+0xa8>)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800183e:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(rowPorts[i], &GPIO_InitStruct);
 800184c:	4a1e      	ldr	r2, [pc, #120]	@ (80018c8 <keypad_init+0xac>)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	1d3a      	adds	r2, r7, #4
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fbe3 	bl	8002024 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_SET);
 800185e:	4a1a      	ldr	r2, [pc, #104]	@ (80018c8 <keypad_init+0xac>)
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001866:	4a17      	ldr	r2, [pc, #92]	@ (80018c4 <keypad_init+0xa8>)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800186e:	2201      	movs	r2, #1
 8001870:	4619      	mov	r1, r3
 8001872:	f000 fd83 	bl	800237c <HAL_GPIO_WritePin>
    for (int i = 0; i < ROWS; i++) {
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3301      	adds	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2b03      	cmp	r3, #3
 8001880:	ddd9      	ble.n	8001836 <keypad_init+0x1a>
    }

    // Configurar columnas como entradas con pull-up
    for (int j = 0; j < COLS; j++) {
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	e014      	b.n	80018b2 <keypad_init+0x96>
        GPIO_InitStruct.Pin = colPins[j];
 8001888:	4a10      	ldr	r2, [pc, #64]	@ (80018cc <keypad_init+0xb0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001890:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001896:	2301      	movs	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(colPorts[j], &GPIO_InitStruct);
 800189a:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <keypad_init+0xb4>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	1d3a      	adds	r2, r7, #4
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fbbc 	bl	8002024 <HAL_GPIO_Init>
    for (int j = 0; j < COLS; j++) {
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	3301      	adds	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	dde7      	ble.n	8001888 <keypad_init+0x6c>
    }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000001c 	.word	0x2000001c
 80018c8:	2000000c 	.word	0x2000000c
 80018cc:	20000030 	.word	0x20000030
 80018d0:	20000024 	.word	0x20000024

080018d4 <keypad_getkey>:

char keypad_getkey() {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
    for (int i = 0; i < ROWS; i++) {
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e052      	b.n	8001986 <keypad_getkey+0xb2>
        // Poner todas las filas en alto excepto la actual
        for (int k = 0; k < ROWS; k++) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	e014      	b.n	8001910 <keypad_getkey+0x3c>
            HAL_GPIO_WritePin(rowPorts[k], rowPins[k], (i == k) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80018e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001998 <keypad_getkey+0xc4>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018ee:	4a2b      	ldr	r2, [pc, #172]	@ (800199c <keypad_getkey+0xc8>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	f000 fd39 	bl	800237c <HAL_GPIO_WritePin>
        for (int k = 0; k < ROWS; k++) {
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	3301      	adds	r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b03      	cmp	r3, #3
 8001914:	dde7      	ble.n	80018e6 <keypad_getkey+0x12>
        }

        // Leer columnas
        for (int j = 0; j < COLS; j++) {
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	e02e      	b.n	800197a <keypad_getkey+0xa6>
            if (HAL_GPIO_ReadPin(colPorts[j], colPins[j]) == GPIO_PIN_RESET) {
 800191c:	4a20      	ldr	r2, [pc, #128]	@ (80019a0 <keypad_getkey+0xcc>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001924:	491f      	ldr	r1, [pc, #124]	@ (80019a4 <keypad_getkey+0xd0>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800192c:	4619      	mov	r1, r3
 800192e:	4610      	mov	r0, r2
 8001930:	f000 fd0c 	bl	800234c <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d11c      	bne.n	8001974 <keypad_getkey+0xa0>
                HAL_Delay(50); // Anti-rebote
 800193a:	2032      	movs	r0, #50	@ 0x32
 800193c:	f000 f9aa 	bl	8001c94 <HAL_Delay>
                while (HAL_GPIO_ReadPin(colPorts[j], colPins[j]) == GPIO_PIN_RESET);
 8001940:	bf00      	nop
 8001942:	4a17      	ldr	r2, [pc, #92]	@ (80019a0 <keypad_getkey+0xcc>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800194a:	4916      	ldr	r1, [pc, #88]	@ (80019a4 <keypad_getkey+0xd0>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001952:	4619      	mov	r1, r3
 8001954:	4610      	mov	r0, r2
 8001956:	f000 fcf9 	bl	800234c <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <keypad_getkey+0x6e>
                return keymap[i][j];
 8001960:	4911      	ldr	r1, [pc, #68]	@ (80019a8 <keypad_getkey+0xd4>)
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	18ca      	adds	r2, r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	e00c      	b.n	800198e <keypad_getkey+0xba>
        for (int j = 0; j < COLS; j++) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3301      	adds	r3, #1
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b02      	cmp	r3, #2
 800197e:	ddcd      	ble.n	800191c <keypad_getkey+0x48>
    for (int i = 0; i < ROWS; i++) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b03      	cmp	r3, #3
 800198a:	dda9      	ble.n	80018e0 <keypad_getkey+0xc>
            }
        }
    }
    return '\0'; // No se presionó ninguna tecla
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000000c 	.word	0x2000000c
 800199c:	2000001c 	.word	0x2000001c
 80019a0:	20000024 	.word	0x20000024
 80019a4:	20000030 	.word	0x20000030
 80019a8:	20000038 	.word	0x20000038

080019ac <lcd_init>:
/*****************************************************************************************************************
 * @brief: Inicializar la pantalla LCD
 * @param void
 * @retval void
******************************************************************************************************************/
void lcd_init() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Tiempo de inicio según especificación HD44780
 80019b0:	2032      	movs	r0, #50	@ 0x32
 80019b2:	f000 f96f 	bl	8001c94 <HAL_Delay>
    lcd_send_command(0x30);
 80019b6:	2030      	movs	r0, #48	@ 0x30
 80019b8:	f000 f85c 	bl	8001a74 <lcd_send_command>
    HAL_Delay(5);
 80019bc:	2005      	movs	r0, #5
 80019be:	f000 f969 	bl	8001c94 <HAL_Delay>
    lcd_send_command(0x30);
 80019c2:	2030      	movs	r0, #48	@ 0x30
 80019c4:	f000 f856 	bl	8001a74 <lcd_send_command>
    HAL_Delay(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f000 f963 	bl	8001c94 <HAL_Delay>
    lcd_send_command(0x30);
 80019ce:	2030      	movs	r0, #48	@ 0x30
 80019d0:	f000 f850 	bl	8001a74 <lcd_send_command>
    lcd_send_command(0x20); // Cambiar a modo 4 bits
 80019d4:	2020      	movs	r0, #32
 80019d6:	f000 f84d 	bl	8001a74 <lcd_send_command>

    lcd_send_command(0x28); // Configuración: LCD 2 líneas, matriz 5x8
 80019da:	2028      	movs	r0, #40	@ 0x28
 80019dc:	f000 f84a 	bl	8001a74 <lcd_send_command>
    lcd_send_command(0x08); // Apagar display
 80019e0:	2008      	movs	r0, #8
 80019e2:	f000 f847 	bl	8001a74 <lcd_send_command>
    lcd_send_command(0x01); // Limpiar pantalla
 80019e6:	2001      	movs	r0, #1
 80019e8:	f000 f844 	bl	8001a74 <lcd_send_command>
    HAL_Delay(2);
 80019ec:	2002      	movs	r0, #2
 80019ee:	f000 f951 	bl	8001c94 <HAL_Delay>
    lcd_send_command(0x06); // Configurar modo de entrada
 80019f2:	2006      	movs	r0, #6
 80019f4:	f000 f83e 	bl	8001a74 <lcd_send_command>
    lcd_send_command(0x0C); // Encender display, cursor apagado
 80019f8:	200c      	movs	r0, #12
 80019fa:	f000 f83b 	bl	8001a74 <lcd_send_command>
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <lcd_clear>:
/*****************************************************************************************************************
 * @brief: Limpiar la pantalla LCD
 * @param void
 * @retval void
******************************************************************************************************************/
void lcd_clear() {
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
    lcd_send_command(0x01); // Limpiar pantalla
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 f834 	bl	8001a74 <lcd_send_command>
    HAL_Delay(2);
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f000 f941 	bl	8001c94 <HAL_Delay>
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <lcd_set_cursor>:
 * @brief: Posicionar el cursor en la pantalla LCD
 * @param row: Fila de la pantalla
 * @param col: Columna de la pantalla
 * @retval void
******************************************************************************************************************/
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	460a      	mov	r2, r1
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	4613      	mov	r3, r2
 8001a24:	71bb      	strb	r3, [r7, #6]
    uint8_t addresses[] = {0x80, 0xC0}; // Dirección DDRAM para la primera y segunda línea
 8001a26:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8001a2a:	81bb      	strh	r3, [r7, #12]
    lcd_send_command(addresses[row] + col);
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	3310      	adds	r3, #16
 8001a30:	443b      	add	r3, r7
 8001a32:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	4413      	add	r3, r2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f819 	bl	8001a74 <lcd_send_command>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <lcd_print>:
/*****************************************************************************************************************
 * @brief: Imprimir un texto en la pantalla LCD
 * @param str: Cadena de caracteres a imprimir
 * @retval void
******************************************************************************************************************/
void lcd_print(const char *str) {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001a52:	e006      	b.n	8001a62 <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f817 	bl	8001a90 <lcd_send_data>
    while (*str) {
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f4      	bne.n	8001a54 <lcd_print+0xa>
    }
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <lcd_send_command>:
/*****************************************************************************************************************
 * @brief: Enviar un comando a la pantalla LCD
 * @param cmd: Comando a enviar // entero de 8bits sin signo
 * @retval void
******************************************************************************************************************/
static void lcd_send_command(uint8_t cmd) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
    lcd_send(cmd, 0x00);
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f812 	bl	8001aac <lcd_send>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <lcd_send_data>:
/*****************************************************************************************************************
 * @brief: Enviar un dato a la pantalla LCD
 * @param data: Dato a enviar // Entero sin signo de 8bits
 * @retval void
******************************************************************************************************************/
static void lcd_send_data(uint8_t data) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
    lcd_send(data, 0x01);
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f804 	bl	8001aac <lcd_send>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <lcd_send>:
 * @brief: Enviar datos a la pantalla LCD
 * @param value: Valor a enviar
 * @param mode: Modo de operación (comando o datos)
 * @retval void
******************************************************************************************************************/
static void lcd_send(uint8_t value, uint8_t mode) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	71bb      	strb	r3, [r7, #6]
    lcd_control = lcd_backlight | mode;
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <lcd_send+0x40>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	79bb      	ldrb	r3, [r7, #6]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <lcd_send+0x44>)
 8001ac8:	701a      	strb	r2, [r3, #0]
    lcd_write_nibble(value & 0xF0);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f023 030f 	bic.w	r3, r3, #15
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f80e 	bl	8001af4 <lcd_write_nibble>
    lcd_write_nibble((value << 4) & 0xF0);
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f808 	bl	8001af4 <lcd_write_nibble>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000044 	.word	0x20000044
 8001af0:	200001ac 	.word	0x200001ac

08001af4 <lcd_write_nibble>:
/*****************************************************************************************************************
 * @brief: Escribir un nibble en la pantalla LCD
 * @param nibble: Parte alta o baja del byte a enviar
 * @retval void
******************************************************************************************************************/
static void lcd_write_nibble(uint8_t nibble) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
    uint8_t data = nibble | lcd_control | 0x04; // Habilitar bit Enable
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <lcd_write_nibble+0x58>)
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001b10:	f107 020f 	add.w	r2, r7, #15
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	214e      	movs	r1, #78	@ 0x4e
 8001b1e:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <lcd_write_nibble+0x5c>)
 8001b20:	f000 fda4 	bl	800266c <HAL_I2C_Master_Transmit>
    data &= ~0x04; // Deshabilitar bit Enable
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	f023 0304 	bic.w	r3, r3, #4
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001b2e:	f107 020f 	add.w	r2, r7, #15
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	214e      	movs	r1, #78	@ 0x4e
 8001b3c:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <lcd_write_nibble+0x5c>)
 8001b3e:	f000 fd95 	bl	800266c <HAL_I2C_Master_Transmit>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200001ac 	.word	0x200001ac
 8001b50:	200000bc 	.word	0x200000bc

08001b54 <MX_I2C2_Init>:
  * @param None
  * @retval None
  */
/******************************************************************************************************************/
void MX_I2C2_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <MX_I2C2_Init+0x50>)
 8001b5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ba8 <MX_I2C2_Init+0x54>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <MX_I2C2_Init+0x50>)
 8001b60:	4a12      	ldr	r2, [pc, #72]	@ (8001bac <MX_I2C2_Init+0x58>)
 8001b62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <MX_I2C2_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <MX_I2C2_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <MX_I2C2_Init+0x50>)
 8001b72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <MX_I2C2_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <MX_I2C2_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b84:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <MX_I2C2_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <MX_I2C2_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b90:	4804      	ldr	r0, [pc, #16]	@ (8001ba4 <MX_I2C2_Init+0x50>)
 8001b92:	f000 fc27 	bl	80023e4 <HAL_I2C_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b9c:	f7ff fae6 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200000bc 	.word	0x200000bc
 8001ba8:	40005800 	.word	0x40005800
 8001bac:	000186a0 	.word	0x000186a0

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf0 <HAL_Init+0x40>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_Init+0x40>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <HAL_Init+0x40>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f94f 	bl	8001e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fac8 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f967 	bl	8001ee6 <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f92f 	bl	8001e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	2000004c 	.word	0x2000004c
 8001c50:	20000048 	.word	0x20000048

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	2000004c 	.word	0x2000004c
 8001c78:	200001b0 	.word	0x200001b0

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	200001b0 	.word	0x200001b0

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d005      	beq.n	8001cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_Delay+0x44>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cba:	bf00      	nop
 8001cbc:	f7ff ffde 	bl	8001c7c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8f7      	bhi.n	8001cbc <HAL_Delay+0x28>
  {
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000004c 	.word	0x2000004c

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4907      	ldr	r1, [pc, #28]	@ (8001d78 <__NVIC_EnableIRQ+0x38>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	@ (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	@ (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	@ 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	@ 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e48:	d301      	bcc.n	8001e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00f      	b.n	8001e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <SysTick_Config+0x40>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e56:	210f      	movs	r1, #15
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f7ff ff8e 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <SysTick_Config+0x40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e66:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <SysTick_Config+0x40>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	e000e010 	.word	0xe000e010

08001e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff29 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea4:	f7ff ff3e 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	6978      	ldr	r0, [r7, #20]
 8001eb0:	f7ff ff8e 	bl	8001dd0 <NVIC_EncodePriority>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff5d 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff31 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffa2 	bl	8001e38 <SysTick_Config>
 8001ef4:	4603      	mov	r3, r0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f0c:	f7ff feb6 	bl	8001c7c <HAL_GetTick>
 8001f10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d008      	beq.n	8001f30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2280      	movs	r2, #128	@ 0x80
 8001f22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e052      	b.n	8001fd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0216 	bic.w	r2, r2, #22
 8001f3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <HAL_DMA_Abort+0x62>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0208 	bic.w	r2, r2, #8
 8001f6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f80:	e013      	b.n	8001faa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f82:	f7ff fe7b 	bl	8001c7c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d90c      	bls.n	8001faa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2203      	movs	r2, #3
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e015      	b.n	8001fd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e4      	bne.n	8001f82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbc:	223f      	movs	r2, #63	@ 0x3f
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d004      	beq.n	8001ffc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2280      	movs	r2, #128	@ 0x80
 8001ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e00c      	b.n	8002016 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2205      	movs	r2, #5
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e165      	b.n	800230c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	f040 8154 	bne.w	8002306 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d005      	beq.n	8002076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	2b02      	cmp	r3, #2
 8002074:	d130      	bne.n	80020d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 0201 	and.w	r2, r3, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d017      	beq.n	8002114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d123      	bne.n	8002168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0203 	and.w	r2, r3, #3
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80ae 	beq.w	8002306 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002324 <HAL_GPIO_Init+0x300>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002324 <HAL_GPIO_Init+0x300>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002324 <HAL_GPIO_Init+0x300>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c6:	4a58      	ldr	r2, [pc, #352]	@ (8002328 <HAL_GPIO_Init+0x304>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4f      	ldr	r2, [pc, #316]	@ (800232c <HAL_GPIO_Init+0x308>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d025      	beq.n	800223e <HAL_GPIO_Init+0x21a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002330 <HAL_GPIO_Init+0x30c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01f      	beq.n	800223a <HAL_GPIO_Init+0x216>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002334 <HAL_GPIO_Init+0x310>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d019      	beq.n	8002236 <HAL_GPIO_Init+0x212>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4c      	ldr	r2, [pc, #304]	@ (8002338 <HAL_GPIO_Init+0x314>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0x20e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4b      	ldr	r2, [pc, #300]	@ (800233c <HAL_GPIO_Init+0x318>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00d      	beq.n	800222e <HAL_GPIO_Init+0x20a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4a      	ldr	r2, [pc, #296]	@ (8002340 <HAL_GPIO_Init+0x31c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <HAL_GPIO_Init+0x206>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a49      	ldr	r2, [pc, #292]	@ (8002344 <HAL_GPIO_Init+0x320>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_GPIO_Init+0x202>
 8002222:	2306      	movs	r3, #6
 8002224:	e00c      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002226:	2307      	movs	r3, #7
 8002228:	e00a      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800222a:	2305      	movs	r3, #5
 800222c:	e008      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800222e:	2304      	movs	r3, #4
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800223e:	2300      	movs	r3, #0
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002250:	4935      	ldr	r1, [pc, #212]	@ (8002328 <HAL_GPIO_Init+0x304>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b3a      	ldr	r3, [pc, #232]	@ (8002348 <HAL_GPIO_Init+0x324>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002282:	4a31      	ldr	r2, [pc, #196]	@ (8002348 <HAL_GPIO_Init+0x324>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002288:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <HAL_GPIO_Init+0x324>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ac:	4a26      	ldr	r2, [pc, #152]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b2:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002300:	4a11      	ldr	r2, [pc, #68]	@ (8002348 <HAL_GPIO_Init+0x324>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	f67f ae96 	bls.w	8002040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40013800 	.word	0x40013800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020400 	.word	0x40020400
 8002334:	40020800 	.word	0x40020800
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40021000 	.word	0x40021000
 8002340:	40021400 	.word	0x40021400
 8002344:	40021800 	.word	0x40021800
 8002348:	40013c00 	.word	0x40013c00

0800234c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e001      	b.n	800236e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
 8002388:	4613      	mov	r3, r2
 800238a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002398:	e003      	b.n	80023a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	041a      	lsls	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	619a      	str	r2, [r3, #24]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c0:	887a      	ldrh	r2, [r7, #2]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	041a      	lsls	r2, r3, #16
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	400b      	ands	r3, r1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e12b      	b.n	800264e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe fedc 	bl	80011c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2224      	movs	r2, #36	@ 0x24
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002448:	f000 fc76 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 800244c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a81      	ldr	r2, [pc, #516]	@ (8002658 <HAL_I2C_Init+0x274>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d807      	bhi.n	8002468 <HAL_I2C_Init+0x84>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a80      	ldr	r2, [pc, #512]	@ (800265c <HAL_I2C_Init+0x278>)
 800245c:	4293      	cmp	r3, r2
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e006      	b.n	8002476 <HAL_I2C_Init+0x92>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a7d      	ldr	r2, [pc, #500]	@ (8002660 <HAL_I2C_Init+0x27c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0e7      	b.n	800264e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a78      	ldr	r2, [pc, #480]	@ (8002664 <HAL_I2C_Init+0x280>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9b      	lsrs	r3, r3, #18
 8002488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002658 <HAL_I2C_Init+0x274>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d802      	bhi.n	80024b8 <HAL_I2C_Init+0xd4>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3301      	adds	r3, #1
 80024b6:	e009      	b.n	80024cc <HAL_I2C_Init+0xe8>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	4a69      	ldr	r2, [pc, #420]	@ (8002668 <HAL_I2C_Init+0x284>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	3301      	adds	r3, #1
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	495c      	ldr	r1, [pc, #368]	@ (8002658 <HAL_I2C_Init+0x274>)
 80024e8:	428b      	cmp	r3, r1
 80024ea:	d819      	bhi.n	8002520 <HAL_I2C_Init+0x13c>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e59      	subs	r1, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fa:	1c59      	adds	r1, r3, #1
 80024fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002500:	400b      	ands	r3, r1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_I2C_Init+0x138>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1e59      	subs	r1, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fbb1 f3f3 	udiv	r3, r1, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251a:	e051      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 800251c:	2304      	movs	r3, #4
 800251e:	e04f      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d111      	bne.n	800254c <HAL_I2C_Init+0x168>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1e58      	subs	r0, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	440b      	add	r3, r1
 8002536:	fbb0 f3f3 	udiv	r3, r0, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	e012      	b.n	8002572 <HAL_I2C_Init+0x18e>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1e58      	subs	r0, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	0099      	lsls	r1, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_Init+0x196>
 8002576:	2301      	movs	r3, #1
 8002578:	e022      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10e      	bne.n	80025a0 <HAL_I2C_Init+0x1bc>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1e58      	subs	r0, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	440b      	add	r3, r1
 8002590:	fbb0 f3f3 	udiv	r3, r0, r3
 8002594:	3301      	adds	r3, #1
 8002596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800259e:	e00f      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e58      	subs	r0, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	0099      	lsls	r1, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	6809      	ldr	r1, [r1, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6911      	ldr	r1, [r2, #16]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68d2      	ldr	r2, [r2, #12]
 80025fa:	4311      	orrs	r1, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	430b      	orrs	r3, r1
 8002602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	000186a0 	.word	0x000186a0
 800265c:	001e847f 	.word	0x001e847f
 8002660:	003d08ff 	.word	0x003d08ff
 8002664:	431bde83 	.word	0x431bde83
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	461a      	mov	r2, r3
 8002678:	460b      	mov	r3, r1
 800267a:	817b      	strh	r3, [r7, #10]
 800267c:	4613      	mov	r3, r2
 800267e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff fafc 	bl	8001c7c <HAL_GetTick>
 8002684:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	f040 80e0 	bne.w	8002854 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2319      	movs	r3, #25
 800269a:	2201      	movs	r2, #1
 800269c:	4970      	ldr	r1, [pc, #448]	@ (8002860 <HAL_I2C_Master_Transmit+0x1f4>)
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f964 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0d3      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_I2C_Master_Transmit+0x50>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e0cc      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d007      	beq.n	80026e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2221      	movs	r2, #33	@ 0x21
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2210      	movs	r2, #16
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	893a      	ldrh	r2, [r7, #8]
 8002712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a50      	ldr	r2, [pc, #320]	@ (8002864 <HAL_I2C_Master_Transmit+0x1f8>)
 8002722:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002724:	8979      	ldrh	r1, [r7, #10]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6a3a      	ldr	r2, [r7, #32]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f89c 	bl	8002868 <I2C_MasterRequestWrite>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e08d      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002750:	e066      	b.n	8002820 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	6a39      	ldr	r1, [r7, #32]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fa22 	bl	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	2b04      	cmp	r3, #4
 8002768:	d107      	bne.n	800277a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06b      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d11b      	bne.n	80027f4 <HAL_I2C_Master_Transmit+0x188>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d017      	beq.n	80027f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	6a39      	ldr	r1, [r7, #32]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fa19 	bl	8002c30 <I2C_WaitOnBTFFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	2b04      	cmp	r3, #4
 800280a:	d107      	bne.n	800281c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e01a      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d194      	bne.n	8002752 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e000      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002854:	2302      	movs	r3, #2
  }
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	00100002 	.word	0x00100002
 8002864:	ffff0000 	.word	0xffff0000

08002868 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	460b      	mov	r3, r1
 8002876:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d006      	beq.n	8002892 <I2C_MasterRequestWrite+0x2a>
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d003      	beq.n	8002892 <I2C_MasterRequestWrite+0x2a>
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002890:	d108      	bne.n	80028a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e00b      	b.n	80028bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	2b12      	cmp	r3, #18
 80028aa:	d107      	bne.n	80028bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f84f 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00d      	beq.n	80028f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e2:	d103      	bne.n	80028ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e035      	b.n	800295c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028f8:	d108      	bne.n	800290c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fa:	897b      	ldrh	r3, [r7, #10]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002908:	611a      	str	r2, [r3, #16]
 800290a:	e01b      	b.n	8002944 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800290c:	897b      	ldrh	r3, [r7, #10]
 800290e:	11db      	asrs	r3, r3, #7
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0306 	and.w	r3, r3, #6
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f063 030f 	orn	r3, r3, #15
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	490e      	ldr	r1, [pc, #56]	@ (8002964 <I2C_MasterRequestWrite+0xfc>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f898 	bl	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e010      	b.n	800295c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4907      	ldr	r1, [pc, #28]	@ (8002968 <I2C_MasterRequestWrite+0x100>)
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f888 	bl	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	00010008 	.word	0x00010008
 8002968:	00010002 	.word	0x00010002

0800296c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800297c:	e048      	b.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d044      	beq.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7ff f979 	bl	8001c7c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d139      	bne.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d10d      	bne.n	80029c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	43da      	mvns	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4013      	ands	r3, r2
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	e00c      	b.n	80029dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	43da      	mvns	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4013      	ands	r3, r2
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bf0c      	ite	eq
 80029d4:	2301      	moveq	r3, #1
 80029d6:	2300      	movne	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d116      	bne.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e023      	b.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d10d      	bne.n	8002a36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	43da      	mvns	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	e00c      	b.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4013      	ands	r3, r2
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d093      	beq.n	800297e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a6e:	e071      	b.n	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7e:	d123      	bne.n	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f043 0204 	orr.w	r2, r3, #4
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e067      	b.n	8002b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d041      	beq.n	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad0:	f7ff f8d4 	bl	8001c7c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d302      	bcc.n	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d136      	bne.n	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d10c      	bne.n	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	43da      	mvns	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bf14      	ite	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	e00b      	b.n	8002b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	43da      	mvns	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4013      	ands	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e021      	b.n	8002b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	0c1b      	lsrs	r3, r3, #16
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10c      	bne.n	8002b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	43da      	mvns	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e00b      	b.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4013      	ands	r3, r2
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f47f af6d 	bne.w	8002a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bac:	e034      	b.n	8002c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f886 	bl	8002cc0 <I2C_IsAcknowledgeFailed>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e034      	b.n	8002c28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d028      	beq.n	8002c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7ff f859 	bl	8001c7c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d11d      	bne.n	8002c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be6:	2b80      	cmp	r3, #128	@ 0x80
 8002be8:	d016      	beq.n	8002c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e007      	b.n	8002c28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c22:	2b80      	cmp	r3, #128	@ 0x80
 8002c24:	d1c3      	bne.n	8002bae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c3c:	e034      	b.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f83e 	bl	8002cc0 <I2C_IsAcknowledgeFailed>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e034      	b.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d028      	beq.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7ff f811 	bl	8001c7c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d11d      	bne.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d016      	beq.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e007      	b.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d1c3      	bne.n	8002c3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd6:	d11b      	bne.n	8002d10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ce0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	f043 0204 	orr.w	r2, r3, #4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	@ (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000008 	.word	0x20000008

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d3c:	f7ff fff0 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0a9b      	lsrs	r3, r3, #10
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	@ (8002d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08004a08 	.word	0x08004a08

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d64:	f7ff ffdc 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0b5b      	lsrs	r3, r3, #13
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08004a08 	.word	0x08004a08

08002d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e042      	b.n	8002e20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fa52 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	@ 0x24
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fd5f 	bl	8003890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	@ 0x28
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d175      	bne.n	8002f34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_UART_Transmit+0x2c>
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e06e      	b.n	8002f36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2221      	movs	r2, #33	@ 0x21
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e66:	f7fe ff09 	bl	8001c7c <HAL_GetTick>
 8002e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	88fa      	ldrh	r2, [r7, #6]
 8002e70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e80:	d108      	bne.n	8002e94 <HAL_UART_Transmit+0x6c>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d104      	bne.n	8002e94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e003      	b.n	8002e9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e9c:	e02e      	b.n	8002efc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2180      	movs	r1, #128	@ 0x80
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fafb 	bl	80034a4 <UART_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e03a      	b.n	8002f36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10b      	bne.n	8002ede <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	3302      	adds	r3, #2
 8002eda:	61bb      	str	r3, [r7, #24]
 8002edc:	e007      	b.n	8002eee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3301      	adds	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1cb      	bne.n	8002e9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2140      	movs	r1, #64	@ 0x40
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fac7 	bl	80034a4 <UART_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e006      	b.n	8002f36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b0ba      	sub	sp, #232	@ 0xe8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x66>
 8002f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fbb8 	bl	8003714 <UART_Receive_IT>
      return;
 8002fa4:	e25b      	b.n	800345e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80de 	beq.w	800316c <HAL_UART_IRQHandler+0x22c>
 8002fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80d1 	beq.w	800316c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_UART_IRQHandler+0xae>
 8002fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_UART_IRQHandler+0xd2>
 8002ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	f043 0202 	orr.w	r2, r3, #2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_UART_IRQHandler+0xf6>
 800301e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302e:	f043 0204 	orr.w	r2, r3, #4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d011      	beq.n	8003066 <HAL_UART_IRQHandler+0x126>
 8003042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800304e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	f043 0208 	orr.w	r2, r3, #8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 81f2 	beq.w	8003454 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x14e>
 800307c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fb43 	bl	8003714 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003098:	2b40      	cmp	r3, #64	@ 0x40
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d103      	bne.n	80030ba <HAL_UART_IRQHandler+0x17a>
 80030b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d04f      	beq.n	800315a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fa4b 	bl	8003556 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ca:	2b40      	cmp	r3, #64	@ 0x40
 80030cc:	d141      	bne.n	8003152 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3314      	adds	r3, #20
 80030d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80030e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3314      	adds	r3, #20
 80030f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80030fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80030fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003106:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1d9      	bne.n	80030ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d013      	beq.n	800314a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003126:	4a7e      	ldr	r2, [pc, #504]	@ (8003320 <HAL_UART_IRQHandler+0x3e0>)
 8003128:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe ff55 	bl	8001fde <HAL_DMA_Abort_IT>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003144:	4610      	mov	r0, r2
 8003146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	e00e      	b.n	8003168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f994 	bl	8003478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003150:	e00a      	b.n	8003168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f990 	bl	8003478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003158:	e006      	b.n	8003168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f98c 	bl	8003478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003166:	e175      	b.n	8003454 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	bf00      	nop
    return;
 800316a:	e173      	b.n	8003454 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 814f 	bne.w	8003414 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8148 	beq.w	8003414 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8141 	beq.w	8003414 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	2b40      	cmp	r3, #64	@ 0x40
 80031b4:	f040 80b6 	bne.w	8003324 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8145 	beq.w	8003458 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031d6:	429a      	cmp	r2, r3
 80031d8:	f080 813e 	bcs.w	8003458 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ee:	f000 8088 	beq.w	8003302 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003208:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800320c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003210:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800321e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800322a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1d9      	bne.n	80031f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3314      	adds	r3, #20
 8003244:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003246:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800324e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3314      	adds	r3, #20
 800325e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003262:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003266:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800326a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e1      	bne.n	800323e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3314      	adds	r3, #20
 8003280:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800328a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800328c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800329e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e3      	bne.n	800327a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80032d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d2:	f023 0310 	bic.w	r3, r3, #16
 80032d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80032e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80032e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80032f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e3      	bne.n	80032c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe fdfe 	bl	8001efe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003310:	b29b      	uxth	r3, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	b29b      	uxth	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f8b7 	bl	800348c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800331e:	e09b      	b.n	8003458 <HAL_UART_IRQHandler+0x518>
 8003320:	0800361d 	.word	0x0800361d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800332c:	b29b      	uxth	r3, r3
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 808e 	beq.w	800345c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8089 	beq.w	800345c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800335a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003360:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800336e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003370:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003374:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800337c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e3      	bne.n	800334a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3314      	adds	r3, #20
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	623b      	str	r3, [r7, #32]
   return(result);
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3314      	adds	r3, #20
 80033a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80033a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e3      	bne.n	8003382 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	330c      	adds	r3, #12
 80033ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0310 	bic.w	r3, r3, #16
 80033de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80033ec:	61fa      	str	r2, [r7, #28]
 80033ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f0:	69b9      	ldr	r1, [r7, #24]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	e841 2300 	strex	r3, r2, [r1]
 80033f8:	617b      	str	r3, [r7, #20]
   return(result);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e3      	bne.n	80033c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003406:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f83d 	bl	800348c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003412:	e023      	b.n	800345c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341c:	2b00      	cmp	r3, #0
 800341e:	d009      	beq.n	8003434 <HAL_UART_IRQHandler+0x4f4>
 8003420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f909 	bl	8003644 <UART_Transmit_IT>
    return;
 8003432:	e014      	b.n	800345e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00e      	beq.n	800345e <HAL_UART_IRQHandler+0x51e>
 8003440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f949 	bl	80036e4 <UART_EndTransmit_IT>
    return;
 8003452:	e004      	b.n	800345e <HAL_UART_IRQHandler+0x51e>
    return;
 8003454:	bf00      	nop
 8003456:	e002      	b.n	800345e <HAL_UART_IRQHandler+0x51e>
      return;
 8003458:	bf00      	nop
 800345a:	e000      	b.n	800345e <HAL_UART_IRQHandler+0x51e>
      return;
 800345c:	bf00      	nop
  }
}
 800345e:	37e8      	adds	r7, #232	@ 0xe8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b4:	e03b      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d037      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fe fbdd 	bl	8001c7c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e03a      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d023      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0x8a>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b80      	cmp	r3, #128	@ 0x80
 80034ea:	d020      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0x8a>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b40      	cmp	r3, #64	@ 0x40
 80034f0:	d01d      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d116      	bne.n	800352e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f81d 	bl	8003556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2208      	movs	r2, #8
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e00f      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	429a      	cmp	r2, r3
 800354a:	d0b4      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003556:	b480      	push	{r7}
 8003558:	b095      	sub	sp, #84	@ 0x54
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800357e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003582:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003584:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800358c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e5      	bne.n	800355e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3314      	adds	r3, #20
 8003598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3314      	adds	r3, #20
 80035b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e5      	bne.n	8003592 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d119      	bne.n	8003602 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	330c      	adds	r3, #12
 80035d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 0310 	bic.w	r3, r3, #16
 80035e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ee:	61ba      	str	r2, [r7, #24]
 80035f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	6979      	ldr	r1, [r7, #20]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	613b      	str	r3, [r7, #16]
   return(result);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e5      	bne.n	80035ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003610:	bf00      	nop
 8003612:	3754      	adds	r7, #84	@ 0x54
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7ff ff1e 	bl	8003478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b21      	cmp	r3, #33	@ 0x21
 8003656:	d13e      	bne.n	80036d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003660:	d114      	bne.n	800368c <UART_Transmit_IT+0x48>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d110      	bne.n	800368c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800367e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	1c9a      	adds	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	621a      	str	r2, [r3, #32]
 800368a:	e008      	b.n	800369e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	1c59      	adds	r1, r3, #1
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6211      	str	r1, [r2, #32]
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	4619      	mov	r1, r3
 80036ac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10f      	bne.n	80036d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e000      	b.n	80036d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fd ff03 	bl	8001510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	@ 0x30
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b22      	cmp	r3, #34	@ 0x22
 8003726:	f040 80ae 	bne.w	8003886 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003732:	d117      	bne.n	8003764 <UART_Receive_IT+0x50>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d113      	bne.n	8003764 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	b29a      	uxth	r2, r3
 8003754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003756:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	1c9a      	adds	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	629a      	str	r2, [r3, #40]	@ 0x28
 8003762:	e026      	b.n	80037b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800376a:	2300      	movs	r3, #0
 800376c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003776:	d007      	beq.n	8003788 <UART_Receive_IT+0x74>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <UART_Receive_IT+0x82>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e008      	b.n	80037a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4619      	mov	r1, r3
 80037c0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d15d      	bne.n	8003882 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0220 	bic.w	r2, r2, #32
 80037d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	2b01      	cmp	r3, #1
 800380a:	d135      	bne.n	8003878 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	613b      	str	r3, [r7, #16]
   return(result);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f023 0310 	bic.w	r3, r3, #16
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003832:	623a      	str	r2, [r7, #32]
 8003834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	6a3a      	ldr	r2, [r7, #32]
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e5      	bne.n	8003812 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b10      	cmp	r3, #16
 8003852:	d10a      	bne.n	800386a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800386e:	4619      	mov	r1, r3
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fe0b 	bl	800348c <HAL_UARTEx_RxEventCallback>
 8003876:	e002      	b.n	800387e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff fdf3 	bl	8003464 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e002      	b.n	8003888 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3730      	adds	r7, #48	@ 0x30
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003894:	b0c0      	sub	sp, #256	@ 0x100
 8003896:	af00      	add	r7, sp, #0
 8003898:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ac:	68d9      	ldr	r1, [r3, #12]
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	ea40 0301 	orr.w	r3, r0, r1
 80038b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80038e8:	f021 010c 	bic.w	r1, r1, #12
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038f6:	430b      	orrs	r3, r1
 80038f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390a:	6999      	ldr	r1, [r3, #24]
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	ea40 0301 	orr.w	r3, r0, r1
 8003916:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b95      	ldr	r3, [pc, #596]	@ (8003b74 <UART_SetConfig+0x2e4>)
 8003920:	429a      	cmp	r2, r3
 8003922:	d011      	beq.n	8003948 <UART_SetConfig+0xb8>
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4b93      	ldr	r3, [pc, #588]	@ (8003b78 <UART_SetConfig+0x2e8>)
 800392c:	429a      	cmp	r2, r3
 800392e:	d00b      	beq.n	8003948 <UART_SetConfig+0xb8>
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b91      	ldr	r3, [pc, #580]	@ (8003b7c <UART_SetConfig+0x2ec>)
 8003938:	429a      	cmp	r2, r3
 800393a:	d005      	beq.n	8003948 <UART_SetConfig+0xb8>
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b8f      	ldr	r3, [pc, #572]	@ (8003b80 <UART_SetConfig+0x2f0>)
 8003944:	429a      	cmp	r2, r3
 8003946:	d104      	bne.n	8003952 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003948:	f7ff fa0a 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 800394c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003950:	e003      	b.n	800395a <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003952:	f7ff f9f1 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8003956:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003964:	f040 8110 	bne.w	8003b88 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800396c:	2200      	movs	r2, #0
 800396e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003972:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003976:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800397a:	4622      	mov	r2, r4
 800397c:	462b      	mov	r3, r5
 800397e:	1891      	adds	r1, r2, r2
 8003980:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003982:	415b      	adcs	r3, r3
 8003984:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003986:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800398a:	4621      	mov	r1, r4
 800398c:	eb12 0801 	adds.w	r8, r2, r1
 8003990:	4629      	mov	r1, r5
 8003992:	eb43 0901 	adc.w	r9, r3, r1
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039aa:	4690      	mov	r8, r2
 80039ac:	4699      	mov	r9, r3
 80039ae:	4623      	mov	r3, r4
 80039b0:	eb18 0303 	adds.w	r3, r8, r3
 80039b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039b8:	462b      	mov	r3, r5
 80039ba:	eb49 0303 	adc.w	r3, r9, r3
 80039be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039d6:	460b      	mov	r3, r1
 80039d8:	18db      	adds	r3, r3, r3
 80039da:	653b      	str	r3, [r7, #80]	@ 0x50
 80039dc:	4613      	mov	r3, r2
 80039de:	eb42 0303 	adc.w	r3, r2, r3
 80039e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80039e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80039e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80039ec:	f7fc fc80 	bl	80002f0 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4b63      	ldr	r3, [pc, #396]	@ (8003b84 <UART_SetConfig+0x2f4>)
 80039f6:	fba3 2302 	umull	r2, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	011c      	lsls	r4, r3, #4
 80039fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a10:	4642      	mov	r2, r8
 8003a12:	464b      	mov	r3, r9
 8003a14:	1891      	adds	r1, r2, r2
 8003a16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a18:	415b      	adcs	r3, r3
 8003a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a20:	4641      	mov	r1, r8
 8003a22:	eb12 0a01 	adds.w	sl, r2, r1
 8003a26:	4649      	mov	r1, r9
 8003a28:	eb43 0b01 	adc.w	fp, r3, r1
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a40:	4692      	mov	sl, r2
 8003a42:	469b      	mov	fp, r3
 8003a44:	4643      	mov	r3, r8
 8003a46:	eb1a 0303 	adds.w	r3, sl, r3
 8003a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	eb4b 0303 	adc.w	r3, fp, r3
 8003a54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	18db      	adds	r3, r3, r3
 8003a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a72:	4613      	mov	r3, r2
 8003a74:	eb42 0303 	adc.w	r3, r2, r3
 8003a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a82:	f7fc fc35 	bl	80002f0 <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b84 <UART_SetConfig+0x2f4>)
 8003a8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	2264      	movs	r2, #100	@ 0x64
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	1acb      	subs	r3, r1, r3
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003aa2:	4b38      	ldr	r3, [pc, #224]	@ (8003b84 <UART_SetConfig+0x2f4>)
 8003aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ab0:	441c      	add	r4, r3
 8003ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003abc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ac0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003acc:	415b      	adcs	r3, r3
 8003ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ad0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	1851      	adds	r1, r2, r1
 8003ad8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ada:	4649      	mov	r1, r9
 8003adc:	414b      	adcs	r3, r1
 8003ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003aec:	4659      	mov	r1, fp
 8003aee:	00cb      	lsls	r3, r1, #3
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af6:	4651      	mov	r1, sl
 8003af8:	00ca      	lsls	r2, r1, #3
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	4642      	mov	r2, r8
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b08:	464b      	mov	r3, r9
 8003b0a:	460a      	mov	r2, r1
 8003b0c:	eb42 0303 	adc.w	r3, r2, r3
 8003b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b28:	460b      	mov	r3, r1
 8003b2a:	18db      	adds	r3, r3, r3
 8003b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b2e:	4613      	mov	r3, r2
 8003b30:	eb42 0303 	adc.w	r3, r2, r3
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b3e:	f7fc fbd7 	bl	80002f0 <__aeabi_uldivmod>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4b0f      	ldr	r3, [pc, #60]	@ (8003b84 <UART_SetConfig+0x2f4>)
 8003b48:	fba3 1302 	umull	r1, r3, r3, r2
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	2164      	movs	r1, #100	@ 0x64
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	3332      	adds	r3, #50	@ 0x32
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <UART_SetConfig+0x2f4>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	f003 0207 	and.w	r2, r3, #7
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4422      	add	r2, r4
 8003b6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b70:	e10a      	b.n	8003d88 <UART_SetConfig+0x4f8>
 8003b72:	bf00      	nop
 8003b74:	40011000 	.word	0x40011000
 8003b78:	40011400 	.word	0x40011400
 8003b7c:	40011800 	.word	0x40011800
 8003b80:	40011c00 	.word	0x40011c00
 8003b84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b9a:	4642      	mov	r2, r8
 8003b9c:	464b      	mov	r3, r9
 8003b9e:	1891      	adds	r1, r2, r2
 8003ba0:	6239      	str	r1, [r7, #32]
 8003ba2:	415b      	adcs	r3, r3
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003baa:	4641      	mov	r1, r8
 8003bac:	1854      	adds	r4, r2, r1
 8003bae:	4649      	mov	r1, r9
 8003bb0:	eb43 0501 	adc.w	r5, r3, r1
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	00eb      	lsls	r3, r5, #3
 8003bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc2:	00e2      	lsls	r2, r4, #3
 8003bc4:	4614      	mov	r4, r2
 8003bc6:	461d      	mov	r5, r3
 8003bc8:	4643      	mov	r3, r8
 8003bca:	18e3      	adds	r3, r4, r3
 8003bcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	eb45 0303 	adc.w	r3, r5, r3
 8003bd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003be6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	008b      	lsls	r3, r1, #2
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c00:	4621      	mov	r1, r4
 8003c02:	008a      	lsls	r2, r1, #2
 8003c04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c08:	f7fc fb72 	bl	80002f0 <__aeabi_uldivmod>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4b60      	ldr	r3, [pc, #384]	@ (8003d94 <UART_SetConfig+0x504>)
 8003c12:	fba3 2302 	umull	r2, r3, r3, r2
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	011c      	lsls	r4, r3, #4
 8003c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	1891      	adds	r1, r2, r2
 8003c32:	61b9      	str	r1, [r7, #24]
 8003c34:	415b      	adcs	r3, r3
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	1851      	adds	r1, r2, r1
 8003c40:	6139      	str	r1, [r7, #16]
 8003c42:	4649      	mov	r1, r9
 8003c44:	414b      	adcs	r3, r1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c54:	4659      	mov	r1, fp
 8003c56:	00cb      	lsls	r3, r1, #3
 8003c58:	4651      	mov	r1, sl
 8003c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c5e:	4651      	mov	r1, sl
 8003c60:	00ca      	lsls	r2, r1, #3
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	4642      	mov	r2, r8
 8003c6a:	189b      	adds	r3, r3, r2
 8003c6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c70:	464b      	mov	r3, r9
 8003c72:	460a      	mov	r2, r1
 8003c74:	eb42 0303 	adc.w	r3, r2, r3
 8003c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c94:	4649      	mov	r1, r9
 8003c96:	008b      	lsls	r3, r1, #2
 8003c98:	4641      	mov	r1, r8
 8003c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	008a      	lsls	r2, r1, #2
 8003ca2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ca6:	f7fc fb23 	bl	80002f0 <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4b38      	ldr	r3, [pc, #224]	@ (8003d94 <UART_SetConfig+0x504>)
 8003cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2264      	movs	r2, #100	@ 0x64
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	1acb      	subs	r3, r1, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	@ 0x32
 8003cc4:	4a33      	ldr	r2, [pc, #204]	@ (8003d94 <UART_SetConfig+0x504>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cd0:	441c      	add	r4, r3
 8003cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cda:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	1891      	adds	r1, r2, r2
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	415b      	adcs	r3, r3
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	1851      	adds	r1, r2, r1
 8003cf4:	6039      	str	r1, [r7, #0]
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	414b      	adcs	r3, r1
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d08:	4659      	mov	r1, fp
 8003d0a:	00cb      	lsls	r3, r1, #3
 8003d0c:	4651      	mov	r1, sl
 8003d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d12:	4651      	mov	r1, sl
 8003d14:	00ca      	lsls	r2, r1, #3
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	189b      	adds	r3, r3, r2
 8003d20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d22:	464b      	mov	r3, r9
 8003d24:	460a      	mov	r2, r1
 8003d26:	eb42 0303 	adc.w	r3, r2, r3
 8003d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d36:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d44:	4649      	mov	r1, r9
 8003d46:	008b      	lsls	r3, r1, #2
 8003d48:	4641      	mov	r1, r8
 8003d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4e:	4641      	mov	r1, r8
 8003d50:	008a      	lsls	r2, r1, #2
 8003d52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d56:	f7fc facb 	bl	80002f0 <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <UART_SetConfig+0x504>)
 8003d60:	fba3 1302 	umull	r1, r3, r3, r2
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	2164      	movs	r1, #100	@ 0x64
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	3332      	adds	r3, #50	@ 0x32
 8003d72:	4a08      	ldr	r2, [pc, #32]	@ (8003d94 <UART_SetConfig+0x504>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	f003 020f 	and.w	r2, r3, #15
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4422      	add	r2, r4
 8003d86:	609a      	str	r2, [r3, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d94:	51eb851f 	.word	0x51eb851f

08003d98 <sniprintf>:
 8003d98:	b40c      	push	{r2, r3}
 8003d9a:	b530      	push	{r4, r5, lr}
 8003d9c:	4b17      	ldr	r3, [pc, #92]	@ (8003dfc <sniprintf+0x64>)
 8003d9e:	1e0c      	subs	r4, r1, #0
 8003da0:	681d      	ldr	r5, [r3, #0]
 8003da2:	b09d      	sub	sp, #116	@ 0x74
 8003da4:	da08      	bge.n	8003db8 <sniprintf+0x20>
 8003da6:	238b      	movs	r3, #139	@ 0x8b
 8003da8:	602b      	str	r3, [r5, #0]
 8003daa:	f04f 30ff 	mov.w	r0, #4294967295
 8003dae:	b01d      	add	sp, #116	@ 0x74
 8003db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003db4:	b002      	add	sp, #8
 8003db6:	4770      	bx	lr
 8003db8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003dbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003dc0:	bf14      	ite	ne
 8003dc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003dc6:	4623      	moveq	r3, r4
 8003dc8:	9304      	str	r3, [sp, #16]
 8003dca:	9307      	str	r3, [sp, #28]
 8003dcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dd0:	9002      	str	r0, [sp, #8]
 8003dd2:	9006      	str	r0, [sp, #24]
 8003dd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003dd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003dda:	ab21      	add	r3, sp, #132	@ 0x84
 8003ddc:	a902      	add	r1, sp, #8
 8003dde:	4628      	mov	r0, r5
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	f000 f9bd 	bl	8004160 <_svfiprintf_r>
 8003de6:	1c43      	adds	r3, r0, #1
 8003de8:	bfbc      	itt	lt
 8003dea:	238b      	movlt	r3, #139	@ 0x8b
 8003dec:	602b      	strlt	r3, [r5, #0]
 8003dee:	2c00      	cmp	r4, #0
 8003df0:	d0dd      	beq.n	8003dae <sniprintf+0x16>
 8003df2:	9b02      	ldr	r3, [sp, #8]
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e7d9      	b.n	8003dae <sniprintf+0x16>
 8003dfa:	bf00      	nop
 8003dfc:	20000050 	.word	0x20000050

08003e00 <siprintf>:
 8003e00:	b40e      	push	{r1, r2, r3}
 8003e02:	b500      	push	{lr}
 8003e04:	b09c      	sub	sp, #112	@ 0x70
 8003e06:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e08:	9002      	str	r0, [sp, #8]
 8003e0a:	9006      	str	r0, [sp, #24]
 8003e0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e10:	4809      	ldr	r0, [pc, #36]	@ (8003e38 <siprintf+0x38>)
 8003e12:	9107      	str	r1, [sp, #28]
 8003e14:	9104      	str	r1, [sp, #16]
 8003e16:	4909      	ldr	r1, [pc, #36]	@ (8003e3c <siprintf+0x3c>)
 8003e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e1c:	9105      	str	r1, [sp, #20]
 8003e1e:	6800      	ldr	r0, [r0, #0]
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	a902      	add	r1, sp, #8
 8003e24:	f000 f99c 	bl	8004160 <_svfiprintf_r>
 8003e28:	9b02      	ldr	r3, [sp, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	b01c      	add	sp, #112	@ 0x70
 8003e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e34:	b003      	add	sp, #12
 8003e36:	4770      	bx	lr
 8003e38:	20000050 	.word	0x20000050
 8003e3c:	ffff0208 	.word	0xffff0208

08003e40 <memset>:
 8003e40:	4402      	add	r2, r0
 8003e42:	4603      	mov	r3, r0
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d100      	bne.n	8003e4a <memset+0xa>
 8003e48:	4770      	bx	lr
 8003e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4e:	e7f9      	b.n	8003e44 <memset+0x4>

08003e50 <__errno>:
 8003e50:	4b01      	ldr	r3, [pc, #4]	@ (8003e58 <__errno+0x8>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000050 	.word	0x20000050

08003e5c <__libc_init_array>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e94 <__libc_init_array+0x38>)
 8003e60:	4c0d      	ldr	r4, [pc, #52]	@ (8003e98 <__libc_init_array+0x3c>)
 8003e62:	1b64      	subs	r4, r4, r5
 8003e64:	10a4      	asrs	r4, r4, #2
 8003e66:	2600      	movs	r6, #0
 8003e68:	42a6      	cmp	r6, r4
 8003e6a:	d109      	bne.n	8003e80 <__libc_init_array+0x24>
 8003e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e9c <__libc_init_array+0x40>)
 8003e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8003ea0 <__libc_init_array+0x44>)
 8003e70:	f000 fc6e 	bl	8004750 <_init>
 8003e74:	1b64      	subs	r4, r4, r5
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	2600      	movs	r6, #0
 8003e7a:	42a6      	cmp	r6, r4
 8003e7c:	d105      	bne.n	8003e8a <__libc_init_array+0x2e>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e84:	4798      	blx	r3
 8003e86:	3601      	adds	r6, #1
 8003e88:	e7ee      	b.n	8003e68 <__libc_init_array+0xc>
 8003e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8e:	4798      	blx	r3
 8003e90:	3601      	adds	r6, #1
 8003e92:	e7f2      	b.n	8003e7a <__libc_init_array+0x1e>
 8003e94:	08004a4c 	.word	0x08004a4c
 8003e98:	08004a4c 	.word	0x08004a4c
 8003e9c:	08004a4c 	.word	0x08004a4c
 8003ea0:	08004a50 	.word	0x08004a50

08003ea4 <__retarget_lock_acquire_recursive>:
 8003ea4:	4770      	bx	lr

08003ea6 <__retarget_lock_release_recursive>:
 8003ea6:	4770      	bx	lr

08003ea8 <strcpy>:
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eae:	f803 2b01 	strb.w	r2, [r3], #1
 8003eb2:	2a00      	cmp	r2, #0
 8003eb4:	d1f9      	bne.n	8003eaa <strcpy+0x2>
 8003eb6:	4770      	bx	lr

08003eb8 <_free_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4605      	mov	r5, r0
 8003ebc:	2900      	cmp	r1, #0
 8003ebe:	d041      	beq.n	8003f44 <_free_r+0x8c>
 8003ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec4:	1f0c      	subs	r4, r1, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bfb8      	it	lt
 8003eca:	18e4      	addlt	r4, r4, r3
 8003ecc:	f000 f8e0 	bl	8004090 <__malloc_lock>
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f48 <_free_r+0x90>)
 8003ed2:	6813      	ldr	r3, [r2, #0]
 8003ed4:	b933      	cbnz	r3, 8003ee4 <_free_r+0x2c>
 8003ed6:	6063      	str	r3, [r4, #4]
 8003ed8:	6014      	str	r4, [r2, #0]
 8003eda:	4628      	mov	r0, r5
 8003edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ee0:	f000 b8dc 	b.w	800409c <__malloc_unlock>
 8003ee4:	42a3      	cmp	r3, r4
 8003ee6:	d908      	bls.n	8003efa <_free_r+0x42>
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	1821      	adds	r1, r4, r0
 8003eec:	428b      	cmp	r3, r1
 8003eee:	bf01      	itttt	eq
 8003ef0:	6819      	ldreq	r1, [r3, #0]
 8003ef2:	685b      	ldreq	r3, [r3, #4]
 8003ef4:	1809      	addeq	r1, r1, r0
 8003ef6:	6021      	streq	r1, [r4, #0]
 8003ef8:	e7ed      	b.n	8003ed6 <_free_r+0x1e>
 8003efa:	461a      	mov	r2, r3
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	b10b      	cbz	r3, 8003f04 <_free_r+0x4c>
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	d9fa      	bls.n	8003efa <_free_r+0x42>
 8003f04:	6811      	ldr	r1, [r2, #0]
 8003f06:	1850      	adds	r0, r2, r1
 8003f08:	42a0      	cmp	r0, r4
 8003f0a:	d10b      	bne.n	8003f24 <_free_r+0x6c>
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	4401      	add	r1, r0
 8003f10:	1850      	adds	r0, r2, r1
 8003f12:	4283      	cmp	r3, r0
 8003f14:	6011      	str	r1, [r2, #0]
 8003f16:	d1e0      	bne.n	8003eda <_free_r+0x22>
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	6053      	str	r3, [r2, #4]
 8003f1e:	4408      	add	r0, r1
 8003f20:	6010      	str	r0, [r2, #0]
 8003f22:	e7da      	b.n	8003eda <_free_r+0x22>
 8003f24:	d902      	bls.n	8003f2c <_free_r+0x74>
 8003f26:	230c      	movs	r3, #12
 8003f28:	602b      	str	r3, [r5, #0]
 8003f2a:	e7d6      	b.n	8003eda <_free_r+0x22>
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	1821      	adds	r1, r4, r0
 8003f30:	428b      	cmp	r3, r1
 8003f32:	bf04      	itt	eq
 8003f34:	6819      	ldreq	r1, [r3, #0]
 8003f36:	685b      	ldreq	r3, [r3, #4]
 8003f38:	6063      	str	r3, [r4, #4]
 8003f3a:	bf04      	itt	eq
 8003f3c:	1809      	addeq	r1, r1, r0
 8003f3e:	6021      	streq	r1, [r4, #0]
 8003f40:	6054      	str	r4, [r2, #4]
 8003f42:	e7ca      	b.n	8003eda <_free_r+0x22>
 8003f44:	bd38      	pop	{r3, r4, r5, pc}
 8003f46:	bf00      	nop
 8003f48:	200002f8 	.word	0x200002f8

08003f4c <sbrk_aligned>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	4e0f      	ldr	r6, [pc, #60]	@ (8003f8c <sbrk_aligned+0x40>)
 8003f50:	460c      	mov	r4, r1
 8003f52:	6831      	ldr	r1, [r6, #0]
 8003f54:	4605      	mov	r5, r0
 8003f56:	b911      	cbnz	r1, 8003f5e <sbrk_aligned+0x12>
 8003f58:	f000 fba6 	bl	80046a8 <_sbrk_r>
 8003f5c:	6030      	str	r0, [r6, #0]
 8003f5e:	4621      	mov	r1, r4
 8003f60:	4628      	mov	r0, r5
 8003f62:	f000 fba1 	bl	80046a8 <_sbrk_r>
 8003f66:	1c43      	adds	r3, r0, #1
 8003f68:	d103      	bne.n	8003f72 <sbrk_aligned+0x26>
 8003f6a:	f04f 34ff 	mov.w	r4, #4294967295
 8003f6e:	4620      	mov	r0, r4
 8003f70:	bd70      	pop	{r4, r5, r6, pc}
 8003f72:	1cc4      	adds	r4, r0, #3
 8003f74:	f024 0403 	bic.w	r4, r4, #3
 8003f78:	42a0      	cmp	r0, r4
 8003f7a:	d0f8      	beq.n	8003f6e <sbrk_aligned+0x22>
 8003f7c:	1a21      	subs	r1, r4, r0
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f000 fb92 	bl	80046a8 <_sbrk_r>
 8003f84:	3001      	adds	r0, #1
 8003f86:	d1f2      	bne.n	8003f6e <sbrk_aligned+0x22>
 8003f88:	e7ef      	b.n	8003f6a <sbrk_aligned+0x1e>
 8003f8a:	bf00      	nop
 8003f8c:	200002f4 	.word	0x200002f4

08003f90 <_malloc_r>:
 8003f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f94:	1ccd      	adds	r5, r1, #3
 8003f96:	f025 0503 	bic.w	r5, r5, #3
 8003f9a:	3508      	adds	r5, #8
 8003f9c:	2d0c      	cmp	r5, #12
 8003f9e:	bf38      	it	cc
 8003fa0:	250c      	movcc	r5, #12
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	db01      	blt.n	8003fac <_malloc_r+0x1c>
 8003fa8:	42a9      	cmp	r1, r5
 8003faa:	d904      	bls.n	8003fb6 <_malloc_r+0x26>
 8003fac:	230c      	movs	r3, #12
 8003fae:	6033      	str	r3, [r6, #0]
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800408c <_malloc_r+0xfc>
 8003fba:	f000 f869 	bl	8004090 <__malloc_lock>
 8003fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8003fc2:	461c      	mov	r4, r3
 8003fc4:	bb44      	cbnz	r4, 8004018 <_malloc_r+0x88>
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f7ff ffbf 	bl	8003f4c <sbrk_aligned>
 8003fce:	1c43      	adds	r3, r0, #1
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	d158      	bne.n	8004086 <_malloc_r+0xf6>
 8003fd4:	f8d8 4000 	ldr.w	r4, [r8]
 8003fd8:	4627      	mov	r7, r4
 8003fda:	2f00      	cmp	r7, #0
 8003fdc:	d143      	bne.n	8004066 <_malloc_r+0xd6>
 8003fde:	2c00      	cmp	r4, #0
 8003fe0:	d04b      	beq.n	800407a <_malloc_r+0xea>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	4639      	mov	r1, r7
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	eb04 0903 	add.w	r9, r4, r3
 8003fec:	f000 fb5c 	bl	80046a8 <_sbrk_r>
 8003ff0:	4581      	cmp	r9, r0
 8003ff2:	d142      	bne.n	800407a <_malloc_r+0xea>
 8003ff4:	6821      	ldr	r1, [r4, #0]
 8003ff6:	1a6d      	subs	r5, r5, r1
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	f7ff ffa6 	bl	8003f4c <sbrk_aligned>
 8004000:	3001      	adds	r0, #1
 8004002:	d03a      	beq.n	800407a <_malloc_r+0xea>
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	442b      	add	r3, r5
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	f8d8 3000 	ldr.w	r3, [r8]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	bb62      	cbnz	r2, 800406c <_malloc_r+0xdc>
 8004012:	f8c8 7000 	str.w	r7, [r8]
 8004016:	e00f      	b.n	8004038 <_malloc_r+0xa8>
 8004018:	6822      	ldr	r2, [r4, #0]
 800401a:	1b52      	subs	r2, r2, r5
 800401c:	d420      	bmi.n	8004060 <_malloc_r+0xd0>
 800401e:	2a0b      	cmp	r2, #11
 8004020:	d917      	bls.n	8004052 <_malloc_r+0xc2>
 8004022:	1961      	adds	r1, r4, r5
 8004024:	42a3      	cmp	r3, r4
 8004026:	6025      	str	r5, [r4, #0]
 8004028:	bf18      	it	ne
 800402a:	6059      	strne	r1, [r3, #4]
 800402c:	6863      	ldr	r3, [r4, #4]
 800402e:	bf08      	it	eq
 8004030:	f8c8 1000 	streq.w	r1, [r8]
 8004034:	5162      	str	r2, [r4, r5]
 8004036:	604b      	str	r3, [r1, #4]
 8004038:	4630      	mov	r0, r6
 800403a:	f000 f82f 	bl	800409c <__malloc_unlock>
 800403e:	f104 000b 	add.w	r0, r4, #11
 8004042:	1d23      	adds	r3, r4, #4
 8004044:	f020 0007 	bic.w	r0, r0, #7
 8004048:	1ac2      	subs	r2, r0, r3
 800404a:	bf1c      	itt	ne
 800404c:	1a1b      	subne	r3, r3, r0
 800404e:	50a3      	strne	r3, [r4, r2]
 8004050:	e7af      	b.n	8003fb2 <_malloc_r+0x22>
 8004052:	6862      	ldr	r2, [r4, #4]
 8004054:	42a3      	cmp	r3, r4
 8004056:	bf0c      	ite	eq
 8004058:	f8c8 2000 	streq.w	r2, [r8]
 800405c:	605a      	strne	r2, [r3, #4]
 800405e:	e7eb      	b.n	8004038 <_malloc_r+0xa8>
 8004060:	4623      	mov	r3, r4
 8004062:	6864      	ldr	r4, [r4, #4]
 8004064:	e7ae      	b.n	8003fc4 <_malloc_r+0x34>
 8004066:	463c      	mov	r4, r7
 8004068:	687f      	ldr	r7, [r7, #4]
 800406a:	e7b6      	b.n	8003fda <_malloc_r+0x4a>
 800406c:	461a      	mov	r2, r3
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	42a3      	cmp	r3, r4
 8004072:	d1fb      	bne.n	800406c <_malloc_r+0xdc>
 8004074:	2300      	movs	r3, #0
 8004076:	6053      	str	r3, [r2, #4]
 8004078:	e7de      	b.n	8004038 <_malloc_r+0xa8>
 800407a:	230c      	movs	r3, #12
 800407c:	6033      	str	r3, [r6, #0]
 800407e:	4630      	mov	r0, r6
 8004080:	f000 f80c 	bl	800409c <__malloc_unlock>
 8004084:	e794      	b.n	8003fb0 <_malloc_r+0x20>
 8004086:	6005      	str	r5, [r0, #0]
 8004088:	e7d6      	b.n	8004038 <_malloc_r+0xa8>
 800408a:	bf00      	nop
 800408c:	200002f8 	.word	0x200002f8

08004090 <__malloc_lock>:
 8004090:	4801      	ldr	r0, [pc, #4]	@ (8004098 <__malloc_lock+0x8>)
 8004092:	f7ff bf07 	b.w	8003ea4 <__retarget_lock_acquire_recursive>
 8004096:	bf00      	nop
 8004098:	200002f0 	.word	0x200002f0

0800409c <__malloc_unlock>:
 800409c:	4801      	ldr	r0, [pc, #4]	@ (80040a4 <__malloc_unlock+0x8>)
 800409e:	f7ff bf02 	b.w	8003ea6 <__retarget_lock_release_recursive>
 80040a2:	bf00      	nop
 80040a4:	200002f0 	.word	0x200002f0

080040a8 <__ssputs_r>:
 80040a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ac:	688e      	ldr	r6, [r1, #8]
 80040ae:	461f      	mov	r7, r3
 80040b0:	42be      	cmp	r6, r7
 80040b2:	680b      	ldr	r3, [r1, #0]
 80040b4:	4682      	mov	sl, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	4690      	mov	r8, r2
 80040ba:	d82d      	bhi.n	8004118 <__ssputs_r+0x70>
 80040bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040c4:	d026      	beq.n	8004114 <__ssputs_r+0x6c>
 80040c6:	6965      	ldr	r5, [r4, #20]
 80040c8:	6909      	ldr	r1, [r1, #16]
 80040ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040ce:	eba3 0901 	sub.w	r9, r3, r1
 80040d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040d6:	1c7b      	adds	r3, r7, #1
 80040d8:	444b      	add	r3, r9
 80040da:	106d      	asrs	r5, r5, #1
 80040dc:	429d      	cmp	r5, r3
 80040de:	bf38      	it	cc
 80040e0:	461d      	movcc	r5, r3
 80040e2:	0553      	lsls	r3, r2, #21
 80040e4:	d527      	bpl.n	8004136 <__ssputs_r+0x8e>
 80040e6:	4629      	mov	r1, r5
 80040e8:	f7ff ff52 	bl	8003f90 <_malloc_r>
 80040ec:	4606      	mov	r6, r0
 80040ee:	b360      	cbz	r0, 800414a <__ssputs_r+0xa2>
 80040f0:	6921      	ldr	r1, [r4, #16]
 80040f2:	464a      	mov	r2, r9
 80040f4:	f000 fae8 	bl	80046c8 <memcpy>
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	6126      	str	r6, [r4, #16]
 8004106:	6165      	str	r5, [r4, #20]
 8004108:	444e      	add	r6, r9
 800410a:	eba5 0509 	sub.w	r5, r5, r9
 800410e:	6026      	str	r6, [r4, #0]
 8004110:	60a5      	str	r5, [r4, #8]
 8004112:	463e      	mov	r6, r7
 8004114:	42be      	cmp	r6, r7
 8004116:	d900      	bls.n	800411a <__ssputs_r+0x72>
 8004118:	463e      	mov	r6, r7
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	4632      	mov	r2, r6
 800411e:	4641      	mov	r1, r8
 8004120:	f000 faa8 	bl	8004674 <memmove>
 8004124:	68a3      	ldr	r3, [r4, #8]
 8004126:	1b9b      	subs	r3, r3, r6
 8004128:	60a3      	str	r3, [r4, #8]
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	4433      	add	r3, r6
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	2000      	movs	r0, #0
 8004132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004136:	462a      	mov	r2, r5
 8004138:	f000 fad4 	bl	80046e4 <_realloc_r>
 800413c:	4606      	mov	r6, r0
 800413e:	2800      	cmp	r0, #0
 8004140:	d1e0      	bne.n	8004104 <__ssputs_r+0x5c>
 8004142:	6921      	ldr	r1, [r4, #16]
 8004144:	4650      	mov	r0, sl
 8004146:	f7ff feb7 	bl	8003eb8 <_free_r>
 800414a:	230c      	movs	r3, #12
 800414c:	f8ca 3000 	str.w	r3, [sl]
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004156:	81a3      	strh	r3, [r4, #12]
 8004158:	f04f 30ff 	mov.w	r0, #4294967295
 800415c:	e7e9      	b.n	8004132 <__ssputs_r+0x8a>
	...

08004160 <_svfiprintf_r>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	4698      	mov	r8, r3
 8004166:	898b      	ldrh	r3, [r1, #12]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	b09d      	sub	sp, #116	@ 0x74
 800416c:	4607      	mov	r7, r0
 800416e:	460d      	mov	r5, r1
 8004170:	4614      	mov	r4, r2
 8004172:	d510      	bpl.n	8004196 <_svfiprintf_r+0x36>
 8004174:	690b      	ldr	r3, [r1, #16]
 8004176:	b973      	cbnz	r3, 8004196 <_svfiprintf_r+0x36>
 8004178:	2140      	movs	r1, #64	@ 0x40
 800417a:	f7ff ff09 	bl	8003f90 <_malloc_r>
 800417e:	6028      	str	r0, [r5, #0]
 8004180:	6128      	str	r0, [r5, #16]
 8004182:	b930      	cbnz	r0, 8004192 <_svfiprintf_r+0x32>
 8004184:	230c      	movs	r3, #12
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	b01d      	add	sp, #116	@ 0x74
 800418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004192:	2340      	movs	r3, #64	@ 0x40
 8004194:	616b      	str	r3, [r5, #20]
 8004196:	2300      	movs	r3, #0
 8004198:	9309      	str	r3, [sp, #36]	@ 0x24
 800419a:	2320      	movs	r3, #32
 800419c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a4:	2330      	movs	r3, #48	@ 0x30
 80041a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004344 <_svfiprintf_r+0x1e4>
 80041aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041ae:	f04f 0901 	mov.w	r9, #1
 80041b2:	4623      	mov	r3, r4
 80041b4:	469a      	mov	sl, r3
 80041b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ba:	b10a      	cbz	r2, 80041c0 <_svfiprintf_r+0x60>
 80041bc:	2a25      	cmp	r2, #37	@ 0x25
 80041be:	d1f9      	bne.n	80041b4 <_svfiprintf_r+0x54>
 80041c0:	ebba 0b04 	subs.w	fp, sl, r4
 80041c4:	d00b      	beq.n	80041de <_svfiprintf_r+0x7e>
 80041c6:	465b      	mov	r3, fp
 80041c8:	4622      	mov	r2, r4
 80041ca:	4629      	mov	r1, r5
 80041cc:	4638      	mov	r0, r7
 80041ce:	f7ff ff6b 	bl	80040a8 <__ssputs_r>
 80041d2:	3001      	adds	r0, #1
 80041d4:	f000 80a7 	beq.w	8004326 <_svfiprintf_r+0x1c6>
 80041d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041da:	445a      	add	r2, fp
 80041dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80041de:	f89a 3000 	ldrb.w	r3, [sl]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 809f 	beq.w	8004326 <_svfiprintf_r+0x1c6>
 80041e8:	2300      	movs	r3, #0
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041f2:	f10a 0a01 	add.w	sl, sl, #1
 80041f6:	9304      	str	r3, [sp, #16]
 80041f8:	9307      	str	r3, [sp, #28]
 80041fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004200:	4654      	mov	r4, sl
 8004202:	2205      	movs	r2, #5
 8004204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004208:	484e      	ldr	r0, [pc, #312]	@ (8004344 <_svfiprintf_r+0x1e4>)
 800420a:	f7fc f821 	bl	8000250 <memchr>
 800420e:	9a04      	ldr	r2, [sp, #16]
 8004210:	b9d8      	cbnz	r0, 800424a <_svfiprintf_r+0xea>
 8004212:	06d0      	lsls	r0, r2, #27
 8004214:	bf44      	itt	mi
 8004216:	2320      	movmi	r3, #32
 8004218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800421c:	0711      	lsls	r1, r2, #28
 800421e:	bf44      	itt	mi
 8004220:	232b      	movmi	r3, #43	@ 0x2b
 8004222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004226:	f89a 3000 	ldrb.w	r3, [sl]
 800422a:	2b2a      	cmp	r3, #42	@ 0x2a
 800422c:	d015      	beq.n	800425a <_svfiprintf_r+0xfa>
 800422e:	9a07      	ldr	r2, [sp, #28]
 8004230:	4654      	mov	r4, sl
 8004232:	2000      	movs	r0, #0
 8004234:	f04f 0c0a 	mov.w	ip, #10
 8004238:	4621      	mov	r1, r4
 800423a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800423e:	3b30      	subs	r3, #48	@ 0x30
 8004240:	2b09      	cmp	r3, #9
 8004242:	d94b      	bls.n	80042dc <_svfiprintf_r+0x17c>
 8004244:	b1b0      	cbz	r0, 8004274 <_svfiprintf_r+0x114>
 8004246:	9207      	str	r2, [sp, #28]
 8004248:	e014      	b.n	8004274 <_svfiprintf_r+0x114>
 800424a:	eba0 0308 	sub.w	r3, r0, r8
 800424e:	fa09 f303 	lsl.w	r3, r9, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	46a2      	mov	sl, r4
 8004258:	e7d2      	b.n	8004200 <_svfiprintf_r+0xa0>
 800425a:	9b03      	ldr	r3, [sp, #12]
 800425c:	1d19      	adds	r1, r3, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	9103      	str	r1, [sp, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	bfbb      	ittet	lt
 8004266:	425b      	neglt	r3, r3
 8004268:	f042 0202 	orrlt.w	r2, r2, #2
 800426c:	9307      	strge	r3, [sp, #28]
 800426e:	9307      	strlt	r3, [sp, #28]
 8004270:	bfb8      	it	lt
 8004272:	9204      	strlt	r2, [sp, #16]
 8004274:	7823      	ldrb	r3, [r4, #0]
 8004276:	2b2e      	cmp	r3, #46	@ 0x2e
 8004278:	d10a      	bne.n	8004290 <_svfiprintf_r+0x130>
 800427a:	7863      	ldrb	r3, [r4, #1]
 800427c:	2b2a      	cmp	r3, #42	@ 0x2a
 800427e:	d132      	bne.n	80042e6 <_svfiprintf_r+0x186>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	9203      	str	r2, [sp, #12]
 8004288:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800428c:	3402      	adds	r4, #2
 800428e:	9305      	str	r3, [sp, #20]
 8004290:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004354 <_svfiprintf_r+0x1f4>
 8004294:	7821      	ldrb	r1, [r4, #0]
 8004296:	2203      	movs	r2, #3
 8004298:	4650      	mov	r0, sl
 800429a:	f7fb ffd9 	bl	8000250 <memchr>
 800429e:	b138      	cbz	r0, 80042b0 <_svfiprintf_r+0x150>
 80042a0:	9b04      	ldr	r3, [sp, #16]
 80042a2:	eba0 000a 	sub.w	r0, r0, sl
 80042a6:	2240      	movs	r2, #64	@ 0x40
 80042a8:	4082      	lsls	r2, r0
 80042aa:	4313      	orrs	r3, r2
 80042ac:	3401      	adds	r4, #1
 80042ae:	9304      	str	r3, [sp, #16]
 80042b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b4:	4824      	ldr	r0, [pc, #144]	@ (8004348 <_svfiprintf_r+0x1e8>)
 80042b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042ba:	2206      	movs	r2, #6
 80042bc:	f7fb ffc8 	bl	8000250 <memchr>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d036      	beq.n	8004332 <_svfiprintf_r+0x1d2>
 80042c4:	4b21      	ldr	r3, [pc, #132]	@ (800434c <_svfiprintf_r+0x1ec>)
 80042c6:	bb1b      	cbnz	r3, 8004310 <_svfiprintf_r+0x1b0>
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	3307      	adds	r3, #7
 80042cc:	f023 0307 	bic.w	r3, r3, #7
 80042d0:	3308      	adds	r3, #8
 80042d2:	9303      	str	r3, [sp, #12]
 80042d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d6:	4433      	add	r3, r6
 80042d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042da:	e76a      	b.n	80041b2 <_svfiprintf_r+0x52>
 80042dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80042e0:	460c      	mov	r4, r1
 80042e2:	2001      	movs	r0, #1
 80042e4:	e7a8      	b.n	8004238 <_svfiprintf_r+0xd8>
 80042e6:	2300      	movs	r3, #0
 80042e8:	3401      	adds	r4, #1
 80042ea:	9305      	str	r3, [sp, #20]
 80042ec:	4619      	mov	r1, r3
 80042ee:	f04f 0c0a 	mov.w	ip, #10
 80042f2:	4620      	mov	r0, r4
 80042f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042f8:	3a30      	subs	r2, #48	@ 0x30
 80042fa:	2a09      	cmp	r2, #9
 80042fc:	d903      	bls.n	8004306 <_svfiprintf_r+0x1a6>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0c6      	beq.n	8004290 <_svfiprintf_r+0x130>
 8004302:	9105      	str	r1, [sp, #20]
 8004304:	e7c4      	b.n	8004290 <_svfiprintf_r+0x130>
 8004306:	fb0c 2101 	mla	r1, ip, r1, r2
 800430a:	4604      	mov	r4, r0
 800430c:	2301      	movs	r3, #1
 800430e:	e7f0      	b.n	80042f2 <_svfiprintf_r+0x192>
 8004310:	ab03      	add	r3, sp, #12
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	462a      	mov	r2, r5
 8004316:	4b0e      	ldr	r3, [pc, #56]	@ (8004350 <_svfiprintf_r+0x1f0>)
 8004318:	a904      	add	r1, sp, #16
 800431a:	4638      	mov	r0, r7
 800431c:	f3af 8000 	nop.w
 8004320:	1c42      	adds	r2, r0, #1
 8004322:	4606      	mov	r6, r0
 8004324:	d1d6      	bne.n	80042d4 <_svfiprintf_r+0x174>
 8004326:	89ab      	ldrh	r3, [r5, #12]
 8004328:	065b      	lsls	r3, r3, #25
 800432a:	f53f af2d 	bmi.w	8004188 <_svfiprintf_r+0x28>
 800432e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004330:	e72c      	b.n	800418c <_svfiprintf_r+0x2c>
 8004332:	ab03      	add	r3, sp, #12
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	462a      	mov	r2, r5
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <_svfiprintf_r+0x1f0>)
 800433a:	a904      	add	r1, sp, #16
 800433c:	4638      	mov	r0, r7
 800433e:	f000 f879 	bl	8004434 <_printf_i>
 8004342:	e7ed      	b.n	8004320 <_svfiprintf_r+0x1c0>
 8004344:	08004a10 	.word	0x08004a10
 8004348:	08004a1a 	.word	0x08004a1a
 800434c:	00000000 	.word	0x00000000
 8004350:	080040a9 	.word	0x080040a9
 8004354:	08004a16 	.word	0x08004a16

08004358 <_printf_common>:
 8004358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800435c:	4616      	mov	r6, r2
 800435e:	4698      	mov	r8, r3
 8004360:	688a      	ldr	r2, [r1, #8]
 8004362:	690b      	ldr	r3, [r1, #16]
 8004364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004368:	4293      	cmp	r3, r2
 800436a:	bfb8      	it	lt
 800436c:	4613      	movlt	r3, r2
 800436e:	6033      	str	r3, [r6, #0]
 8004370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004374:	4607      	mov	r7, r0
 8004376:	460c      	mov	r4, r1
 8004378:	b10a      	cbz	r2, 800437e <_printf_common+0x26>
 800437a:	3301      	adds	r3, #1
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	0699      	lsls	r1, r3, #26
 8004382:	bf42      	ittt	mi
 8004384:	6833      	ldrmi	r3, [r6, #0]
 8004386:	3302      	addmi	r3, #2
 8004388:	6033      	strmi	r3, [r6, #0]
 800438a:	6825      	ldr	r5, [r4, #0]
 800438c:	f015 0506 	ands.w	r5, r5, #6
 8004390:	d106      	bne.n	80043a0 <_printf_common+0x48>
 8004392:	f104 0a19 	add.w	sl, r4, #25
 8004396:	68e3      	ldr	r3, [r4, #12]
 8004398:	6832      	ldr	r2, [r6, #0]
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	42ab      	cmp	r3, r5
 800439e:	dc26      	bgt.n	80043ee <_printf_common+0x96>
 80043a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	3b00      	subs	r3, #0
 80043a8:	bf18      	it	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	0692      	lsls	r2, r2, #26
 80043ae:	d42b      	bmi.n	8004408 <_printf_common+0xb0>
 80043b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043b4:	4641      	mov	r1, r8
 80043b6:	4638      	mov	r0, r7
 80043b8:	47c8      	blx	r9
 80043ba:	3001      	adds	r0, #1
 80043bc:	d01e      	beq.n	80043fc <_printf_common+0xa4>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	6922      	ldr	r2, [r4, #16]
 80043c2:	f003 0306 	and.w	r3, r3, #6
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	bf02      	ittt	eq
 80043ca:	68e5      	ldreq	r5, [r4, #12]
 80043cc:	6833      	ldreq	r3, [r6, #0]
 80043ce:	1aed      	subeq	r5, r5, r3
 80043d0:	68a3      	ldr	r3, [r4, #8]
 80043d2:	bf0c      	ite	eq
 80043d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d8:	2500      	movne	r5, #0
 80043da:	4293      	cmp	r3, r2
 80043dc:	bfc4      	itt	gt
 80043de:	1a9b      	subgt	r3, r3, r2
 80043e0:	18ed      	addgt	r5, r5, r3
 80043e2:	2600      	movs	r6, #0
 80043e4:	341a      	adds	r4, #26
 80043e6:	42b5      	cmp	r5, r6
 80043e8:	d11a      	bne.n	8004420 <_printf_common+0xc8>
 80043ea:	2000      	movs	r0, #0
 80043ec:	e008      	b.n	8004400 <_printf_common+0xa8>
 80043ee:	2301      	movs	r3, #1
 80043f0:	4652      	mov	r2, sl
 80043f2:	4641      	mov	r1, r8
 80043f4:	4638      	mov	r0, r7
 80043f6:	47c8      	blx	r9
 80043f8:	3001      	adds	r0, #1
 80043fa:	d103      	bne.n	8004404 <_printf_common+0xac>
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004404:	3501      	adds	r5, #1
 8004406:	e7c6      	b.n	8004396 <_printf_common+0x3e>
 8004408:	18e1      	adds	r1, r4, r3
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	2030      	movs	r0, #48	@ 0x30
 800440e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004412:	4422      	add	r2, r4
 8004414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800441c:	3302      	adds	r3, #2
 800441e:	e7c7      	b.n	80043b0 <_printf_common+0x58>
 8004420:	2301      	movs	r3, #1
 8004422:	4622      	mov	r2, r4
 8004424:	4641      	mov	r1, r8
 8004426:	4638      	mov	r0, r7
 8004428:	47c8      	blx	r9
 800442a:	3001      	adds	r0, #1
 800442c:	d0e6      	beq.n	80043fc <_printf_common+0xa4>
 800442e:	3601      	adds	r6, #1
 8004430:	e7d9      	b.n	80043e6 <_printf_common+0x8e>
	...

08004434 <_printf_i>:
 8004434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	7e0f      	ldrb	r7, [r1, #24]
 800443a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800443c:	2f78      	cmp	r7, #120	@ 0x78
 800443e:	4691      	mov	r9, r2
 8004440:	4680      	mov	r8, r0
 8004442:	460c      	mov	r4, r1
 8004444:	469a      	mov	sl, r3
 8004446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800444a:	d807      	bhi.n	800445c <_printf_i+0x28>
 800444c:	2f62      	cmp	r7, #98	@ 0x62
 800444e:	d80a      	bhi.n	8004466 <_printf_i+0x32>
 8004450:	2f00      	cmp	r7, #0
 8004452:	f000 80d2 	beq.w	80045fa <_printf_i+0x1c6>
 8004456:	2f58      	cmp	r7, #88	@ 0x58
 8004458:	f000 80b9 	beq.w	80045ce <_printf_i+0x19a>
 800445c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004464:	e03a      	b.n	80044dc <_printf_i+0xa8>
 8004466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800446a:	2b15      	cmp	r3, #21
 800446c:	d8f6      	bhi.n	800445c <_printf_i+0x28>
 800446e:	a101      	add	r1, pc, #4	@ (adr r1, 8004474 <_printf_i+0x40>)
 8004470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004474:	080044cd 	.word	0x080044cd
 8004478:	080044e1 	.word	0x080044e1
 800447c:	0800445d 	.word	0x0800445d
 8004480:	0800445d 	.word	0x0800445d
 8004484:	0800445d 	.word	0x0800445d
 8004488:	0800445d 	.word	0x0800445d
 800448c:	080044e1 	.word	0x080044e1
 8004490:	0800445d 	.word	0x0800445d
 8004494:	0800445d 	.word	0x0800445d
 8004498:	0800445d 	.word	0x0800445d
 800449c:	0800445d 	.word	0x0800445d
 80044a0:	080045e1 	.word	0x080045e1
 80044a4:	0800450b 	.word	0x0800450b
 80044a8:	0800459b 	.word	0x0800459b
 80044ac:	0800445d 	.word	0x0800445d
 80044b0:	0800445d 	.word	0x0800445d
 80044b4:	08004603 	.word	0x08004603
 80044b8:	0800445d 	.word	0x0800445d
 80044bc:	0800450b 	.word	0x0800450b
 80044c0:	0800445d 	.word	0x0800445d
 80044c4:	0800445d 	.word	0x0800445d
 80044c8:	080045a3 	.word	0x080045a3
 80044cc:	6833      	ldr	r3, [r6, #0]
 80044ce:	1d1a      	adds	r2, r3, #4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6032      	str	r2, [r6, #0]
 80044d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044dc:	2301      	movs	r3, #1
 80044de:	e09d      	b.n	800461c <_printf_i+0x1e8>
 80044e0:	6833      	ldr	r3, [r6, #0]
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	6031      	str	r1, [r6, #0]
 80044e8:	0606      	lsls	r6, r0, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0xbc>
 80044ec:	681d      	ldr	r5, [r3, #0]
 80044ee:	e003      	b.n	80044f8 <_printf_i+0xc4>
 80044f0:	0645      	lsls	r5, r0, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0xb8>
 80044f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044f8:	2d00      	cmp	r5, #0
 80044fa:	da03      	bge.n	8004504 <_printf_i+0xd0>
 80044fc:	232d      	movs	r3, #45	@ 0x2d
 80044fe:	426d      	negs	r5, r5
 8004500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004504:	4859      	ldr	r0, [pc, #356]	@ (800466c <_printf_i+0x238>)
 8004506:	230a      	movs	r3, #10
 8004508:	e011      	b.n	800452e <_printf_i+0xfa>
 800450a:	6821      	ldr	r1, [r4, #0]
 800450c:	6833      	ldr	r3, [r6, #0]
 800450e:	0608      	lsls	r0, r1, #24
 8004510:	f853 5b04 	ldr.w	r5, [r3], #4
 8004514:	d402      	bmi.n	800451c <_printf_i+0xe8>
 8004516:	0649      	lsls	r1, r1, #25
 8004518:	bf48      	it	mi
 800451a:	b2ad      	uxthmi	r5, r5
 800451c:	2f6f      	cmp	r7, #111	@ 0x6f
 800451e:	4853      	ldr	r0, [pc, #332]	@ (800466c <_printf_i+0x238>)
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	bf14      	ite	ne
 8004524:	230a      	movne	r3, #10
 8004526:	2308      	moveq	r3, #8
 8004528:	2100      	movs	r1, #0
 800452a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800452e:	6866      	ldr	r6, [r4, #4]
 8004530:	60a6      	str	r6, [r4, #8]
 8004532:	2e00      	cmp	r6, #0
 8004534:	bfa2      	ittt	ge
 8004536:	6821      	ldrge	r1, [r4, #0]
 8004538:	f021 0104 	bicge.w	r1, r1, #4
 800453c:	6021      	strge	r1, [r4, #0]
 800453e:	b90d      	cbnz	r5, 8004544 <_printf_i+0x110>
 8004540:	2e00      	cmp	r6, #0
 8004542:	d04b      	beq.n	80045dc <_printf_i+0x1a8>
 8004544:	4616      	mov	r6, r2
 8004546:	fbb5 f1f3 	udiv	r1, r5, r3
 800454a:	fb03 5711 	mls	r7, r3, r1, r5
 800454e:	5dc7      	ldrb	r7, [r0, r7]
 8004550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004554:	462f      	mov	r7, r5
 8004556:	42bb      	cmp	r3, r7
 8004558:	460d      	mov	r5, r1
 800455a:	d9f4      	bls.n	8004546 <_printf_i+0x112>
 800455c:	2b08      	cmp	r3, #8
 800455e:	d10b      	bne.n	8004578 <_printf_i+0x144>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	07df      	lsls	r7, r3, #31
 8004564:	d508      	bpl.n	8004578 <_printf_i+0x144>
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	6861      	ldr	r1, [r4, #4]
 800456a:	4299      	cmp	r1, r3
 800456c:	bfde      	ittt	le
 800456e:	2330      	movle	r3, #48	@ 0x30
 8004570:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004574:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004578:	1b92      	subs	r2, r2, r6
 800457a:	6122      	str	r2, [r4, #16]
 800457c:	f8cd a000 	str.w	sl, [sp]
 8004580:	464b      	mov	r3, r9
 8004582:	aa03      	add	r2, sp, #12
 8004584:	4621      	mov	r1, r4
 8004586:	4640      	mov	r0, r8
 8004588:	f7ff fee6 	bl	8004358 <_printf_common>
 800458c:	3001      	adds	r0, #1
 800458e:	d14a      	bne.n	8004626 <_printf_i+0x1f2>
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	b004      	add	sp, #16
 8004596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	f043 0320 	orr.w	r3, r3, #32
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	4833      	ldr	r0, [pc, #204]	@ (8004670 <_printf_i+0x23c>)
 80045a4:	2778      	movs	r7, #120	@ 0x78
 80045a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	6831      	ldr	r1, [r6, #0]
 80045ae:	061f      	lsls	r7, r3, #24
 80045b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80045b4:	d402      	bmi.n	80045bc <_printf_i+0x188>
 80045b6:	065f      	lsls	r7, r3, #25
 80045b8:	bf48      	it	mi
 80045ba:	b2ad      	uxthmi	r5, r5
 80045bc:	6031      	str	r1, [r6, #0]
 80045be:	07d9      	lsls	r1, r3, #31
 80045c0:	bf44      	itt	mi
 80045c2:	f043 0320 	orrmi.w	r3, r3, #32
 80045c6:	6023      	strmi	r3, [r4, #0]
 80045c8:	b11d      	cbz	r5, 80045d2 <_printf_i+0x19e>
 80045ca:	2310      	movs	r3, #16
 80045cc:	e7ac      	b.n	8004528 <_printf_i+0xf4>
 80045ce:	4827      	ldr	r0, [pc, #156]	@ (800466c <_printf_i+0x238>)
 80045d0:	e7e9      	b.n	80045a6 <_printf_i+0x172>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	f023 0320 	bic.w	r3, r3, #32
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	e7f6      	b.n	80045ca <_printf_i+0x196>
 80045dc:	4616      	mov	r6, r2
 80045de:	e7bd      	b.n	800455c <_printf_i+0x128>
 80045e0:	6833      	ldr	r3, [r6, #0]
 80045e2:	6825      	ldr	r5, [r4, #0]
 80045e4:	6961      	ldr	r1, [r4, #20]
 80045e6:	1d18      	adds	r0, r3, #4
 80045e8:	6030      	str	r0, [r6, #0]
 80045ea:	062e      	lsls	r6, r5, #24
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	d501      	bpl.n	80045f4 <_printf_i+0x1c0>
 80045f0:	6019      	str	r1, [r3, #0]
 80045f2:	e002      	b.n	80045fa <_printf_i+0x1c6>
 80045f4:	0668      	lsls	r0, r5, #25
 80045f6:	d5fb      	bpl.n	80045f0 <_printf_i+0x1bc>
 80045f8:	8019      	strh	r1, [r3, #0]
 80045fa:	2300      	movs	r3, #0
 80045fc:	6123      	str	r3, [r4, #16]
 80045fe:	4616      	mov	r6, r2
 8004600:	e7bc      	b.n	800457c <_printf_i+0x148>
 8004602:	6833      	ldr	r3, [r6, #0]
 8004604:	1d1a      	adds	r2, r3, #4
 8004606:	6032      	str	r2, [r6, #0]
 8004608:	681e      	ldr	r6, [r3, #0]
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	2100      	movs	r1, #0
 800460e:	4630      	mov	r0, r6
 8004610:	f7fb fe1e 	bl	8000250 <memchr>
 8004614:	b108      	cbz	r0, 800461a <_printf_i+0x1e6>
 8004616:	1b80      	subs	r0, r0, r6
 8004618:	6060      	str	r0, [r4, #4]
 800461a:	6863      	ldr	r3, [r4, #4]
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	2300      	movs	r3, #0
 8004620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004624:	e7aa      	b.n	800457c <_printf_i+0x148>
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	4632      	mov	r2, r6
 800462a:	4649      	mov	r1, r9
 800462c:	4640      	mov	r0, r8
 800462e:	47d0      	blx	sl
 8004630:	3001      	adds	r0, #1
 8004632:	d0ad      	beq.n	8004590 <_printf_i+0x15c>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	079b      	lsls	r3, r3, #30
 8004638:	d413      	bmi.n	8004662 <_printf_i+0x22e>
 800463a:	68e0      	ldr	r0, [r4, #12]
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	4298      	cmp	r0, r3
 8004640:	bfb8      	it	lt
 8004642:	4618      	movlt	r0, r3
 8004644:	e7a6      	b.n	8004594 <_printf_i+0x160>
 8004646:	2301      	movs	r3, #1
 8004648:	4632      	mov	r2, r6
 800464a:	4649      	mov	r1, r9
 800464c:	4640      	mov	r0, r8
 800464e:	47d0      	blx	sl
 8004650:	3001      	adds	r0, #1
 8004652:	d09d      	beq.n	8004590 <_printf_i+0x15c>
 8004654:	3501      	adds	r5, #1
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	9903      	ldr	r1, [sp, #12]
 800465a:	1a5b      	subs	r3, r3, r1
 800465c:	42ab      	cmp	r3, r5
 800465e:	dcf2      	bgt.n	8004646 <_printf_i+0x212>
 8004660:	e7eb      	b.n	800463a <_printf_i+0x206>
 8004662:	2500      	movs	r5, #0
 8004664:	f104 0619 	add.w	r6, r4, #25
 8004668:	e7f5      	b.n	8004656 <_printf_i+0x222>
 800466a:	bf00      	nop
 800466c:	08004a21 	.word	0x08004a21
 8004670:	08004a32 	.word	0x08004a32

08004674 <memmove>:
 8004674:	4288      	cmp	r0, r1
 8004676:	b510      	push	{r4, lr}
 8004678:	eb01 0402 	add.w	r4, r1, r2
 800467c:	d902      	bls.n	8004684 <memmove+0x10>
 800467e:	4284      	cmp	r4, r0
 8004680:	4623      	mov	r3, r4
 8004682:	d807      	bhi.n	8004694 <memmove+0x20>
 8004684:	1e43      	subs	r3, r0, #1
 8004686:	42a1      	cmp	r1, r4
 8004688:	d008      	beq.n	800469c <memmove+0x28>
 800468a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800468e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004692:	e7f8      	b.n	8004686 <memmove+0x12>
 8004694:	4402      	add	r2, r0
 8004696:	4601      	mov	r1, r0
 8004698:	428a      	cmp	r2, r1
 800469a:	d100      	bne.n	800469e <memmove+0x2a>
 800469c:	bd10      	pop	{r4, pc}
 800469e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046a6:	e7f7      	b.n	8004698 <memmove+0x24>

080046a8 <_sbrk_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d06      	ldr	r5, [pc, #24]	@ (80046c4 <_sbrk_r+0x1c>)
 80046ac:	2300      	movs	r3, #0
 80046ae:	4604      	mov	r4, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	f7fc fe5a 	bl	800136c <_sbrk>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_sbrk_r+0x1a>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_sbrk_r+0x1a>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	200002ec 	.word	0x200002ec

080046c8 <memcpy>:
 80046c8:	440a      	add	r2, r1
 80046ca:	4291      	cmp	r1, r2
 80046cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80046d0:	d100      	bne.n	80046d4 <memcpy+0xc>
 80046d2:	4770      	bx	lr
 80046d4:	b510      	push	{r4, lr}
 80046d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046de:	4291      	cmp	r1, r2
 80046e0:	d1f9      	bne.n	80046d6 <memcpy+0xe>
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <_realloc_r>:
 80046e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e8:	4680      	mov	r8, r0
 80046ea:	4615      	mov	r5, r2
 80046ec:	460c      	mov	r4, r1
 80046ee:	b921      	cbnz	r1, 80046fa <_realloc_r+0x16>
 80046f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f4:	4611      	mov	r1, r2
 80046f6:	f7ff bc4b 	b.w	8003f90 <_malloc_r>
 80046fa:	b92a      	cbnz	r2, 8004708 <_realloc_r+0x24>
 80046fc:	f7ff fbdc 	bl	8003eb8 <_free_r>
 8004700:	2400      	movs	r4, #0
 8004702:	4620      	mov	r0, r4
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	f000 f81a 	bl	8004740 <_malloc_usable_size_r>
 800470c:	4285      	cmp	r5, r0
 800470e:	4606      	mov	r6, r0
 8004710:	d802      	bhi.n	8004718 <_realloc_r+0x34>
 8004712:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004716:	d8f4      	bhi.n	8004702 <_realloc_r+0x1e>
 8004718:	4629      	mov	r1, r5
 800471a:	4640      	mov	r0, r8
 800471c:	f7ff fc38 	bl	8003f90 <_malloc_r>
 8004720:	4607      	mov	r7, r0
 8004722:	2800      	cmp	r0, #0
 8004724:	d0ec      	beq.n	8004700 <_realloc_r+0x1c>
 8004726:	42b5      	cmp	r5, r6
 8004728:	462a      	mov	r2, r5
 800472a:	4621      	mov	r1, r4
 800472c:	bf28      	it	cs
 800472e:	4632      	movcs	r2, r6
 8004730:	f7ff ffca 	bl	80046c8 <memcpy>
 8004734:	4621      	mov	r1, r4
 8004736:	4640      	mov	r0, r8
 8004738:	f7ff fbbe 	bl	8003eb8 <_free_r>
 800473c:	463c      	mov	r4, r7
 800473e:	e7e0      	b.n	8004702 <_realloc_r+0x1e>

08004740 <_malloc_usable_size_r>:
 8004740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004744:	1f18      	subs	r0, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	bfbc      	itt	lt
 800474a:	580b      	ldrlt	r3, [r1, r0]
 800474c:	18c0      	addlt	r0, r0, r3
 800474e:	4770      	bx	lr

08004750 <_init>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	bf00      	nop
 8004754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004756:	bc08      	pop	{r3}
 8004758:	469e      	mov	lr, r3
 800475a:	4770      	bx	lr

0800475c <_fini>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr
